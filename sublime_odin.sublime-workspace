{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"orbiting",
				"orbiting_dir"
			],
			[
				"s",
				"swing_angle_end"
			],
			[
				"draw",
				"draw_line_on_grid(start_pos: [2]f32, end_pos: [2]f32, thickness: f32, color: raylib.Color, grid_cell_size: f32)"
			],
			[
				"parent",
				"parent_entity_handle"
			],
			[
				"DrawLine",
				"DrawLineEx(startPos, endPos: Vector2, thick: f32, color: Color)"
			],
			[
				"paren",
				"parent_entity_handle"
			],
			[
				"get_root",
				"entity_get_root_pos(handle: Entity_Handle) "
			],
			[
				"parn",
				"parent_entity_handle"
			],
			[
				"ha_get",
				"ha_get_ptr(ha: Handle_Array($T, $HT), h: HT) "
			],
			[
				"ha_",
				"ha_add(ha: ^Handle_Array($T, $HT), v: T) "
			],
			[
				"bytes",
				"bytes_png_rope"
			],
			[
				"bytes_png",
				"bytes_png_unicycle1"
			],
			[
				"entity_get_root_",
				"entity_get_root_pos(id: Entity_Id) "
			],
			[
				"entity",
				"entity_get_root_collider(id: Entity_Id) "
			],
			[
				"biscuit",
				"biscuit_relative_to_return_parent"
			],
			[
				"entity_",
				"entity_root_pos_to_relative_pos(root_pos: [2]f32, relative_to_id: Entity_Id) "
			],
			[
				"lerp_position",
				"lerp_position_advance_and_notify_just_finished(lerp: ^Lerp_Position, dt: f32) "
			],
			[
				"wait_",
				"wait_timer_duration"
			],
			[
				"wait",
				"wait_timer_duration"
			],
			[
				"countdown",
				"countdown_and_notify_just_finished(t: ^f32, dt: f32) "
			],
			[
				"bytes_pn",
				"bytes_png_cannon"
			],
			[
				"game",
				"global_game_view_pixels_width"
			],
			[
				"entit",
				"entity_get_root_pos(id: Entity_Id) "
			],
			[
				"Root",
				"Root_Entity_Id"
			],
			[
				"draw_",
				"draw_grid_texture_clip_on_grid(tex: raylib.Texture2D, src_rectangle: raylib.Rectangle, src_grid_cell_size: f32, dst_rectangle: raylib.Rectangle, dst_grid_cell_size, rotation: f32, flip_x: bool = false, flip_y: bool = false)"
			],
			[
				"DrawTexture",
				"DrawTexturePro(texture: Texture2D, source, dest: Rectangle, origin: Vector2, rotation: f32, tint: Color)"
			],
			[
				"LoadImageFrom",
				"LoadImageFromMemory(fileType: cstring, fileData: rawptr, dataSize: c.int) "
			],
			[
				"texture",
				"texture_bytes_png_map_to_load"
			],
			[
				"bytes_png_",
				"bytes_png_regular_biscuit"
			],
			[
				"cell",
				"global_game_texture_grid_cell_size"
			],
			[
				"text",
				"text_pos_of_rectangle_cursor"
			],
			[
				"c",
				"ctprintf(format: string, args: ..any, newline := false) "
			],
			[
				"global_game",
				"global_game_view_pixels_width"
			],
			[
				"globalcell",
				"global_game_texture_grid_cell_size"
			],
			[
				"global",
				"global_game_texture_grid_cell_size"
			],
			[
				"draw_rec",
				"draw_rectangle_on_grid_center_justified(r: raylib.Rectangle, color: raylib.Color, cell_size: f32)"
			],
			[
				"global_",
				"global_game_view_pixels_width"
			],
			[
				"global_sprite",
				"global_sprite_sheet_cell_size"
			]
		]
	},
	"buffers":
	[
		{
			"file": "source/rlgrid/grid.odin",
			"settings":
			{
				"buffer_size": 10482,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "\n\n/**\n * "
					},
					"BwAAADwAAAAAAAAAPQAAAAAAAAAAAAAAPQAAAAAAAAA+AAAAAAAAAAAAAAA+AAAAAAAAAD8AAAAAAAAAAAAAAD8AAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAABBAAAAAAAAAAAAAABBAAAAAAAAAEIAAAAAAAAAAAAAAEIAAAAAAAAARQAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPAAAAAAAAAA8AAAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"insert",
					{
						"characters": "\n* This"
					},
					"BgAAAEUAAAAAAAAARwAAAAAAAAAAAAAARwAAAAAAAABJAAAAAAAAAAAAAABJAAAAAAAAAEoAAAAAAAAAAAAAAEoAAAAAAAAASwAAAAAAAAAAAAAASwAAAAAAAABMAAAAAAAAAAAAAABMAAAAAAAAAE0AAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARQAAAAAAAABFAAAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": " is"
					},
					"AwAAAE0AAAAAAAAATgAAAAAAAAAAAAAATgAAAAAAAABPAAAAAAAAAAAAAABPAAAAAAAAAFAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAATQAAAAAAAABNAAAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFAAAAAAAAAAUQAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAUAAAAAAAAABQAAAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					3,
					"left_delete",
					null,
					"AwAAAFAAAAAAAAAAUAAAAAAAAAABAAAAIE8AAAAAAAAATwAAAAAAAAABAAAAc04AAAAAAAAATgAAAAAAAAABAAAAaQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAUQAAAAAAAABRAAAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "package"
					},
					"BwAAAE4AAAAAAAAATwAAAAAAAAAAAAAATwAAAAAAAABQAAAAAAAAAAAAAABQAAAAAAAAAFEAAAAAAAAAAAAAAFEAAAAAAAAAUgAAAAAAAAAAAAAAUgAAAAAAAABTAAAAAAAAAAAAAABTAAAAAAAAAFQAAAAAAAAAAAAAAFQAAAAAAAAAVQAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAATgAAAAAAAABOAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": " is"
					},
					"AwAAAFUAAAAAAAAAVgAAAAAAAAAAAAAAVgAAAAAAAABXAAAAAAAAAAAAAABXAAAAAAAAAFgAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAVQAAAAAAAABVAAAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": " for"
					},
					"BAAAAFgAAAAAAAAAWQAAAAAAAAAAAAAAWQAAAAAAAABaAAAAAAAAAAAAAABaAAAAAAAAAFsAAAAAAAAAAAAAAFsAAAAAAAAAXAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAWAAAAAAAAABYAAAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": " renderin"
					},
					"CQAAAFwAAAAAAAAAXQAAAAAAAAAAAAAAXQAAAAAAAABeAAAAAAAAAAAAAABeAAAAAAAAAF8AAAAAAAAAAAAAAF8AAAAAAAAAYAAAAAAAAAAAAAAAYAAAAAAAAABhAAAAAAAAAAAAAABhAAAAAAAAAGIAAAAAAAAAAAAAAGIAAAAAAAAAYwAAAAAAAAAAAAAAYwAAAAAAAABkAAAAAAAAAAAAAABkAAAAAAAAAGUAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAXAAAAAAAAABcAAAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": "g"
					},
					"AQAAAGUAAAAAAAAAZgAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAZQAAAAAAAABlAAAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": " to/from"
					},
					"CAAAAGYAAAAAAAAAZwAAAAAAAAAAAAAAZwAAAAAAAABoAAAAAAAAAAAAAABoAAAAAAAAAGkAAAAAAAAAAAAAAGkAAAAAAAAAagAAAAAAAAAAAAAAagAAAAAAAABrAAAAAAAAAAAAAABrAAAAAAAAAGwAAAAAAAAAAAAAAGwAAAAAAAAAbQAAAAAAAAAAAAAAbQAAAAAAAABuAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAZgAAAAAAAABmAAAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": " a"
					},
					"AgAAAG4AAAAAAAAAbwAAAAAAAAAAAAAAbwAAAAAAAABwAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbgAAAAAAAABuAAAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHAAAAAAAAAAcQAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAcAAAAAAAAABwAAAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					2,
					"left_delete",
					null,
					"AgAAAHAAAAAAAAAAcAAAAAAAAAABAAAAIG8AAAAAAAAAbwAAAAAAAAABAAAAYQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAcQAAAAAAAABxAAAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": "grid"
					},
					"BAAAAG8AAAAAAAAAcAAAAAAAAAAAAAAAcAAAAAAAAABxAAAAAAAAAAAAAABxAAAAAAAAAHIAAAAAAAAAAAAAAHIAAAAAAAAAcwAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbwAAAAAAAABvAAAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": " coordinates"
					},
					"DAAAAHMAAAAAAAAAdAAAAAAAAAAAAAAAdAAAAAAAAAB1AAAAAAAAAAAAAAB1AAAAAAAAAHYAAAAAAAAAAAAAAHYAAAAAAAAAdwAAAAAAAAAAAAAAdwAAAAAAAAB4AAAAAAAAAAAAAAB4AAAAAAAAAHkAAAAAAAAAAAAAAHkAAAAAAAAAegAAAAAAAAAAAAAAegAAAAAAAAB7AAAAAAAAAAAAAAB7AAAAAAAAAHwAAAAAAAAAAAAAAHwAAAAAAAAAfQAAAAAAAAAAAAAAfQAAAAAAAAB+AAAAAAAAAAAAAAB+AAAAAAAAAH8AAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAcwAAAAAAAABzAAAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": " to"
					},
					"AwAAAH8AAAAAAAAAgAAAAAAAAAAAAAAAgAAAAAAAAACBAAAAAAAAAAAAAACBAAAAAAAAAIIAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAfwAAAAAAAAB/AAAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": " other"
					},
					"BgAAAIIAAAAAAAAAgwAAAAAAAAAAAAAAgwAAAAAAAACEAAAAAAAAAAAAAACEAAAAAAAAAIUAAAAAAAAAAAAAAIUAAAAAAAAAhgAAAAAAAAAAAAAAhgAAAAAAAACHAAAAAAAAAAAAAACHAAAAAAAAAIgAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAggAAAAAAAACCAAAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": " grid"
					},
					"BQAAAIgAAAAAAAAAiQAAAAAAAAAAAAAAiQAAAAAAAACKAAAAAAAAAAAAAACKAAAAAAAAAIsAAAAAAAAAAAAAAIsAAAAAAAAAjAAAAAAAAAAAAAAAjAAAAAAAAACNAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAiAAAAAAAAACIAAAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": " coordinte"
					},
					"CgAAAI0AAAAAAAAAjgAAAAAAAAAAAAAAjgAAAAAAAACPAAAAAAAAAAAAAACPAAAAAAAAAJAAAAAAAAAAAAAAAJAAAAAAAAAAkQAAAAAAAAAAAAAAkQAAAAAAAACSAAAAAAAAAAAAAACSAAAAAAAAAJMAAAAAAAAAAAAAAJMAAAAAAAAAlAAAAAAAAAAAAAAAlAAAAAAAAACVAAAAAAAAAAAAAACVAAAAAAAAAJYAAAAAAAAAAAAAAJYAAAAAAAAAlwAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjQAAAAAAAACNAAAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					2,
					"left_delete",
					null,
					"AgAAAJYAAAAAAAAAlgAAAAAAAAABAAAAZZUAAAAAAAAAlQAAAAAAAAABAAAAdA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAlwAAAAAAAACXAAAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "ates"
					},
					"BAAAAJUAAAAAAAAAlgAAAAAAAAAAAAAAlgAAAAAAAACXAAAAAAAAAAAAAACXAAAAAAAAAJgAAAAAAAAAAAAAAJgAAAAAAAAAmQAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAlQAAAAAAAACVAAAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": "\n* \n* It"
					},
					"BgAAAJkAAAAAAAAAmwAAAAAAAAAAAAAAmwAAAAAAAACdAAAAAAAAAAAAAACdAAAAAAAAAJ8AAAAAAAAAAAAAAJ8AAAAAAAAAoQAAAAAAAAAAAAAAoQAAAAAAAACiAAAAAAAAAAAAAACiAAAAAAAAAKMAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmQAAAAAAAACZAAAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKMAAAAAAAAApAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAowAAAAAAAACjAAAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					3,
					"left_delete",
					null,
					"AwAAAKMAAAAAAAAAowAAAAAAAAABAAAAIKIAAAAAAAAAogAAAAAAAAABAAAAdKEAAAAAAAAAoQAAAAAAAAABAAAASQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApAAAAAAAAACkAAAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": "I've"
					},
					"BAAAAKEAAAAAAAAAogAAAAAAAAAAAAAAogAAAAAAAACjAAAAAAAAAAAAAACjAAAAAAAAAKQAAAAAAAAAAAAAAKQAAAAAAAAApQAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAoQAAAAAAAAChAAAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKUAAAAAAAAApgAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApQAAAAAAAAClAAAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					5,
					"left_delete",
					null,
					"BQAAAKUAAAAAAAAApQAAAAAAAAABAAAAIKQAAAAAAAAApAAAAAAAAAABAAAAZaMAAAAAAAAAowAAAAAAAAABAAAAdqIAAAAAAAAAogAAAAAAAAABAAAAJ6EAAAAAAAAAoQAAAAAAAAABAAAASQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApgAAAAAAAACmAAAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": "Can"
					},
					"AwAAAKEAAAAAAAAAogAAAAAAAAAAAAAAogAAAAAAAACjAAAAAAAAAAAAAACjAAAAAAAAAKQAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAoQAAAAAAAAChAAAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": " be"
					},
					"AwAAAKQAAAAAAAAApQAAAAAAAAAAAAAApQAAAAAAAACmAAAAAAAAAAAAAACmAAAAAAAAAKcAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApAAAAAAAAACkAAAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": " s"
					},
					"AgAAAKcAAAAAAAAAqAAAAAAAAAAAAAAAqAAAAAAAAACpAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApwAAAAAAAACnAAAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					2,
					"left_delete",
					null,
					"AgAAAKgAAAAAAAAAqAAAAAAAAAABAAAAc6cAAAAAAAAApwAAAAAAAAABAAAAIA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAqQAAAAAAAACpAAAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					2,
					"delete_word",
					{
						"forward": false
					},
					"AgAAAKUAAAAAAAAApQAAAAAAAAACAAAAYmWhAAAAAAAAAKEAAAAAAAAABAAAAENhbiA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApwAAAAAAAACnAAAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": "If"
					},
					"AgAAAKEAAAAAAAAAogAAAAAAAAAAAAAAogAAAAAAAACjAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAoQAAAAAAAAChAAAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": " you"
					},
					"BAAAAKMAAAAAAAAApAAAAAAAAAAAAAAApAAAAAAAAAClAAAAAAAAAAAAAAClAAAAAAAAAKYAAAAAAAAAAAAAAKYAAAAAAAAApwAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAowAAAAAAAACjAAAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": " are"
					},
					"BAAAAKcAAAAAAAAAqAAAAAAAAAAAAAAAqAAAAAAAAACpAAAAAAAAAAAAAACpAAAAAAAAAKoAAAAAAAAAAAAAAKoAAAAAAAAAqwAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApwAAAAAAAACnAAAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": " working"
					},
					"CAAAAKsAAAAAAAAArAAAAAAAAAAAAAAArAAAAAAAAACtAAAAAAAAAAAAAACtAAAAAAAAAK4AAAAAAAAAAAAAAK4AAAAAAAAArwAAAAAAAAAAAAAArwAAAAAAAACwAAAAAAAAAAAAAACwAAAAAAAAALEAAAAAAAAAAAAAALEAAAAAAAAAsgAAAAAAAAAAAAAAsgAAAAAAAACzAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAqwAAAAAAAACrAAAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": " with"
					},
					"BQAAALMAAAAAAAAAtAAAAAAAAAAAAAAAtAAAAAAAAAC1AAAAAAAAAAAAAAC1AAAAAAAAALYAAAAAAAAAAAAAALYAAAAAAAAAtwAAAAAAAAAAAAAAtwAAAAAAAAC4AAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAswAAAAAAAACzAAAAAAAAAAAAAAAAAPC/"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": " some"
					},
					"BQAAALgAAAAAAAAAuQAAAAAAAAAAAAAAuQAAAAAAAAC6AAAAAAAAAAAAAAC6AAAAAAAAALsAAAAAAAAAAAAAALsAAAAAAAAAvAAAAAAAAAAAAAAAvAAAAAAAAAC9AAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAuAAAAAAAAAC4AAAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": " type"
					},
					"BQAAAL0AAAAAAAAAvgAAAAAAAAAAAAAAvgAAAAAAAAC/AAAAAAAAAAAAAAC/AAAAAAAAAMAAAAAAAAAAAAAAAMAAAAAAAAAAwQAAAAAAAAAAAAAAwQAAAAAAAADCAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvQAAAAAAAAC9AAAAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": " of"
					},
					"AwAAAMIAAAAAAAAAwwAAAAAAAAAAAAAAwwAAAAAAAADEAAAAAAAAAAAAAADEAAAAAAAAAMUAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwgAAAAAAAADCAAAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": " tile"
					},
					"BQAAAMUAAAAAAAAAxgAAAAAAAAAAAAAAxgAAAAAAAADHAAAAAAAAAAAAAADHAAAAAAAAAMgAAAAAAAAAAAAAAMgAAAAAAAAAyQAAAAAAAAAAAAAAyQAAAAAAAADKAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxQAAAAAAAADFAAAAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": " based"
					},
					"BgAAAMoAAAAAAAAAywAAAAAAAAAAAAAAywAAAAAAAADMAAAAAAAAAAAAAADMAAAAAAAAAM0AAAAAAAAAAAAAAM0AAAAAAAAAzgAAAAAAAAAAAAAAzgAAAAAAAADPAAAAAAAAAAAAAADPAAAAAAAAANAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAygAAAAAAAADKAAAAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": " gf"
					},
					"AwAAANAAAAAAAAAA0QAAAAAAAAAAAAAA0QAAAAAAAADSAAAAAAAAAAAAAADSAAAAAAAAANMAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA0AAAAAAAAADQAAAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					1,
					"left_delete",
					null,
					"AQAAANIAAAAAAAAA0gAAAAAAAAABAAAAZg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA0wAAAAAAAADTAAAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": "ame"
					},
					"AwAAANIAAAAAAAAA0wAAAAAAAAAAAAAA0wAAAAAAAADUAAAAAAAAAAAAAADUAAAAAAAAANUAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA0gAAAAAAAADSAAAAAAAAAAAAAAAAAPC/"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANUAAAAAAAAA1gAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1QAAAAAAAADVAAAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"left_delete",
					null,
					"AQAAANUAAAAAAAAA1QAAAAAAAAABAAAAIA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1gAAAAAAAADWAAAAAAAAAAAAAAAAAPC/"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAANUAAAAAAAAA1gAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1QAAAAAAAADVAAAAAAAAAAAAAAAAAPC/"
				],
				[
					52,
					1,
					"insert",
					{
						"characters": " or"
					},
					"AwAAANYAAAAAAAAA1wAAAAAAAAAAAAAA1wAAAAAAAADYAAAAAAAAAAAAAADYAAAAAAAAANkAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1gAAAAAAAADWAAAAAAAAAAAAAAAAAPC/"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": " know"
					},
					"BQAAANkAAAAAAAAA2gAAAAAAAAAAAAAA2gAAAAAAAADbAAAAAAAAAAAAAADbAAAAAAAAANwAAAAAAAAAAAAAANwAAAAAAAAA3QAAAAAAAAAAAAAA3QAAAAAAAADeAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2QAAAAAAAADZAAAAAAAAAAAAAAAAAPC/"
				],
				[
					54,
					1,
					"insert",
					{
						"characters": " of"
					},
					"AwAAAN4AAAAAAAAA3wAAAAAAAAAAAAAA3wAAAAAAAADgAAAAAAAAAAAAAADgAAAAAAAAAOEAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3gAAAAAAAADeAAAAAAAAAAAAAAAAAPC/"
				],
				[
					55,
					1,
					"insert",
					{
						"characters": " some"
					},
					"BQAAAOEAAAAAAAAA4gAAAAAAAAAAAAAA4gAAAAAAAADjAAAAAAAAAAAAAADjAAAAAAAAAOQAAAAAAAAAAAAAAOQAAAAAAAAA5QAAAAAAAAAAAAAA5QAAAAAAAADmAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4QAAAAAAAADhAAAAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": " kind"
					},
					"BQAAAOYAAAAAAAAA5wAAAAAAAAAAAAAA5wAAAAAAAADoAAAAAAAAAAAAAADoAAAAAAAAAOkAAAAAAAAAAAAAAOkAAAAAAAAA6gAAAAAAAAAAAAAA6gAAAAAAAADrAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA5gAAAAAAAADmAAAAAAAAAAAAAAAAAPC/"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": " of"
					},
					"AwAAAOsAAAAAAAAA7AAAAAAAAAAAAAAA7AAAAAAAAADtAAAAAAAAAAAAAADtAAAAAAAAAO4AAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6wAAAAAAAADrAAAAAAAAAAAAAAAAAPC/"
				],
				[
					58,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAO4AAAAAAAAA7wAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA7gAAAAAAAADuAAAAAAAAAAAAAAAAAPC/"
				],
				[
					59,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAO8AAAAAAAAA8QAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA7wAAAAAAAADvAAAAAAAAAAAAAAAAAPC/"
				],
				[
					60,
					1,
					"insert",
					{
						"characters": "unit"
					},
					"BAAAAPAAAAAAAAAA8QAAAAAAAAAAAAAA8QAAAAAAAADyAAAAAAAAAAAAAADyAAAAAAAAAPMAAAAAAAAAAAAAAPMAAAAAAAAA9AAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA8AAAAAAAAADwAAAAAAAAAAAAAAAAAPC/"
				],
				[
					62,
					1,
					"insert",
					{
						"characters": " by"
					},
					"AwAAAPUAAAAAAAAA9gAAAAAAAAAAAAAA9gAAAAAAAAD3AAAAAAAAAAAAAAD3AAAAAAAAAPgAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA9QAAAAAAAAD1AAAAAAAAAAAAAAAAAPC/"
				],
				[
					63,
					1,
					"insert",
					{
						"characters": " which"
					},
					"BgAAAPgAAAAAAAAA+QAAAAAAAAAAAAAA+QAAAAAAAAD6AAAAAAAAAAAAAAD6AAAAAAAAAPsAAAAAAAAAAAAAAPsAAAAAAAAA/AAAAAAAAAAAAAAA/AAAAAAAAAD9AAAAAAAAAAAAAAD9AAAAAAAAAP4AAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+AAAAAAAAAD4AAAAAAAAAAAAAAAAAPC/"
				],
				[
					64,
					1,
					"insert",
					{
						"characters": " you"
					},
					"BAAAAP4AAAAAAAAA/wAAAAAAAAAAAAAA/wAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAEBAAAAAAAAAAAAAAEBAAAAAAAAAgEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/gAAAAAAAAD+AAAAAAAAAAAAAAAAAPC/"
				],
				[
					65,
					1,
					"insert",
					{
						"characters": " are"
					},
					"BAAAAAIBAAAAAAAAAwEAAAAAAAAAAAAAAwEAAAAAAAAEAQAAAAAAAAAAAAAEAQAAAAAAAAUBAAAAAAAAAAAAAAUBAAAAAAAABgEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAgEAAAAAAAACAQAAAAAAAAAAAAAAAPC/"
				],
				[
					66,
					1,
					"insert",
					{
						"characters": " doing"
					},
					"BgAAAAYBAAAAAAAABwEAAAAAAAAAAAAABwEAAAAAAAAIAQAAAAAAAAAAAAAIAQAAAAAAAAkBAAAAAAAAAAAAAAkBAAAAAAAACgEAAAAAAAAAAAAACgEAAAAAAAALAQAAAAAAAAAAAAALAQAAAAAAAAwBAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABgEAAAAAAAAGAQAAAAAAAAAAAAAAAPC/"
				],
				[
					67,
					1,
					"insert",
					{
						"characters": " you"
					},
					"BAAAAAwBAAAAAAAADQEAAAAAAAAAAAAADQEAAAAAAAAOAQAAAAAAAAAAAAAOAQAAAAAAAA8BAAAAAAAAAAAAAA8BAAAAAAAAEAEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADAEAAAAAAAAMAQAAAAAAAAAAAAAAAPC/"
				],
				[
					68,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABABAAAAAAAAEQEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEAEAAAAAAAAQAQAAAAAAAAAAAAAAAPC/"
				],
				[
					69,
					1,
					"left_delete",
					null,
					"AQAAABABAAAAAAAAEAEAAAAAAAABAAAAIA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEQEAAAAAAAARAQAAAAAAAAAAAAAAAPC/"
				],
				[
					70,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAABABAAAAAAAAEQEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEAEAAAAAAAAQAQAAAAAAAAAAAAAAAPC/"
				],
				[
					71,
					1,
					"insert",
					{
						"characters": " measurement"
					},
					"DAAAABEBAAAAAAAAEgEAAAAAAAAAAAAAEgEAAAAAAAATAQAAAAAAAAAAAAATAQAAAAAAABQBAAAAAAAAAAAAABQBAAAAAAAAFQEAAAAAAAAAAAAAFQEAAAAAAAAWAQAAAAAAAAAAAAAWAQAAAAAAABcBAAAAAAAAAAAAABcBAAAAAAAAGAEAAAAAAAAAAAAAGAEAAAAAAAAZAQAAAAAAAAAAAAAZAQAAAAAAABoBAAAAAAAAAAAAABoBAAAAAAAAGwEAAAAAAAAAAAAAGwEAAAAAAAAcAQAAAAAAAAAAAAAcAQAAAAAAAB0BAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEQEAAAAAAAARAQAAAAAAAAAAAAAAAPC/"
				],
				[
					72,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAB0BAAAAAAAAHgEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHQEAAAAAAAAdAQAAAAAAAAAAAAAAAPC/"
				],
				[
					73,
					1,
					"insert",
					{
						"characters": " it"
					},
					"AwAAAB4BAAAAAAAAHwEAAAAAAAAAAAAAHwEAAAAAAAAgAQAAAAAAAAAAAAAgAQAAAAAAACEBAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHgEAAAAAAAAeAQAAAAAAAAAAAAAAAPC/"
				],
				[
					74,
					3,
					"left_delete",
					null,
					"AwAAACABAAAAAAAAIAEAAAAAAAABAAAAdB8BAAAAAAAAHwEAAAAAAAABAAAAaR4BAAAAAAAAHgEAAAAAAAABAAAAIA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIQEAAAAAAAAhAQAAAAAAAAAAAAAAAPC/"
				],
				[
					75,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAB4BAAAAAAAAHwEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHgEAAAAAAAAeAQAAAAAAAAAAAAAAAPC/"
				],
				[
					76,
					1,
					"insert",
					{
						"characters": " it"
					},
					"AwAAAB8BAAAAAAAAIAEAAAAAAAAAAAAAIAEAAAAAAAAhAQAAAAAAAAAAAAAhAQAAAAAAACIBAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHwEAAAAAAAAfAQAAAAAAAAAAAAAAAPC/"
				],
				[
					77,
					1,
					"insert",
					{
						"characters": " ca"
					},
					"AwAAACIBAAAAAAAAIwEAAAAAAAAAAAAAIwEAAAAAAAAkAQAAAAAAAAAAAAAkAQAAAAAAACUBAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIgEAAAAAAAAiAQAAAAAAAAAAAAAAAPC/"
				],
				[
					78,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACUBAAAAAAAAJgEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJQEAAAAAAAAlAQAAAAAAAAAAAAAAAPC/"
				],
				[
					79,
					1,
					"left_delete",
					null,
					"AQAAACUBAAAAAAAAJQEAAAAAAAABAAAAIA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJgEAAAAAAAAmAQAAAAAAAAAAAAAAAPC/"
				],
				[
					80,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAACUBAAAAAAAAJgEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJQEAAAAAAAAlAQAAAAAAAAAAAAAAAPC/"
				],
				[
					81,
					1,
					"insert",
					{
						"characters": " be"
					},
					"AwAAACYBAAAAAAAAJwEAAAAAAAAAAAAAJwEAAAAAAAAoAQAAAAAAAAAAAAAoAQAAAAAAACkBAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJgEAAAAAAAAmAQAAAAAAAAAAAAAAAPC/"
				],
				[
					82,
					1,
					"insert",
					{
						"characters": " useful"
					},
					"BwAAACkBAAAAAAAAKgEAAAAAAAAAAAAAKgEAAAAAAAArAQAAAAAAAAAAAAArAQAAAAAAACwBAAAAAAAAAAAAACwBAAAAAAAALQEAAAAAAAAAAAAALQEAAAAAAAAuAQAAAAAAAAAAAAAuAQAAAAAAAC8BAAAAAAAAAAAAAC8BAAAAAAAAMAEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKQEAAAAAAAApAQAAAAAAAAAAAAAAAPC/"
				],
				[
					83,
					1,
					"insert",
					{
						"characters": " t"
					},
					"AgAAADABAAAAAAAAMQEAAAAAAAAAAAAAMQEAAAAAAAAyAQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMAEAAAAAAAAwAQAAAAAAAAAAAAAAAPC/"
				],
				[
					84,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADIBAAAAAAAAMwEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMgEAAAAAAAAyAQAAAAAAAAAAAAAAAPC/"
				],
				[
					85,
					1,
					"left_delete",
					null,
					"AQAAADIBAAAAAAAAMgEAAAAAAAABAAAAIA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMwEAAAAAAAAzAQAAAAAAAAAAAAAAAPC/"
				],
				[
					86,
					1,
					"insert",
					{
						"characters": "op"
					},
					"AgAAADIBAAAAAAAAMwEAAAAAAAAAAAAAMwEAAAAAAAA0AQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMgEAAAAAAAAyAQAAAAAAAAAAAAAAAPC/"
				],
				[
					87,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADQBAAAAAAAANQEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANAEAAAAAAAA0AQAAAAAAAAAAAAAAAPC/"
				],
				[
					88,
					2,
					"left_delete",
					null,
					"AgAAADQBAAAAAAAANAEAAAAAAAABAAAAIDMBAAAAAAAAMwEAAAAAAAABAAAAcA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANQEAAAAAAAA1AQAAAAAAAAAAAAAAAPC/"
				],
				[
					89,
					1,
					"insert",
					{
						"characters": " g"
					},
					"AgAAADMBAAAAAAAANAEAAAAAAAAAAAAANAEAAAAAAAA1AQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMwEAAAAAAAAzAQAAAAAAAAAAAAAAAPC/"
				],
				[
					90,
					1,
					"left_delete",
					null,
					"AQAAADQBAAAAAAAANAEAAAAAAAABAAAAZw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANQEAAAAAAAA1AQAAAAAAAAAAAAAAAPC/"
				],
				[
					91,
					1,
					"insert",
					{
						"characters": "use"
					},
					"AwAAADQBAAAAAAAANQEAAAAAAAAAAAAANQEAAAAAAAA2AQAAAAAAAAAAAAA2AQAAAAAAADcBAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANAEAAAAAAAA0AQAAAAAAAAAAAAAAAPC/"
				],
				[
					92,
					1,
					"insert",
					{
						"characters": " grid"
					},
					"BQAAADcBAAAAAAAAOAEAAAAAAAAAAAAAOAEAAAAAAAA5AQAAAAAAAAAAAAA5AQAAAAAAADoBAAAAAAAAAAAAADoBAAAAAAAAOwEAAAAAAAAAAAAAOwEAAAAAAAA8AQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANwEAAAAAAAA3AQAAAAAAAAAAAAAAAPC/"
				],
				[
					93,
					1,
					"insert",
					{
						"characters": " coore"
					},
					"BgAAADwBAAAAAAAAPQEAAAAAAAAAAAAAPQEAAAAAAAA+AQAAAAAAAAAAAAA+AQAAAAAAAD8BAAAAAAAAAAAAAD8BAAAAAAAAQAEAAAAAAAAAAAAAQAEAAAAAAABBAQAAAAAAAAAAAABBAQAAAAAAAEIBAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPAEAAAAAAAA8AQAAAAAAAAAAAAAAAPC/"
				],
				[
					94,
					2,
					"delete_word",
					{
						"forward": false
					},
					"AgAAAD0BAAAAAAAAPQEAAAAAAAAFAAAAY29vcmU4AQAAAAAAADgBAAAAAAAABQAAAGdyaWQg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQgEAAAAAAABCAQAAAAAAAAAAAAAAAPC/"
				],
				[
					95,
					1,
					"insert",
					{
						"characters": "some"
					},
					"BAAAADgBAAAAAAAAOQEAAAAAAAAAAAAAOQEAAAAAAAA6AQAAAAAAAAAAAAA6AQAAAAAAADsBAAAAAAAAAAAAADsBAAAAAAAAPAEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOAEAAAAAAAA4AQAAAAAAAAAAAAAAAPC/"
				],
				[
					96,
					1,
					"insert",
					{
						"characters": " specified"
					},
					"CgAAADwBAAAAAAAAPQEAAAAAAAAAAAAAPQEAAAAAAAA+AQAAAAAAAAAAAAA+AQAAAAAAAD8BAAAAAAAAAAAAAD8BAAAAAAAAQAEAAAAAAAAAAAAAQAEAAAAAAABBAQAAAAAAAAAAAABBAQAAAAAAAEIBAAAAAAAAAAAAAEIBAAAAAAAAQwEAAAAAAAAAAAAAQwEAAAAAAABEAQAAAAAAAAAAAABEAQAAAAAAAEUBAAAAAAAAAAAAAEUBAAAAAAAARgEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPAEAAAAAAAA8AQAAAAAAAAAAAAAAAPC/"
				],
				[
					97,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAD0BAAAAAAAAPQEAAAAAAAAJAAAAc3BlY2lmaWVk",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARgEAAAAAAABGAQAAAAAAAAAAAAAAAPC/"
				],
				[
					98,
					1,
					"insert",
					{
						"characters": "conceptual"
					},
					"CgAAAD0BAAAAAAAAPgEAAAAAAAAAAAAAPgEAAAAAAAA/AQAAAAAAAAAAAAA/AQAAAAAAAEABAAAAAAAAAAAAAEABAAAAAAAAQQEAAAAAAAAAAAAAQQEAAAAAAABCAQAAAAAAAAAAAABCAQAAAAAAAEMBAAAAAAAAAAAAAEMBAAAAAAAARAEAAAAAAAAAAAAARAEAAAAAAABFAQAAAAAAAAAAAABFAQAAAAAAAEYBAAAAAAAAAAAAAEYBAAAAAAAARwEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPQEAAAAAAAA9AQAAAAAAAAAAAAAAAPC/"
				],
				[
					99,
					1,
					"insert",
					{
						"characters": " grid"
					},
					"BQAAAEcBAAAAAAAASAEAAAAAAAAAAAAASAEAAAAAAABJAQAAAAAAAAAAAABJAQAAAAAAAEoBAAAAAAAAAAAAAEoBAAAAAAAASwEAAAAAAAAAAAAASwEAAAAAAABMAQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARwEAAAAAAABHAQAAAAAAAAAAAAAAAPC/"
				],
				[
					100,
					1,
					"insert",
					{
						"characters": " as"
					},
					"AwAAAEwBAAAAAAAATQEAAAAAAAAAAAAATQEAAAAAAABOAQAAAAAAAAAAAABOAQAAAAAAAE8BAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAATAEAAAAAAABMAQAAAAAAAAAAAAAAAPC/"
				],
				[
					101,
					1,
					"insert",
					{
						"characters": " opposed"
					},
					"CAAAAE8BAAAAAAAAUAEAAAAAAAAAAAAAUAEAAAAAAABRAQAAAAAAAAAAAABRAQAAAAAAAFIBAAAAAAAAAAAAAFIBAAAAAAAAUwEAAAAAAAAAAAAAUwEAAAAAAABUAQAAAAAAAAAAAABUAQAAAAAAAFUBAAAAAAAAAAAAAFUBAAAAAAAAVgEAAAAAAAAAAAAAVgEAAAAAAABXAQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAATwEAAAAAAABPAQAAAAAAAAAAAAAAAPC/"
				],
				[
					102,
					1,
					"insert",
					{
						"characters": " to"
					},
					"AwAAAFcBAAAAAAAAWAEAAAAAAAAAAAAAWAEAAAAAAABZAQAAAAAAAAAAAABZAQAAAAAAAFoBAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAVwEAAAAAAABXAQAAAAAAAAAAAAAAAPC/"
				],
				[
					103,
					1,
					"insert",
					{
						"characters": " just"
					},
					"BQAAAFoBAAAAAAAAWwEAAAAAAAAAAAAAWwEAAAAAAABcAQAAAAAAAAAAAABcAQAAAAAAAF0BAAAAAAAAAAAAAF0BAAAAAAAAXgEAAAAAAAAAAAAAXgEAAAAAAABfAQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAWgEAAAAAAABaAQAAAAAAAAAAAAAAAPC/"
				],
				[
					104,
					1,
					"insert",
					{
						"characters": " p"
					},
					"AgAAAF8BAAAAAAAAYAEAAAAAAAAAAAAAYAEAAAAAAABhAQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAXwEAAAAAAABfAQAAAAAAAAAAAAAAAPC/"
				],
				[
					105,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGEBAAAAAAAAYgEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAYQEAAAAAAABhAQAAAAAAAAAAAAAAAPC/"
				],
				[
					106,
					1,
					"left_delete",
					null,
					"AQAAAGEBAAAAAAAAYQEAAAAAAAABAAAAIA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAYgEAAAAAAABiAQAAAAAAAAAAAAAAAPC/"
				],
				[
					107,
					1,
					"insert",
					{
						"characters": "ixel"
					},
					"BAAAAGEBAAAAAAAAYgEAAAAAAAAAAAAAYgEAAAAAAABjAQAAAAAAAAAAAABjAQAAAAAAAGQBAAAAAAAAAAAAAGQBAAAAAAAAZQEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAYQEAAAAAAABhAQAAAAAAAAAAAAAAAPC/"
				],
				[
					108,
					1,
					"insert",
					{
						"characters": " amounts"
					},
					"CAAAAGUBAAAAAAAAZgEAAAAAAAAAAAAAZgEAAAAAAABnAQAAAAAAAAAAAABnAQAAAAAAAGgBAAAAAAAAAAAAAGgBAAAAAAAAaQEAAAAAAAAAAAAAaQEAAAAAAABqAQAAAAAAAAAAAABqAQAAAAAAAGsBAAAAAAAAAAAAAGsBAAAAAAAAbAEAAAAAAAAAAAAAbAEAAAAAAABtAQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAZQEAAAAAAABlAQAAAAAAAAAAAAAAAPC/"
				],
				[
					109,
					1,
					"insert",
					{
						"characters": "\n* \n* /"
					},
					"BQAAAG0BAAAAAAAAbwEAAAAAAAAAAAAAbwEAAAAAAABxAQAAAAAAAAAAAABxAQAAAAAAAHMBAAAAAAAAAAAAAHMBAAAAAAAAdQEAAAAAAAAAAAAAdQEAAAAAAAB2AQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbQEAAAAAAABtAQAAAAAAAAAAAAAAAPC/"
				],
				[
					112,
					1,
					"left_delete",
					null,
					"AQAAAHQBAAAAAAAAdAEAAAAAAAABAAAAIA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAdQEAAAAAAAB1AQAAAAAAAAAAAAAAAPC/"
				],
				[
					120,
					1,
					"left_delete",
					null,
					"AQAAAD8bAAAAAAAAPxsAAAAAAAABAAAACg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQBsAAAAAAABAGwAAAAAAAAAAAAAAAPC/"
				],
				[
					124,
					1,
					"insert",
					{
						"characters": "\n\ndraw_"
					},
					"BwAAAEEbAAAAAAAAQhsAAAAAAAAAAAAAQhsAAAAAAABDGwAAAAAAAAAAAABDGwAAAAAAAEQbAAAAAAAAAAAAAEQbAAAAAAAARRsAAAAAAAAAAAAARRsAAAAAAABGGwAAAAAAAAAAAABGGwAAAAAAAEcbAAAAAAAAAAAAAEcbAAAAAAAASBsAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQRsAAAAAAABBGwAAAAAAAAAAAAAAAPC/"
				],
				[
					125,
					1,
					"insert",
					{
						"characters": "grid"
					},
					"BAAAAEgbAAAAAAAASRsAAAAAAAAAAAAASRsAAAAAAABKGwAAAAAAAAAAAABKGwAAAAAAAEsbAAAAAAAAAAAAAEsbAAAAAAAATBsAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAASBsAAAAAAABIGwAAAAAAAAAAAAAAAPC/"
				],
				[
					126,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAEMbAAAAAAAAQxsAAAAAAAAJAAAAZHJhd19ncmlk",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAATBsAAAAAAABMGwAAAAAAAAAAAAAAAPC/"
				],
				[
					127,
					1,
					"left_delete",
					null,
					"AQAAAEIbAAAAAAAAQhsAAAAAAAABAAAACg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQxsAAAAAAABDGwAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "\n\nget_"
					},
					"BgAAAF4LAAAAAAAAXwsAAAAAAAAAAAAAXwsAAAAAAABgCwAAAAAAAAAAAABgCwAAAAAAAGELAAAAAAAAAAAAAGELAAAAAAAAYgsAAAAAAAAAAAAAYgsAAAAAAABjCwAAAAAAAAAAAABjCwAAAAAAAGQLAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF4LAAAAAAAAXgsAAAAAAAAAAAAAAADwvw"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "ac"
					},
					"AgAAAGQLAAAAAAAAZQsAAAAAAAAAAAAAZQsAAAAAAABmCwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGQLAAAAAAAAZAsAAAAAAAAAAAAAAADwvw"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": "tual_pos"
					},
					"CAAAAGYLAAAAAAAAZwsAAAAAAAAAAAAAZwsAAAAAAABoCwAAAAAAAAAAAABoCwAAAAAAAGkLAAAAAAAAAAAAAGkLAAAAAAAAagsAAAAAAAAAAAAAagsAAAAAAABrCwAAAAAAAAAAAABrCwAAAAAAAGwLAAAAAAAAAAAAAGwLAAAAAAAAbQsAAAAAAAAAAAAAbQsAAAAAAABuCwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGYLAAAAAAAAZgsAAAAAAAAAAAAAAADwvw"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": " ::"
					},
					"AwAAAG4LAAAAAAAAbwsAAAAAAAAAAAAAbwsAAAAAAABwCwAAAAAAAAAAAABwCwAAAAAAAHELAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG4LAAAAAAAAbgsAAAAAAAAAAAAAAADwvw"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": " proc"
					},
					"BQAAAHELAAAAAAAAcgsAAAAAAAAAAAAAcgsAAAAAAABzCwAAAAAAAAAAAABzCwAAAAAAAHQLAAAAAAAAAAAAAHQLAAAAAAAAdQsAAAAAAAAAAAAAdQsAAAAAAAB2CwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHELAAAAAAAAcQsAAAAAAAAAAAAAAADwvw"
				],
				[
					15,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAHYLAAAAAAAAeAsAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHYLAAAAAAAAdgsAAAAAAAAAAAAAAADwvw"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "grid_pos"
					},
					"CAAAAHcLAAAAAAAAeAsAAAAAAAAAAAAAeAsAAAAAAAB5CwAAAAAAAAAAAAB5CwAAAAAAAHoLAAAAAAAAAAAAAHoLAAAAAAAAewsAAAAAAAAAAAAAewsAAAAAAAB8CwAAAAAAAAAAAAB8CwAAAAAAAH0LAAAAAAAAAAAAAH0LAAAAAAAAfgsAAAAAAAAAAAAAfgsAAAAAAAB/CwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHcLAAAAAAAAdwsAAAAAAAAAAAAAAADwvw"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAAH8LAAAAAAAAgAsAAAAAAAAAAAAAgAsAAAAAAACBCwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAH8LAAAAAAAAfwsAAAAAAAAAAAAAAADwvw"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIELAAAAAAAAggsAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIELAAAAAAAAgQsAAAAAAAAAAAAAAADwvw"
				],
				[
					19,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAIILAAAAAAAAhAsAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIILAAAAAAAAggsAAAAAAAAAAAAAAADwvw"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AQAAAIMLAAAAAAAAhAsAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIMLAAAAAAAAgwsAAAAAAAAAAAAAAADwvw"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": "f32,"
					},
					"BAAAAIULAAAAAAAAhgsAAAAAAAAAAAAAhgsAAAAAAACHCwAAAAAAAAAAAACHCwAAAAAAAIgLAAAAAAAAAAAAAIgLAAAAAAAAiQsAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIULAAAAAAAAhQsAAAAAAAAAAAAAAADwvw"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": " cell_size"
					},
					"CgAAAIkLAAAAAAAAigsAAAAAAAAAAAAAigsAAAAAAACLCwAAAAAAAAAAAACLCwAAAAAAAIwLAAAAAAAAAAAAAIwLAAAAAAAAjQsAAAAAAAAAAAAAjQsAAAAAAACOCwAAAAAAAAAAAACOCwAAAAAAAI8LAAAAAAAAAAAAAI8LAAAAAAAAkAsAAAAAAAAAAAAAkAsAAAAAAACRCwAAAAAAAAAAAACRCwAAAAAAAJILAAAAAAAAAAAAAJILAAAAAAAAkwsAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIkLAAAAAAAAiQsAAAAAAAAAAAAAAADwvw"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAAJMLAAAAAAAAlAsAAAAAAAAAAAAAlAsAAAAAAACVCwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJMLAAAAAAAAkwsAAAAAAAAAAAAAAADwvw"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": " f32"
					},
					"BAAAAJULAAAAAAAAlgsAAAAAAAAAAAAAlgsAAAAAAACXCwAAAAAAAAAAAACXCwAAAAAAAJgLAAAAAAAAAAAAAJgLAAAAAAAAmQsAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJULAAAAAAAAlQsAAAAAAAAAAAAAAADwvw"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": " ->"
					},
					"AwAAAJoLAAAAAAAAmwsAAAAAAAAAAAAAmwsAAAAAAACcCwAAAAAAAAAAAACcCwAAAAAAAJ0LAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJoLAAAAAAAAmgsAAAAAAAAAAAAAAADwvw"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJ0LAAAAAAAAngsAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ0LAAAAAAAAnQsAAAAAAAAAAAAAAADwvw"
				],
				[
					29,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAJ4LAAAAAAAAoAsAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ4LAAAAAAAAngsAAAAAAAAAAAAAAADwvw"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AQAAAJ8LAAAAAAAAoAsAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ8LAAAAAAAAnwsAAAAAAAAAAAAAAADwvw"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "f32"
					},
					"AwAAAKELAAAAAAAAogsAAAAAAAAAAAAAogsAAAAAAACjCwAAAAAAAAAAAACjCwAAAAAAAKQLAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKELAAAAAAAAoQsAAAAAAAAAAAAAAADwvw"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAKQLAAAAAAAApQsAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKQLAAAAAAAApAsAAAAAAAAAAAAAAADwvw"
				],
				[
					34,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAKULAAAAAAAApwsAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKULAAAAAAAApQsAAAAAAAAAAAAAAADwvw"
				],
				[
					35,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"AwAAAKYLAAAAAAAApwsAAAAAAAAAAAAApwsAAAAAAACoCwAAAAAAAAAAAACnCwAAAAAAAKsLAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKYLAAAAAAAApgsAAAAAAAAAAAAAAADwvw"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": "ret"
					},
					"AwAAAKsLAAAAAAAArAsAAAAAAAAAAAAArAsAAAAAAACtCwAAAAAAAAAAAACtCwAAAAAAAK4LAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKsLAAAAAAAAqwsAAAAAAAAAAAAAAADwvw"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": " :="
					},
					"AwAAAK4LAAAAAAAArwsAAAAAAAAAAAAArwsAAAAAAACwCwAAAAAAAAAAAACwCwAAAAAAALELAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK4LAAAAAAAArgsAAAAAAAAAAAAAAADwvw"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALELAAAAAAAAsgsAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALELAAAAAAAAsQsAAAAAAAAAAAAAAADwvw"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": "grid_pos"
					},
					"CAAAALILAAAAAAAAswsAAAAAAAAAAAAAswsAAAAAAAC0CwAAAAAAAAAAAAC0CwAAAAAAALULAAAAAAAAAAAAALULAAAAAAAAtgsAAAAAAAAAAAAAtgsAAAAAAAC3CwAAAAAAAAAAAAC3CwAAAAAAALgLAAAAAAAAAAAAALgLAAAAAAAAuQsAAAAAAAAAAAAAuQsAAAAAAAC6CwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALILAAAAAAAAsgsAAAAAAAAAAAAAAADwvw"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": " *"
					},
					"AgAAALoLAAAAAAAAuwsAAAAAAAAAAAAAuwsAAAAAAAC8CwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALoLAAAAAAAAugsAAAAAAAAAAAAAAADwvw"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": " cell_sze"
					},
					"CQAAALwLAAAAAAAAvQsAAAAAAAAAAAAAvQsAAAAAAAC+CwAAAAAAAAAAAAC+CwAAAAAAAL8LAAAAAAAAAAAAAL8LAAAAAAAAwAsAAAAAAAAAAAAAwAsAAAAAAADBCwAAAAAAAAAAAADBCwAAAAAAAMILAAAAAAAAAAAAAMILAAAAAAAAwwsAAAAAAAAAAAAAwwsAAAAAAADECwAAAAAAAAAAAADECwAAAAAAAMULAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALwLAAAAAAAAvAsAAAAAAAAAAAAAAADwvw"
				],
				[
					42,
					2,
					"left_delete",
					null,
					"AgAAAMQLAAAAAAAAxAsAAAAAAAABAAAAZcMLAAAAAAAAwwsAAAAAAAABAAAAeg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMULAAAAAAAAxQsAAAAAAAAAAAAAAADwvw"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": "ize"
					},
					"AwAAAMMLAAAAAAAAxAsAAAAAAAAAAAAAxAsAAAAAAADFCwAAAAAAAAAAAADFCwAAAAAAAMYLAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMMLAAAAAAAAwwsAAAAAAAAAAAAAAADwvw"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": "\nreturn"
					},
					"BwAAAMYLAAAAAAAAywsAAAAAAAAAAAAAywsAAAAAAADMCwAAAAAAAAAAAADMCwAAAAAAAM0LAAAAAAAAAAAAAM0LAAAAAAAAzgsAAAAAAAAAAAAAzgsAAAAAAADPCwAAAAAAAAAAAADPCwAAAAAAANALAAAAAAAAAAAAANALAAAAAAAA0QsAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMYLAAAAAAAAxgsAAAAAAAAAAAAAAADwvw"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": " reet"
					},
					"BQAAANELAAAAAAAA0gsAAAAAAAAAAAAA0gsAAAAAAADTCwAAAAAAAAAAAADTCwAAAAAAANQLAAAAAAAAAAAAANQLAAAAAAAA1QsAAAAAAAAAAAAA1QsAAAAAAADWCwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANELAAAAAAAA0QsAAAAAAAAAAAAAAADwvw"
				],
				[
					47,
					2,
					"left_delete",
					null,
					"AgAAANULAAAAAAAA1QsAAAAAAAABAAAAdNQLAAAAAAAA1AsAAAAAAAABAAAAZQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANYLAAAAAAAA1gsAAAAAAAAAAAAAAADwvw"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAANQLAAAAAAAA1QsAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANQLAAAAAAAA1AsAAAAAAAAAAAAAAADwvw"
				],
				[
					3,
					1,
					"insert",
					{
						"characters": "\n\ndraw_cir"
					},
					"CgAAABQhAAAAAAAAFSEAAAAAAAAAAAAAFSEAAAAAAAAWIQAAAAAAAAAAAAAWIQAAAAAAABchAAAAAAAAAAAAABchAAAAAAAAGCEAAAAAAAAAAAAAGCEAAAAAAAAZIQAAAAAAAAAAAAAZIQAAAAAAABohAAAAAAAAAAAAABohAAAAAAAAGyEAAAAAAAAAAAAAGyEAAAAAAAAcIQAAAAAAAAAAAAAcIQAAAAAAAB0hAAAAAAAAAAAAAB0hAAAAAAAAHiEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFCEAAAAAAAAUIQAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"insert",
					{
						"characters": "cle_on"
					},
					"BgAAAB4hAAAAAAAAHyEAAAAAAAAAAAAAHyEAAAAAAAAgIQAAAAAAAAAAAAAgIQAAAAAAACEhAAAAAAAAAAAAACEhAAAAAAAAIiEAAAAAAAAAAAAAIiEAAAAAAAAjIQAAAAAAAAAAAAAjIQAAAAAAACQhAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHiEAAAAAAAAeIQAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": "_grid"
					},
					"BQAAACQhAAAAAAAAJSEAAAAAAAAAAAAAJSEAAAAAAAAmIQAAAAAAAAAAAAAmIQAAAAAAACchAAAAAAAAAAAAACchAAAAAAAAKCEAAAAAAAAAAAAAKCEAAAAAAAApIQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJCEAAAAAAAAkIQAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": " ::"
					},
					"AwAAACkhAAAAAAAAKiEAAAAAAAAAAAAAKiEAAAAAAAArIQAAAAAAAAAAAAArIQAAAAAAACwhAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKSEAAAAAAAApIQAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": " proc"
					},
					"BQAAACwhAAAAAAAALSEAAAAAAAAAAAAALSEAAAAAAAAuIQAAAAAAAAAAAAAuIQAAAAAAAC8hAAAAAAAAAAAAAC8hAAAAAAAAMCEAAAAAAAAAAAAAMCEAAAAAAAAxIQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALCEAAAAAAAAsIQAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADEhAAAAAAAAMyEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMSEAAAAAAAAxIQAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAADMhAAAAAAAANCEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMyEAAAAAAAAzIQAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAADQhAAAAAAAANiEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANCEAAAAAAAA0IQAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"AwAAADUhAAAAAAAANiEAAAAAAAAAAAAANiEAAAAAAAA3IQAAAAAAAAAAAAA2IQAAAAAAADohAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANSEAAAAAAAA1IQAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "rl.draw"
					},
					"BwAAADohAAAAAAAAOyEAAAAAAAAAAAAAOyEAAAAAAAA8IQAAAAAAAAAAAAA8IQAAAAAAAD0hAAAAAAAAAAAAAD0hAAAAAAAAPiEAAAAAAAAAAAAAPiEAAAAAAAA/IQAAAAAAAAAAAAA/IQAAAAAAAEAhAAAAAAAAAAAAAEAhAAAAAAAAQSEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOiEAAAAAAAA6IQAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "circ"
					},
					"BAAAAEEhAAAAAAAAQiEAAAAAAAAAAAAAQiEAAAAAAABDIQAAAAAAAAAAAABDIQAAAAAAAEQhAAAAAAAAAAAAAEQhAAAAAAAARSEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQSEAAAAAAABBIQAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":7,\"session_name\":\"odin\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "DrawCircleV(center: Vector2, radius: f32, color: Color)"
					},
					"AgAAAD0hAAAAAAAAPSEAAAAAAAAIAAAAZHJhd2NpcmM9IQAAAAAAAEohAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARSEAAAAAAABFIQAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": "pos"
					},
					"AwAAADIhAAAAAAAAMyEAAAAAAAAAAAAAMyEAAAAAAAA0IQAAAAAAAAAAAAA0IQAAAAAAADUhAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMiEAAAAAAAAyIQAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAADUhAAAAAAAANiEAAAAAAAAAAAAANiEAAAAAAAA3IQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANSEAAAAAAAA1IQAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADchAAAAAAAAOCEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANyEAAAAAAAA3IQAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAADghAAAAAAAAOiEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOCEAAAAAAAA4IQAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AQAAADkhAAAAAAAAOiEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOSEAAAAAAAA5IQAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": "f32,"
					},
					"BAAAADshAAAAAAAAPCEAAAAAAAAAAAAAPCEAAAAAAAA9IQAAAAAAAAAAAAA9IQAAAAAAAD4hAAAAAAAAAAAAAD4hAAAAAAAAPyEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOyEAAAAAAAA7IQAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": " r"
					},
					"AgAAAD8hAAAAAAAAQCEAAAAAAAAAAAAAQCEAAAAAAABBIQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPyEAAAAAAAA/IQAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAAEEhAAAAAAAAQiEAAAAAAAAAAAAAQiEAAAAAAABDIQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQSEAAAAAAABBIQAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": " f32,"
					},
					"BQAAAEMhAAAAAAAARCEAAAAAAAAAAAAARCEAAAAAAABFIQAAAAAAAAAAAABFIQAAAAAAAEYhAAAAAAAAAAAAAEYhAAAAAAAARyEAAAAAAAAAAAAARyEAAAAAAABIIQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQyEAAAAAAABDIQAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": " grid_c"
					},
					"BwAAAEghAAAAAAAASSEAAAAAAAAAAAAASSEAAAAAAABKIQAAAAAAAAAAAABKIQAAAAAAAEshAAAAAAAAAAAAAEshAAAAAAAATCEAAAAAAAAAAAAATCEAAAAAAABNIQAAAAAAAAAAAABNIQAAAAAAAE4hAAAAAAAAAAAAAE4hAAAAAAAATyEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASCEAAAAAAABIIQAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"left_delete",
					null,
					"AQAAAE4hAAAAAAAATiEAAAAAAAABAAAAYw",
					"AQAAAAAAAAABAAAATyEAAAAAAABPIQAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "size"
					},
					"BAAAAE4hAAAAAAAATyEAAAAAAAAAAAAATyEAAAAAAABQIQAAAAAAAAAAAABQIQAAAAAAAFEhAAAAAAAAAAAAAFEhAAAAAAAAUiEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATiEAAAAAAABOIQAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAAFIhAAAAAAAAUyEAAAAAAAAAAAAAUyEAAAAAAABUIQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUiEAAAAAAABSIQAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": " f32"
					},
					"BAAAAFQhAAAAAAAAVSEAAAAAAAAAAAAAVSEAAAAAAABWIQAAAAAAAAAAAABWIQAAAAAAAFchAAAAAAAAAAAAAFchAAAAAAAAWCEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVCEAAAAAAABUIQAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": "cell_"
					},
					"BQAAAE4hAAAAAAAATyEAAAAAAAAAAAAATyEAAAAAAABQIQAAAAAAAAAAAABQIQAAAAAAAFEhAAAAAAAAAAAAAFEhAAAAAAAAUiEAAAAAAAAAAAAAUiEAAAAAAABTIQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATiEAAAAAAABOIQAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": "\npos"
					},
					"BAAAAGAhAAAAAAAAZSEAAAAAAAAAAAAAZSEAAAAAAABmIQAAAAAAAAAAAABmIQAAAAAAAGchAAAAAAAAAAAAAGchAAAAAAAAaCEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYCEAAAAAAABgIQAAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": " *="
					},
					"AwAAAGghAAAAAAAAaSEAAAAAAAAAAAAAaSEAAAAAAABqIQAAAAAAAAAAAABqIQAAAAAAAGshAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaCEAAAAAAABoIQAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": " grid_cell"
					},
					"CgAAAGshAAAAAAAAbCEAAAAAAAAAAAAAbCEAAAAAAABtIQAAAAAAAAAAAABtIQAAAAAAAG4hAAAAAAAAAAAAAG4hAAAAAAAAbyEAAAAAAAAAAAAAbyEAAAAAAABwIQAAAAAAAAAAAABwIQAAAAAAAHEhAAAAAAAAAAAAAHEhAAAAAAAAciEAAAAAAAAAAAAAciEAAAAAAABzIQAAAAAAAAAAAABzIQAAAAAAAHQhAAAAAAAAAAAAAHQhAAAAAAAAdSEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAayEAAAAAAABrIQAAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": "_sizee"
					},
					"BgAAAHUhAAAAAAAAdiEAAAAAAAAAAAAAdiEAAAAAAAB3IQAAAAAAAAAAAAB3IQAAAAAAAHghAAAAAAAAAAAAAHghAAAAAAAAeSEAAAAAAAAAAAAAeSEAAAAAAAB6IQAAAAAAAAAAAAB6IQAAAAAAAHshAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdSEAAAAAAAB1IQAAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					1,
					"left_delete",
					null,
					"AQAAAHohAAAAAAAAeiEAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAAeyEAAAAAAAB7IQAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": "\nr"
					},
					"AgAAAHohAAAAAAAAfyEAAAAAAAAAAAAAfyEAAAAAAACAIQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeiEAAAAAAAB6IQAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIAhAAAAAAAAgSEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgCEAAAAAAACAIQAAAAAAAAAAAAAAAPC/"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": "_"
					},
					"AQAAAGUhAAAAAAAAZiEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZSEAAAAAAABlIQAAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": "_"
					},
					"AQAAAIAhAAAAAAAAgSEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgCEAAAAAAACAIQAAAAAAAAAAAAAAAPC/"
				],
				[
					63,
					1,
					"left_delete",
					null,
					"AQAAAGohAAAAAAAAaiEAAAAAAAABAAAAKg",
					"AQAAAAAAAAABAAAAayEAAAAAAABrIQAAAAAAAAAAAAAAAPC/"
				],
				[
					65,
					1,
					"insert",
					{
						"characters": " pos"
					},
					"BAAAAGshAAAAAAAAbCEAAAAAAAAAAAAAbCEAAAAAAABtIQAAAAAAAAAAAABtIQAAAAAAAG4hAAAAAAAAAAAAAG4hAAAAAAAAbyEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAayEAAAAAAABrIQAAAAAAAAAAAAAAAPC/"
				],
				[
					66,
					1,
					"insert",
					{
						"characters": " *"
					},
					"AgAAAG8hAAAAAAAAcCEAAAAAAAAAAAAAcCEAAAAAAABxIQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbyEAAAAAAABvIQAAAAAAAAAAAAAAAPC/"
				],
				[
					68,
					1,
					"insert",
					{
						"characters": ":="
					},
					"AgAAAIghAAAAAAAAiSEAAAAAAAAAAAAAiSEAAAAAAACKIQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiCEAAAAAAACIIQAAAAAAAAAAAAAAIGdA"
				],
				[
					70,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAGohAAAAAAAAayEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaiEAAAAAAABqIQAAAAAAAAAAAAAAAFpA"
				],
				[
					72,
					1,
					"insert",
					{
						"characters": " r"
					},
					"AgAAAIshAAAAAAAAjCEAAAAAAAAAAAAAjCEAAAAAAACNIQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiyEAAAAAAACLIQAAAAAAAAAAAAAAwFxA"
				],
				[
					73,
					1,
					"insert",
					{
						"characters": " *"
					},
					"AgAAAI0hAAAAAAAAjiEAAAAAAAAAAAAAjiEAAAAAAACPIQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjSEAAAAAAACNIQAAAAAAAAAAAAAAAPC/"
				],
				[
					74,
					1,
					"insert",
					{
						"characters": " grid_cell_si"
					},
					"DQAAAI8hAAAAAAAAkCEAAAAAAAAAAAAAkCEAAAAAAACRIQAAAAAAAAAAAACRIQAAAAAAAJIhAAAAAAAAAAAAAJIhAAAAAAAAkyEAAAAAAAAAAAAAkyEAAAAAAACUIQAAAAAAAAAAAACUIQAAAAAAAJUhAAAAAAAAAAAAAJUhAAAAAAAAliEAAAAAAAAAAAAAliEAAAAAAACXIQAAAAAAAAAAAACXIQAAAAAAAJghAAAAAAAAAAAAAJghAAAAAAAAmSEAAAAAAAAAAAAAmSEAAAAAAACaIQAAAAAAAAAAAACaIQAAAAAAAJshAAAAAAAAAAAAAJshAAAAAAAAnCEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjyEAAAAAAACPIQAAAAAAAAAAAAAAAPC/"
				],
				[
					75,
					1,
					"insert",
					{
						"characters": "ze"
					},
					"AgAAAJwhAAAAAAAAnSEAAAAAAAAAAAAAnSEAAAAAAACeIQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnCEAAAAAAACcIQAAAAAAAAAAAAAAAPC/"
				],
				[
					79,
					1,
					"insert",
					{
						"characters": " color"
					},
					"BgAAAEghAAAAAAAASSEAAAAAAAAAAAAASSEAAAAAAABKIQAAAAAAAAAAAABKIQAAAAAAAEshAAAAAAAAAAAAAEshAAAAAAAATCEAAAAAAAAAAAAATCEAAAAAAABNIQAAAAAAAAAAAABNIQAAAAAAAE4hAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASCEAAAAAAABIIQAAAAAAAAAAAAAAAPC/"
				],
				[
					80,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAAE4hAAAAAAAATyEAAAAAAAAAAAAATyEAAAAAAABQIQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATiEAAAAAAABOIQAAAAAAAAAAAAAAAPC/"
				],
				[
					81,
					1,
					"insert",
					{
						"characters": " rl.Color,"
					},
					"CgAAAFAhAAAAAAAAUSEAAAAAAAAAAAAAUSEAAAAAAABSIQAAAAAAAAAAAABSIQAAAAAAAFMhAAAAAAAAAAAAAFMhAAAAAAAAVCEAAAAAAAAAAAAAVCEAAAAAAABVIQAAAAAAAAAAAABVIQAAAAAAAFYhAAAAAAAAAAAAAFYhAAAAAAAAVyEAAAAAAAAAAAAAVyEAAAAAAABYIQAAAAAAAAAAAABYIQAAAAAAAFkhAAAAAAAAAAAAAFkhAAAAAAAAWiEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUCEAAAAAAABQIQAAAAAAAAAAAAAAAPC/"
				],
				[
					85,
					1,
					"insert",
					{
						"characters": "_pos,"
					},
					"BQAAAMQhAAAAAAAAxSEAAAAAAAAAAAAAxSEAAAAAAADGIQAAAAAAAAAAAADGIQAAAAAAAMchAAAAAAAAAAAAAMchAAAAAAAAyCEAAAAAAAAAAAAAyCEAAAAAAADJIQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxCEAAAAAAADEIQAAAAAAAAAAAAAAAPC/"
				],
				[
					86,
					1,
					"insert",
					{
						"characters": " _r,"
					},
					"BAAAAMkhAAAAAAAAyiEAAAAAAAAAAAAAyiEAAAAAAADLIQAAAAAAAAAAAADLIQAAAAAAAMwhAAAAAAAAAAAAAMwhAAAAAAAAzSEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAySEAAAAAAADJIQAAAAAAAAAAAAAAAPC/"
				],
				[
					87,
					1,
					"insert",
					{
						"characters": " color"
					},
					"BgAAAM0hAAAAAAAAziEAAAAAAAAAAAAAziEAAAAAAADPIQAAAAAAAAAAAADPIQAAAAAAANAhAAAAAAAAAAAAANAhAAAAAAAA0SEAAAAAAAAAAAAA0SEAAAAAAADSIQAAAAAAAAAAAADSIQAAAAAAANMhAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzSEAAAAAAADNIQAAAAAAAAAAAAAAAPC/"
				],
				[
					91,
					1,
					"insert",
					{
						"characters": "\n\n\ndraw_line"
					},
					"DAAAANYhAAAAAAAA1yEAAAAAAAAAAAAA1yEAAAAAAADYIQAAAAAAAAAAAADYIQAAAAAAANkhAAAAAAAAAAAAANkhAAAAAAAA2iEAAAAAAAAAAAAA2iEAAAAAAADbIQAAAAAAAAAAAADbIQAAAAAAANwhAAAAAAAAAAAAANwhAAAAAAAA3SEAAAAAAAAAAAAA3SEAAAAAAADeIQAAAAAAAAAAAADeIQAAAAAAAN8hAAAAAAAAAAAAAN8hAAAAAAAA4CEAAAAAAAAAAAAA4CEAAAAAAADhIQAAAAAAAAAAAADhIQAAAAAAAOIhAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1iEAAAAAAADWIQAAAAAAAAAAAAAAAPC/"
				],
				[
					92,
					1,
					"insert",
					{
						"characters": "_on_grid"
					},
					"CAAAAOIhAAAAAAAA4yEAAAAAAAAAAAAA4yEAAAAAAADkIQAAAAAAAAAAAADkIQAAAAAAAOUhAAAAAAAAAAAAAOUhAAAAAAAA5iEAAAAAAAAAAAAA5iEAAAAAAADnIQAAAAAAAAAAAADnIQAAAAAAAOghAAAAAAAAAAAAAOghAAAAAAAA6SEAAAAAAAAAAAAA6SEAAAAAAADqIQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4iEAAAAAAADiIQAAAAAAAAAAAAAAAPC/"
				],
				[
					93,
					1,
					"insert",
					{
						"characters": " ::"
					},
					"AwAAAOohAAAAAAAA6yEAAAAAAAAAAAAA6yEAAAAAAADsIQAAAAAAAAAAAADsIQAAAAAAAO0hAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6iEAAAAAAADqIQAAAAAAAAAAAAAAAPC/"
				],
				[
					94,
					1,
					"insert",
					{
						"characters": " proc"
					},
					"BQAAAO0hAAAAAAAA7iEAAAAAAAAAAAAA7iEAAAAAAADvIQAAAAAAAAAAAADvIQAAAAAAAPAhAAAAAAAAAAAAAPAhAAAAAAAA8SEAAAAAAAAAAAAA8SEAAAAAAADyIQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7SEAAAAAAADtIQAAAAAAAAAAAAAAAPC/"
				],
				[
					95,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAPIhAAAAAAAA9CEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8iEAAAAAAADyIQAAAAAAAAAAAAAAAPC/"
				],
				[
					96,
					1,
					"insert",
					{
						"characters": "pos1"
					},
					"BAAAAPMhAAAAAAAA9CEAAAAAAAAAAAAA9CEAAAAAAAD1IQAAAAAAAAAAAAD1IQAAAAAAAPYhAAAAAAAAAAAAAPYhAAAAAAAA9yEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8yEAAAAAAADzIQAAAAAAAAAAAAAAAPC/"
				],
				[
					97,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAAPchAAAAAAAA+CEAAAAAAAAAAAAA+CEAAAAAAAD5IQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9yEAAAAAAAD3IQAAAAAAAAAAAAAAAPC/"
				],
				[
					98,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPkhAAAAAAAA+iEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+SEAAAAAAAD5IQAAAAAAAAAAAAAAAPC/"
				],
				[
					99,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAPohAAAAAAAA/CEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+iEAAAAAAAD6IQAAAAAAAAAAAAAAAPC/"
				],
				[
					100,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AQAAAPshAAAAAAAA/CEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+yEAAAAAAAD7IQAAAAAAAAAAAAAAAPC/"
				],
				[
					102,
					1,
					"insert",
					{
						"characters": "f32,"
					},
					"BAAAAP0hAAAAAAAA/iEAAAAAAAAAAAAA/iEAAAAAAAD/IQAAAAAAAAAAAAD/IQAAAAAAAAAiAAAAAAAAAAAAAAAiAAAAAAAAASIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/SEAAAAAAAD9IQAAAAAAAAAAAAAAAPC/"
				],
				[
					103,
					1,
					"insert",
					{
						"characters": " pos"
					},
					"BAAAAAEiAAAAAAAAAiIAAAAAAAAAAAAAAiIAAAAAAAADIgAAAAAAAAAAAAADIgAAAAAAAAQiAAAAAAAAAAAAAAQiAAAAAAAABSIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAASIAAAAAAAABIgAAAAAAAAAAAAAAAPC/"
				],
				[
					104,
					8,
					"delete_word",
					{
						"forward": false
					},
					"CAAAAAIiAAAAAAAAAiIAAAAAAAADAAAAcG9zACIAAAAAAAAAIgAAAAAAAAIAAAAsIP0hAAAAAAAA/SEAAAAAAAADAAAAZjMy/CEAAAAAAAD8IQAAAAAAAAEAAABd+yEAAAAAAAD7IQAAAAAAAAEAAAAy+iEAAAAAAAD6IQAAAAAAAAEAAABb+CEAAAAAAAD4IQAAAAAAAAIAAAA6IPMhAAAAAAAA8yEAAAAAAAAFAAAAcG9zMSA",
					"AQAAAAAAAAABAAAABSIAAAAAAAAFIgAAAAAAAAAAAAAAAPC/"
				],
				[
					106,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAPQhAAAAAAAA9SEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9CEAAAAAAAD0IQAAAAAAAAAAAAAAAPC/"
				],
				[
					107,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAPUhAAAAAAAA9yEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9SEAAAAAAAD1IQAAAAAAAAAAAAAAAPC/"
				],
				[
					108,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"AwAAAPYhAAAAAAAA9yEAAAAAAAAAAAAA9yEAAAAAAAD4IQAAAAAAAAAAAAD3IQAAAAAAAPshAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9iEAAAAAAAD2IQAAAAAAAAAAAAAAAPC/"
				],
				[
					109,
					1,
					"insert",
					{
						"characters": "rl.DrawLine"
					},
					"CwAAAPshAAAAAAAA/CEAAAAAAAAAAAAA/CEAAAAAAAD9IQAAAAAAAAAAAAD9IQAAAAAAAP4hAAAAAAAAAAAAAP4hAAAAAAAA/yEAAAAAAAAAAAAA/yEAAAAAAAAAIgAAAAAAAAAAAAAAIgAAAAAAAAEiAAAAAAAAAAAAAAEiAAAAAAAAAiIAAAAAAAAAAAAAAiIAAAAAAAADIgAAAAAAAAAAAAADIgAAAAAAAAQiAAAAAAAAAAAAAAQiAAAAAAAABSIAAAAAAAAAAAAABSIAAAAAAAAGIgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+yEAAAAAAAD7IQAAAAAAAAAAAAAAAPC/"
				],
				[
					110,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":13,\"session_name\":\"odin\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "DrawLineV(startPos, endPos: Vector2, color: Color)"
					},
					"AgAAAP4hAAAAAAAA/iEAAAAAAAAIAAAARHJhd0xpbmX+IQAAAAAAAAkiAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABiIAAAAAAAAGIgAAAAAAAAAAAAAAAPC/"
				],
				[
					114,
					1,
					"insert",
					{
						"characters": "start_pos"
					},
					"CQAAAPMhAAAAAAAA9CEAAAAAAAAAAAAA9CEAAAAAAAD1IQAAAAAAAAAAAAD1IQAAAAAAAPYhAAAAAAAAAAAAAPYhAAAAAAAA9yEAAAAAAAAAAAAA9yEAAAAAAAD4IQAAAAAAAAAAAAD4IQAAAAAAAPkhAAAAAAAAAAAAAPkhAAAAAAAA+iEAAAAAAAAAAAAA+iEAAAAAAAD7IQAAAAAAAAAAAAD7IQAAAAAAAPwhAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8yEAAAAAAADzIQAAAAAAAAAAAAAAAPC/"
				],
				[
					115,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAAPwhAAAAAAAA/SEAAAAAAAAAAAAA/SEAAAAAAAD+IQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/CEAAAAAAAD8IQAAAAAAAAAAAAAAAPC/"
				],
				[
					116,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAP4hAAAAAAAA/yEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/iEAAAAAAAD+IQAAAAAAAAAAAAAAAPC/"
				],
				[
					117,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAP8hAAAAAAAAASIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/yEAAAAAAAD/IQAAAAAAAAAAAAAAAPC/"
				],
				[
					118,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AQAAAAAiAAAAAAAAASIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAACIAAAAAAAAAIgAAAAAAAAAAAAAAAPC/"
				],
				[
					120,
					1,
					"insert",
					{
						"characters": "f32"
					},
					"AwAAAAIiAAAAAAAAAyIAAAAAAAAAAAAAAyIAAAAAAAAEIgAAAAAAAAAAAAAEIgAAAAAAAAUiAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAiIAAAAAAAACIgAAAAAAAAAAAAAAAPC/"
				],
				[
					121,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAAUiAAAAAAAABiIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABSIAAAAAAAAFIgAAAAAAAAAAAAAAAPC/"
				],
				[
					122,
					1,
					"insert",
					{
						"characters": " end_pos"
					},
					"CAAAAAYiAAAAAAAAByIAAAAAAAAAAAAAByIAAAAAAAAIIgAAAAAAAAAAAAAIIgAAAAAAAAkiAAAAAAAAAAAAAAkiAAAAAAAACiIAAAAAAAAAAAAACiIAAAAAAAALIgAAAAAAAAAAAAALIgAAAAAAAAwiAAAAAAAAAAAAAAwiAAAAAAAADSIAAAAAAAAAAAAADSIAAAAAAAAOIgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABiIAAAAAAAAGIgAAAAAAAAAAAAAAAPC/"
				],
				[
					123,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAAA4iAAAAAAAADyIAAAAAAAAAAAAADyIAAAAAAAAQIgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADiIAAAAAAAAOIgAAAAAAAAAAAAAAAPC/"
				],
				[
					124,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABAiAAAAAAAAESIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAECIAAAAAAAAQIgAAAAAAAAAAAAAAAPC/"
				],
				[
					125,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAABEiAAAAAAAAEyIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAESIAAAAAAAARIgAAAAAAAAAAAAAAAPC/"
				],
				[
					126,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AQAAABIiAAAAAAAAEyIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEiIAAAAAAAASIgAAAAAAAAAAAAAAAPC/"
				],
				[
					129,
					1,
					"insert",
					{
						"characters": "f"
					},
					"AQAAANghAAAAAAAA2SEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2CEAAAAAAADYIQAAAAAAAAAAAAAASIVA"
				],
				[
					130,
					1,
					"left_delete",
					null,
					"AQAAANghAAAAAAAA2CEAAAAAAAABAAAAZg",
					"AQAAAAAAAAABAAAA2SEAAAAAAADZIQAAAAAAAAAAAAAAAPC/"
				],
				[
					134,
					1,
					"insert",
					{
						"characters": "f32,"
					},
					"BAAAABQiAAAAAAAAFSIAAAAAAAAAAAAAFSIAAAAAAAAWIgAAAAAAAAAAAAAWIgAAAAAAABciAAAAAAAAAAAAABciAAAAAAAAGCIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFCIAAAAAAAAUIgAAAAAAAAAAAAAAAPC/"
				],
				[
					135,
					1,
					"insert",
					{
						"characters": " color"
					},
					"BgAAABgiAAAAAAAAGSIAAAAAAAAAAAAAGSIAAAAAAAAaIgAAAAAAAAAAAAAaIgAAAAAAABsiAAAAAAAAAAAAABsiAAAAAAAAHCIAAAAAAAAAAAAAHCIAAAAAAAAdIgAAAAAAAAAAAAAdIgAAAAAAAB4iAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGCIAAAAAAAAYIgAAAAAAAAAAAAAAAPC/"
				],
				[
					136,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAAB4iAAAAAAAAHyIAAAAAAAAAAAAAHyIAAAAAAAAgIgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHiIAAAAAAAAeIgAAAAAAAAAAAAAAAPC/"
				],
				[
					137,
					1,
					"insert",
					{
						"characters": " rl.,"
					},
					"BQAAACAiAAAAAAAAISIAAAAAAAAAAAAAISIAAAAAAAAiIgAAAAAAAAAAAAAiIgAAAAAAACMiAAAAAAAAAAAAACMiAAAAAAAAJCIAAAAAAAAAAAAAJCIAAAAAAAAlIgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAICIAAAAAAAAgIgAAAAAAAAAAAAAAAPC/"
				],
				[
					138,
					1,
					"left_delete",
					null,
					"AQAAACQiAAAAAAAAJCIAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAAJSIAAAAAAAAlIgAAAAAAAAAAAAAAAPC/"
				],
				[
					139,
					1,
					"insert",
					{
						"characters": "Color,"
					},
					"BgAAACQiAAAAAAAAJSIAAAAAAAAAAAAAJSIAAAAAAAAmIgAAAAAAAAAAAAAmIgAAAAAAACciAAAAAAAAAAAAACciAAAAAAAAKCIAAAAAAAAAAAAAKCIAAAAAAAApIgAAAAAAAAAAAAApIgAAAAAAACoiAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJCIAAAAAAAAkIgAAAAAAAAAAAAAAAPC/"
				],
				[
					140,
					1,
					"insert",
					{
						"characters": " thickenss"
					},
					"CgAAACoiAAAAAAAAKyIAAAAAAAAAAAAAKyIAAAAAAAAsIgAAAAAAAAAAAAAsIgAAAAAAAC0iAAAAAAAAAAAAAC0iAAAAAAAALiIAAAAAAAAAAAAALiIAAAAAAAAvIgAAAAAAAAAAAAAvIgAAAAAAADAiAAAAAAAAAAAAADAiAAAAAAAAMSIAAAAAAAAAAAAAMSIAAAAAAAAyIgAAAAAAAAAAAAAyIgAAAAAAADMiAAAAAAAAAAAAADMiAAAAAAAANCIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKiIAAAAAAAAqIgAAAAAAAAAAAAAAAPC/"
				],
				[
					141,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAADQiAAAAAAAANSIAAAAAAAAAAAAANSIAAAAAAAA2IgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANCIAAAAAAAA0IgAAAAAAAAAAAAAAAPC/"
				],
				[
					142,
					1,
					"insert",
					{
						"characters": " f32,"
					},
					"BQAAADYiAAAAAAAANyIAAAAAAAAAAAAANyIAAAAAAAA4IgAAAAAAAAAAAAA4IgAAAAAAADkiAAAAAAAAAAAAADkiAAAAAAAAOiIAAAAAAAAAAAAAOiIAAAAAAAA7IgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANiIAAAAAAAA2IgAAAAAAAAAAAAAAAPC/"
				],
				[
					143,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADsiAAAAAAAAPCIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOyIAAAAAAAA7IgAAAAAAAAAAAAAAAPC/"
				],
				[
					145,
					1,
					"left_delete",
					null,
					"AQAAADEiAAAAAAAAMSIAAAAAAAABAAAAbg",
					"AQAAAAAAAAABAAAAMiIAAAAAAAAyIgAAAAAAAAAAAAAAAPC/"
				],
				[
					147,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAADAiAAAAAAAAMSIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMCIAAAAAAAAwIgAAAAAAAAAAAAAAAPC/"
				],
				[
					150,
					1,
					"insert",
					{
						"characters": " gridd"
					},
					"BgAAADsiAAAAAAAAPCIAAAAAAAAAAAAAPCIAAAAAAAA9IgAAAAAAAAAAAAA9IgAAAAAAAD4iAAAAAAAAAAAAAD4iAAAAAAAAPyIAAAAAAAAAAAAAPyIAAAAAAABAIgAAAAAAAAAAAABAIgAAAAAAAEEiAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOyIAAAAAAAA7IgAAAAAAAAAAAAAAAPC/"
				],
				[
					151,
					1,
					"left_delete",
					null,
					"AQAAAEAiAAAAAAAAQCIAAAAAAAABAAAAZA",
					"AQAAAAAAAAABAAAAQSIAAAAAAABBIgAAAAAAAAAAAAAAAPC/"
				],
				[
					152,
					1,
					"insert",
					{
						"characters": "_cell_size"
					},
					"CgAAAEAiAAAAAAAAQSIAAAAAAAAAAAAAQSIAAAAAAABCIgAAAAAAAAAAAABCIgAAAAAAAEMiAAAAAAAAAAAAAEMiAAAAAAAARCIAAAAAAAAAAAAARCIAAAAAAABFIgAAAAAAAAAAAABFIgAAAAAAAEYiAAAAAAAAAAAAAEYiAAAAAAAARyIAAAAAAAAAAAAARyIAAAAAAABIIgAAAAAAAAAAAABIIgAAAAAAAEkiAAAAAAAAAAAAAEkiAAAAAAAASiIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQCIAAAAAAABAIgAAAAAAAAAAAAAAAPC/"
				],
				[
					162,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAEsiAAAAAAAATCIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASyIAAAAAAABLIgAAAAAAAAAAAAAAAPC/"
				],
				[
					163,
					1,
					"insert",
					{
						"characters": " f32"
					},
					"BAAAAEwiAAAAAAAATSIAAAAAAAAAAAAATSIAAAAAAABOIgAAAAAAAAAAAABOIgAAAAAAAE8iAAAAAAAAAAAAAE8iAAAAAAAAUCIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATCIAAAAAAABMIgAAAAAAAAAAAAAAAPC/"
				],
				[
					166,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAGQiAAAAAAAAZCIAAAAAAAACAAAAKCk",
					"AQAAAAAAAAABAAAAZiIAAAAAAABmIgAAAAAAAAAAAAAAeJVA"
				],
				[
					167,
					1,
					"left_delete",
					null,
					"AQAAAGMiAAAAAAAAYyIAAAAAAAABAAAAVg",
					"AQAAAAAAAAABAAAAZCIAAAAAAABkIgAAAAAAAAAAAAAAAPC/"
				],
				[
					171,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":11,\"session_name\":\"odin\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "DrawLineEx(startPos, endPos: Vector2, thick: f32, color: Color)"
					},
					"AgAAAFsiAAAAAAAAWyIAAAAAAAAIAAAARHJhd0xpbmVbIgAAAAAAAGciAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYyIAAAAAAABjIgAAAAAAAAAAAAAAAPC/"
				],
				[
					175,
					1,
					"cut",
					null,
					"AQAAACsiAAAAAAAAKyIAAAAAAAARAAAAdGhpY2tuZXNzIDogZjMyLCA",
					"AQAAAAAAAAABAAAAPCIAAAAAAAArIgAAAAAAAAAAAAAAAPC/"
				],
				[
					178,
					1,
					"paste",
					null,
					"AQAAABkiAAAAAAAAKiIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGSIAAAAAAAAZIgAAAAAAAAAAAAAAAPC/"
				],
				[
					183,
					1,
					"insert",
					{
						"characters": "\n_start_pos"
					},
					"CwAAAFMiAAAAAAAAWCIAAAAAAAAAAAAAWCIAAAAAAABZIgAAAAAAAAAAAABZIgAAAAAAAFoiAAAAAAAAAAAAAFoiAAAAAAAAWyIAAAAAAAAAAAAAWyIAAAAAAABcIgAAAAAAAAAAAABcIgAAAAAAAF0iAAAAAAAAAAAAAF0iAAAAAAAAXiIAAAAAAAAAAAAAXiIAAAAAAABfIgAAAAAAAAAAAABfIgAAAAAAAGAiAAAAAAAAAAAAAGAiAAAAAAAAYSIAAAAAAAAAAAAAYSIAAAAAAABiIgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUyIAAAAAAABTIgAAAAAAAAAAAAAAAGpA"
				],
				[
					184,
					1,
					"insert",
					{
						"characters": " :="
					},
					"AwAAAGIiAAAAAAAAYyIAAAAAAAAAAAAAYyIAAAAAAABkIgAAAAAAAAAAAABkIgAAAAAAAGUiAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYiIAAAAAAABiIgAAAAAAAAAAAAAAAPC/"
				],
				[
					185,
					1,
					"insert",
					{
						"characters": " start_pos"
					},
					"CgAAAGUiAAAAAAAAZiIAAAAAAAAAAAAAZiIAAAAAAABnIgAAAAAAAAAAAABnIgAAAAAAAGgiAAAAAAAAAAAAAGgiAAAAAAAAaSIAAAAAAAAAAAAAaSIAAAAAAABqIgAAAAAAAAAAAABqIgAAAAAAAGsiAAAAAAAAAAAAAGsiAAAAAAAAbCIAAAAAAAAAAAAAbCIAAAAAAABtIgAAAAAAAAAAAABtIgAAAAAAAG4iAAAAAAAAAAAAAG4iAAAAAAAAbyIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZSIAAAAAAABlIgAAAAAAAAAAAAAAAPC/"
				],
				[
					186,
					1,
					"insert",
					{
						"characters": " *"
					},
					"AgAAAG8iAAAAAAAAcCIAAAAAAAAAAAAAcCIAAAAAAABxIgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbyIAAAAAAABvIgAAAAAAAAAAAAAAAPC/"
				],
				[
					187,
					1,
					"insert",
					{
						"characters": " grid_cell"
					},
					"CgAAAHEiAAAAAAAAciIAAAAAAAAAAAAAciIAAAAAAABzIgAAAAAAAAAAAABzIgAAAAAAAHQiAAAAAAAAAAAAAHQiAAAAAAAAdSIAAAAAAAAAAAAAdSIAAAAAAAB2IgAAAAAAAAAAAAB2IgAAAAAAAHciAAAAAAAAAAAAAHciAAAAAAAAeCIAAAAAAAAAAAAAeCIAAAAAAAB5IgAAAAAAAAAAAAB5IgAAAAAAAHoiAAAAAAAAAAAAAHoiAAAAAAAAeyIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcSIAAAAAAABxIgAAAAAAAAAAAAAAAPC/"
				],
				[
					188,
					1,
					"insert",
					{
						"characters": "_size"
					},
					"BQAAAHsiAAAAAAAAfCIAAAAAAAAAAAAAfCIAAAAAAAB9IgAAAAAAAAAAAAB9IgAAAAAAAH4iAAAAAAAAAAAAAH4iAAAAAAAAfyIAAAAAAAAAAAAAfyIAAAAAAACAIgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeyIAAAAAAAB7IgAAAAAAAAAAAAAAAPC/"
				],
				[
					189,
					1,
					"insert",
					{
						"characters": "\n_end_pos"
					},
					"CQAAAIAiAAAAAAAAhSIAAAAAAAAAAAAAhSIAAAAAAACGIgAAAAAAAAAAAACGIgAAAAAAAIciAAAAAAAAAAAAAIciAAAAAAAAiCIAAAAAAAAAAAAAiCIAAAAAAACJIgAAAAAAAAAAAACJIgAAAAAAAIoiAAAAAAAAAAAAAIoiAAAAAAAAiyIAAAAAAAAAAAAAiyIAAAAAAACMIgAAAAAAAAAAAACMIgAAAAAAAI0iAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgCIAAAAAAACAIgAAAAAAAAAAAAAAAPC/"
				],
				[
					190,
					1,
					"insert",
					{
						"characters": " :="
					},
					"AwAAAI0iAAAAAAAAjiIAAAAAAAAAAAAAjiIAAAAAAACPIgAAAAAAAAAAAACPIgAAAAAAAJAiAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjSIAAAAAAACNIgAAAAAAAAAAAAAAAPC/"
				],
				[
					191,
					1,
					"insert",
					{
						"characters": " end_pos"
					},
					"CAAAAJAiAAAAAAAAkSIAAAAAAAAAAAAAkSIAAAAAAACSIgAAAAAAAAAAAACSIgAAAAAAAJMiAAAAAAAAAAAAAJMiAAAAAAAAlCIAAAAAAAAAAAAAlCIAAAAAAACVIgAAAAAAAAAAAACVIgAAAAAAAJYiAAAAAAAAAAAAAJYiAAAAAAAAlyIAAAAAAAAAAAAAlyIAAAAAAACYIgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkCIAAAAAAACQIgAAAAAAAAAAAAAAAPC/"
				],
				[
					192,
					1,
					"insert",
					{
						"characters": " *"
					},
					"AgAAAJgiAAAAAAAAmSIAAAAAAAAAAAAAmSIAAAAAAACaIgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmCIAAAAAAACYIgAAAAAAAAAAAAAAAPC/"
				],
				[
					193,
					1,
					"insert",
					{
						"characters": " grid_cell-"
					},
					"CwAAAJoiAAAAAAAAmyIAAAAAAAAAAAAAmyIAAAAAAACcIgAAAAAAAAAAAACcIgAAAAAAAJ0iAAAAAAAAAAAAAJ0iAAAAAAAAniIAAAAAAAAAAAAAniIAAAAAAACfIgAAAAAAAAAAAACfIgAAAAAAAKAiAAAAAAAAAAAAAKAiAAAAAAAAoSIAAAAAAAAAAAAAoSIAAAAAAACiIgAAAAAAAAAAAACiIgAAAAAAAKMiAAAAAAAAAAAAAKMiAAAAAAAApCIAAAAAAAAAAAAApCIAAAAAAAClIgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmiIAAAAAAACaIgAAAAAAAAAAAAAAAPC/"
				],
				[
					194,
					1,
					"left_delete",
					null,
					"AQAAAKQiAAAAAAAApCIAAAAAAAABAAAALQ",
					"AQAAAAAAAAABAAAApSIAAAAAAAClIgAAAAAAAAAAAAAAAPC/"
				],
				[
					195,
					1,
					"insert",
					{
						"characters": "_size"
					},
					"BQAAAKQiAAAAAAAApSIAAAAAAAAAAAAApSIAAAAAAACmIgAAAAAAAAAAAACmIgAAAAAAAKciAAAAAAAAAAAAAKciAAAAAAAAqCIAAAAAAAAAAAAAqCIAAAAAAACpIgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApCIAAAAAAACkIgAAAAAAAAAAAAAAAPC/"
				],
				[
					196,
					1,
					"insert",
					{
						"characters": "\nthicknes"
					},
					"CQAAAKkiAAAAAAAAriIAAAAAAAAAAAAAriIAAAAAAACvIgAAAAAAAAAAAACvIgAAAAAAALAiAAAAAAAAAAAAALAiAAAAAAAAsSIAAAAAAAAAAAAAsSIAAAAAAACyIgAAAAAAAAAAAACyIgAAAAAAALMiAAAAAAAAAAAAALMiAAAAAAAAtCIAAAAAAAAAAAAAtCIAAAAAAAC1IgAAAAAAAAAAAAC1IgAAAAAAALYiAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqSIAAAAAAACpIgAAAAAAAAAAAAAAAPC/"
				],
				[
					197,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAALYiAAAAAAAAtyIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtiIAAAAAAAC2IgAAAAAAAAAAAAAAAPC/"
				],
				[
					199,
					1,
					"insert",
					{
						"characters": "_"
					},
					"AQAAAK4iAAAAAAAAryIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAriIAAAAAAACuIgAAAAAAAAAAAAAAAPC/"
				],
				[
					201,
					1,
					"insert",
					{
						"characters": " :="
					},
					"AwAAALgiAAAAAAAAuSIAAAAAAAAAAAAAuSIAAAAAAAC6IgAAAAAAAAAAAAC6IgAAAAAAALsiAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuCIAAAAAAAC4IgAAAAAAAAAAAAAAAPC/"
				],
				[
					202,
					1,
					"insert",
					{
						"characters": " thickness"
					},
					"CgAAALsiAAAAAAAAvCIAAAAAAAAAAAAAvCIAAAAAAAC9IgAAAAAAAAAAAAC9IgAAAAAAAL4iAAAAAAAAAAAAAL4iAAAAAAAAvyIAAAAAAAAAAAAAvyIAAAAAAADAIgAAAAAAAAAAAADAIgAAAAAAAMEiAAAAAAAAAAAAAMEiAAAAAAAAwiIAAAAAAAAAAAAAwiIAAAAAAADDIgAAAAAAAAAAAADDIgAAAAAAAMQiAAAAAAAAAAAAAMQiAAAAAAAAxSIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuyIAAAAAAAC7IgAAAAAAAAAAAAAAAPC/"
				],
				[
					203,
					1,
					"insert",
					{
						"characters": " *"
					},
					"AgAAAMUiAAAAAAAAxiIAAAAAAAAAAAAAxiIAAAAAAADHIgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxSIAAAAAAADFIgAAAAAAAAAAAAAAAPC/"
				],
				[
					204,
					1,
					"insert",
					{
						"characters": " grid_cell_size"
					},
					"DwAAAMciAAAAAAAAyCIAAAAAAAAAAAAAyCIAAAAAAADJIgAAAAAAAAAAAADJIgAAAAAAAMoiAAAAAAAAAAAAAMoiAAAAAAAAyyIAAAAAAAAAAAAAyyIAAAAAAADMIgAAAAAAAAAAAADMIgAAAAAAAM0iAAAAAAAAAAAAAM0iAAAAAAAAziIAAAAAAAAAAAAAziIAAAAAAADPIgAAAAAAAAAAAADPIgAAAAAAANAiAAAAAAAAAAAAANAiAAAAAAAA0SIAAAAAAAAAAAAA0SIAAAAAAADSIgAAAAAAAAAAAADSIgAAAAAAANMiAAAAAAAAAAAAANMiAAAAAAAA1CIAAAAAAAAAAAAA1CIAAAAAAADVIgAAAAAAAAAAAADVIgAAAAAAANYiAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxyIAAAAAAADHIgAAAAAAAAAAAAAAAPC/"
				],
				[
					208,
					1,
					"insert",
					{
						"characters": "star"
					},
					"BAAAAOkiAAAAAAAA6iIAAAAAAAAAAAAA6iIAAAAAAADrIgAAAAAAAAAAAADrIgAAAAAAAOwiAAAAAAAAAAAAAOwiAAAAAAAA7SIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6SIAAAAAAADpIgAAAAAAAAAAAAAAAPC/"
				],
				[
					209,
					4,
					"left_delete",
					null,
					"BAAAAOwiAAAAAAAA7CIAAAAAAAABAAAAcusiAAAAAAAA6yIAAAAAAAABAAAAYeoiAAAAAAAA6iIAAAAAAAABAAAAdOkiAAAAAAAA6SIAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAA7SIAAAAAAADtIgAAAAAAAAAAAAAAAPC/"
				],
				[
					210,
					1,
					"insert",
					{
						"characters": "_start_pos,"
					},
					"CwAAAOkiAAAAAAAA6iIAAAAAAAAAAAAA6iIAAAAAAADrIgAAAAAAAAAAAADrIgAAAAAAAOwiAAAAAAAAAAAAAOwiAAAAAAAA7SIAAAAAAAAAAAAA7SIAAAAAAADuIgAAAAAAAAAAAADuIgAAAAAAAO8iAAAAAAAAAAAAAO8iAAAAAAAA8CIAAAAAAAAAAAAA8CIAAAAAAADxIgAAAAAAAAAAAADxIgAAAAAAAPIiAAAAAAAAAAAAAPIiAAAAAAAA8yIAAAAAAAAAAAAA8yIAAAAAAAD0IgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6SIAAAAAAADpIgAAAAAAAAAAAAAAAPC/"
				],
				[
					211,
					1,
					"insert",
					{
						"characters": " _"
					},
					"AgAAAPQiAAAAAAAA9SIAAAAAAAAAAAAA9SIAAAAAAAD2IgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9CIAAAAAAAD0IgAAAAAAAAAAAAAAAPC/"
				],
				[
					213,
					1,
					"left_delete",
					null,
					"AQAAAPYiAAAAAAAA9iIAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAA9yIAAAAAAAD3IgAAAAAAAAAAAAAAAPC/"
				],
				[
					214,
					1,
					"insert",
					{
						"characters": "end_pos,"
					},
					"CAAAAPYiAAAAAAAA9yIAAAAAAAAAAAAA9yIAAAAAAAD4IgAAAAAAAAAAAAD4IgAAAAAAAPkiAAAAAAAAAAAAAPkiAAAAAAAA+iIAAAAAAAAAAAAA+iIAAAAAAAD7IgAAAAAAAAAAAAD7IgAAAAAAAPwiAAAAAAAAAAAAAPwiAAAAAAAA/SIAAAAAAAAAAAAA/SIAAAAAAAD+IgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9iIAAAAAAAD2IgAAAAAAAAAAAAAAAPC/"
				],
				[
					215,
					1,
					"insert",
					{
						"characters": " _"
					},
					"AgAAAP4iAAAAAAAA/yIAAAAAAAAAAAAA/yIAAAAAAAAAIwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/iIAAAAAAAD+IgAAAAAAAAAAAAAAAPC/"
				],
				[
					216,
					1,
					"insert",
					{
						"characters": "thjick"
					},
					"BgAAAAAjAAAAAAAAASMAAAAAAAAAAAAAASMAAAAAAAACIwAAAAAAAAAAAAACIwAAAAAAAAMjAAAAAAAAAAAAAAMjAAAAAAAABCMAAAAAAAAAAAAABCMAAAAAAAAFIwAAAAAAAAAAAAAFIwAAAAAAAAYjAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAACMAAAAAAAAAIwAAAAAAAAAAAAAAAPC/"
				],
				[
					217,
					4,
					"left_delete",
					null,
					"BAAAAAUjAAAAAAAABSMAAAAAAAABAAAAawQjAAAAAAAABCMAAAAAAAABAAAAYwMjAAAAAAAAAyMAAAAAAAABAAAAaQIjAAAAAAAAAiMAAAAAAAABAAAAag",
					"AQAAAAAAAAABAAAABiMAAAAAAAAGIwAAAAAAAAAAAAAAAPC/"
				],
				[
					218,
					1,
					"insert",
					{
						"characters": "ickes"
					},
					"BQAAAAIjAAAAAAAAAyMAAAAAAAAAAAAAAyMAAAAAAAAEIwAAAAAAAAAAAAAEIwAAAAAAAAUjAAAAAAAAAAAAAAUjAAAAAAAABiMAAAAAAAAAAAAABiMAAAAAAAAHIwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAiMAAAAAAAACIwAAAAAAAAAAAAAAAPC/"
				],
				[
					219,
					2,
					"left_delete",
					null,
					"AgAAAAYjAAAAAAAABiMAAAAAAAABAAAAcwUjAAAAAAAABSMAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAAByMAAAAAAAAHIwAAAAAAAAAAAAAAAPC/"
				],
				[
					220,
					1,
					"insert",
					{
						"characters": "ness,"
					},
					"BQAAAAUjAAAAAAAABiMAAAAAAAAAAAAABiMAAAAAAAAHIwAAAAAAAAAAAAAHIwAAAAAAAAgjAAAAAAAAAAAAAAgjAAAAAAAACSMAAAAAAAAAAAAACSMAAAAAAAAKIwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABSMAAAAAAAAFIwAAAAAAAAAAAAAAAPC/"
				],
				[
					221,
					1,
					"insert",
					{
						"characters": " color"
					},
					"BgAAAAojAAAAAAAACyMAAAAAAAAAAAAACyMAAAAAAAAMIwAAAAAAAAAAAAAMIwAAAAAAAA0jAAAAAAAAAAAAAA0jAAAAAAAADiMAAAAAAAAAAAAADiMAAAAAAAAPIwAAAAAAAAAAAAAPIwAAAAAAABAjAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACiMAAAAAAAAKIwAAAAAAAAAAAAAAAPC/"
				],
				[
					222,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAABAjAAAAAAAAESMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAECMAAAAAAAAQIwAAAAAAAAAAAAAAAPC/"
				],
				[
					227,
					1,
					"insert",
					{
						"characters": "\n\n\n"
					},
					"AwAAABMjAAAAAAAAFCMAAAAAAAAAAAAAFCMAAAAAAAAVIwAAAAAAAAAAAAAVIwAAAAAAABYjAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEyMAAAAAAAATIwAAAAAAAAAAAAAAAPC/"
				],
				[
					230,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAABUjAAAAAAAAFiMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFSMAAAAAAAAVIwAAAAAAAAAAAAAAAAAA"
				],
				[
					231,
					1,
					"paste",
					null,
					"AQAAABYjAAAAAAAAhSYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFiMAAAAAAAAWIwAAAAAAAAAAAAAAAPC/"
				],
				[
					232,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAIUmAAAAAAAAhiYAAAAAAAAAAAAAhiYAAAAAAACHJgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhSYAAAAAAACFJgAAAAAAAAAAAAAAAPC/"
				],
				[
					234,
					1,
					"insert",
					{
						"characters": "draw_arrow_on"
					},
					"DQAAAIcmAAAAAAAAiCYAAAAAAAAAAAAAiCYAAAAAAACJJgAAAAAAAAAAAACJJgAAAAAAAIomAAAAAAAAAAAAAIomAAAAAAAAiyYAAAAAAAAAAAAAiyYAAAAAAACMJgAAAAAAAAAAAACMJgAAAAAAAI0mAAAAAAAAAAAAAI0mAAAAAAAAjiYAAAAAAAAAAAAAjiYAAAAAAACPJgAAAAAAAAAAAACPJgAAAAAAAJAmAAAAAAAAAAAAAJAmAAAAAAAAkSYAAAAAAAAAAAAAkSYAAAAAAACSJgAAAAAAAAAAAACSJgAAAAAAAJMmAAAAAAAAAAAAAJMmAAAAAAAAlCYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhyYAAAAAAACHJgAAAAAAAAAAAAAAAPC/"
				],
				[
					235,
					1,
					"insert",
					{
						"characters": "_grid"
					},
					"BQAAAJQmAAAAAAAAlSYAAAAAAAAAAAAAlSYAAAAAAACWJgAAAAAAAAAAAACWJgAAAAAAAJcmAAAAAAAAAAAAAJcmAAAAAAAAmCYAAAAAAAAAAAAAmCYAAAAAAACZJgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlCYAAAAAAACUJgAAAAAAAAAAAAAAAPC/"
				],
				[
					239,
					1,
					"insert",
					{
						"characters": "_on_grid"
					},
					"CAAAACAjAAAAAAAAISMAAAAAAAAAAAAAISMAAAAAAAAiIwAAAAAAAAAAAAAiIwAAAAAAACMjAAAAAAAAAAAAACMjAAAAAAAAJCMAAAAAAAAAAAAAJCMAAAAAAAAlIwAAAAAAAAAAAAAlIwAAAAAAACYjAAAAAAAAAAAAACYjAAAAAAAAJyMAAAAAAAAAAAAAJyMAAAAAAAAoIwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAICMAAAAAAAAgIwAAAAAAAAAAAAAAAPC/"
				],
				[
					243,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAEMjAAAAAAAARCMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQyMAAAAAAABDIwAAAAAAAAAAAAAAAPC/"
				],
				[
					244,
					1,
					"insert",
					{
						"characters": " thickness"
					},
					"CgAAAEQjAAAAAAAARSMAAAAAAAAAAAAARSMAAAAAAABGIwAAAAAAAAAAAABGIwAAAAAAAEcjAAAAAAAAAAAAAEcjAAAAAAAASCMAAAAAAAAAAAAASCMAAAAAAABJIwAAAAAAAAAAAABJIwAAAAAAAEojAAAAAAAAAAAAAEojAAAAAAAASyMAAAAAAAAAAAAASyMAAAAAAABMIwAAAAAAAAAAAABMIwAAAAAAAE0jAAAAAAAAAAAAAE0jAAAAAAAATiMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARCMAAAAAAABEIwAAAAAAAAAAAAAAAPC/"
				],
				[
					245,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAAE4jAAAAAAAATyMAAAAAAAAAAAAATyMAAAAAAABQIwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATiMAAAAAAABOIwAAAAAAAAAAAAAAAPC/"
				],
				[
					246,
					1,
					"insert",
					{
						"characters": " f32,"
					},
					"BQAAAFAjAAAAAAAAUSMAAAAAAAAAAAAAUSMAAAAAAABSIwAAAAAAAAAAAABSIwAAAAAAAFMjAAAAAAAAAAAAAFMjAAAAAAAAVCMAAAAAAAAAAAAAVCMAAAAAAABVIwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUCMAAAAAAABQIwAAAAAAAAAAAAAAAPC/"
				],
				[
					247,
					1,
					"insert",
					{
						"characters": " color"
					},
					"BgAAAFUjAAAAAAAAViMAAAAAAAAAAAAAViMAAAAAAABXIwAAAAAAAAAAAABXIwAAAAAAAFgjAAAAAAAAAAAAAFgjAAAAAAAAWSMAAAAAAAAAAAAAWSMAAAAAAABaIwAAAAAAAAAAAABaIwAAAAAAAFsjAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVSMAAAAAAABVIwAAAAAAAAAAAAAAAPC/"
				],
				[
					248,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAAFsjAAAAAAAAXCMAAAAAAAAAAAAAXCMAAAAAAABdIwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWyMAAAAAAABbIwAAAAAAAAAAAAAAAPC/"
				],
				[
					249,
					1,
					"insert",
					{
						"characters": " rl.Color,"
					},
					"CgAAAF0jAAAAAAAAXiMAAAAAAAAAAAAAXiMAAAAAAABfIwAAAAAAAAAAAABfIwAAAAAAAGAjAAAAAAAAAAAAAGAjAAAAAAAAYSMAAAAAAAAAAAAAYSMAAAAAAABiIwAAAAAAAAAAAABiIwAAAAAAAGMjAAAAAAAAAAAAAGMjAAAAAAAAZCMAAAAAAAAAAAAAZCMAAAAAAABlIwAAAAAAAAAAAABlIwAAAAAAAGYjAAAAAAAAAAAAAGYjAAAAAAAAZyMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXSMAAAAAAABdIwAAAAAAAAAAAAAAAPC/"
				],
				[
					250,
					1,
					"insert",
					{
						"characters": " grid_cell_"
					},
					"CwAAAGcjAAAAAAAAaCMAAAAAAAAAAAAAaCMAAAAAAABpIwAAAAAAAAAAAABpIwAAAAAAAGojAAAAAAAAAAAAAGojAAAAAAAAayMAAAAAAAAAAAAAayMAAAAAAABsIwAAAAAAAAAAAABsIwAAAAAAAG0jAAAAAAAAAAAAAG0jAAAAAAAAbiMAAAAAAAAAAAAAbiMAAAAAAABvIwAAAAAAAAAAAABvIwAAAAAAAHAjAAAAAAAAAAAAAHAjAAAAAAAAcSMAAAAAAAAAAAAAcSMAAAAAAAByIwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZyMAAAAAAABnIwAAAAAAAAAAAAAAAPC/"
				],
				[
					251,
					1,
					"insert",
					{
						"characters": "size"
					},
					"BAAAAHIjAAAAAAAAcyMAAAAAAAAAAAAAcyMAAAAAAAB0IwAAAAAAAAAAAAB0IwAAAAAAAHUjAAAAAAAAAAAAAHUjAAAAAAAAdiMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAciMAAAAAAAByIwAAAAAAAAAAAAAAAPC/"
				],
				[
					260,
					1,
					"insert",
					{
						"characters": "_on_grid"
					},
					"GAAAAKAmAAAAAAAAoSYAAAAAAAAAAAAAdSYAAAAAAAB2JgAAAAAAAAAAAACgIwAAAAAAAKEjAAAAAAAAAAAAAKMmAAAAAAAApCYAAAAAAAAAAAAAdyYAAAAAAAB4JgAAAAAAAAAAAAChIwAAAAAAAKIjAAAAAAAAAAAAAKYmAAAAAAAApyYAAAAAAAAAAAAAeSYAAAAAAAB6JgAAAAAAAAAAAACiIwAAAAAAAKMjAAAAAAAAAAAAAKkmAAAAAAAAqiYAAAAAAAAAAAAAeyYAAAAAAAB8JgAAAAAAAAAAAACjIwAAAAAAAKQjAAAAAAAAAAAAAKwmAAAAAAAArSYAAAAAAAAAAAAAfSYAAAAAAAB+JgAAAAAAAAAAAACkIwAAAAAAAKUjAAAAAAAAAAAAAK8mAAAAAAAAsCYAAAAAAAAAAAAAfyYAAAAAAACAJgAAAAAAAAAAAAClIwAAAAAAAKYjAAAAAAAAAAAAALImAAAAAAAAsyYAAAAAAAAAAAAAgSYAAAAAAACCJgAAAAAAAAAAAACmIwAAAAAAAKcjAAAAAAAAAAAAALUmAAAAAAAAtiYAAAAAAAAAAAAAgyYAAAAAAACEJgAAAAAAAAAAAACnIwAAAAAAAKgjAAAAAAAAAAAAAA",
					"AQAAAAAAAAADAAAAoCMAAAAAAACgIwAAAAAAAAAAAAAAAPC/dSYAAAAAAAB1JgAAAAAAAAAAAAAAAPC/oCYAAAAAAACgJgAAAAAAAAAAAAAAAPC/"
				],
				[
					262,
					1,
					"insert",
					{
						"characters": ","
					},
					"AwAAANUmAAAAAAAA1iYAAAAAAAAAAAAAoSYAAAAAAACiJgAAAAAAAAAAAAC8IwAAAAAAAL0jAAAAAAAAAAAAAA",
					"AQAAAAAAAAADAAAAvCMAAAAAAAC8IwAAAAAAAAAAAAAAAPC/oSYAAAAAAAChJgAAAAAAAAAAAAAAAPC/1SYAAAAAAADVJgAAAAAAAAAAAAAAAPC/"
				],
				[
					263,
					1,
					"insert",
					{
						"characters": " thickness,"
					},
					"IQAAANgmAAAAAAAA2SYAAAAAAAAAAAAAoyYAAAAAAACkJgAAAAAAAAAAAAC9IwAAAAAAAL4jAAAAAAAAAAAAANsmAAAAAAAA3CYAAAAAAAAAAAAApSYAAAAAAACmJgAAAAAAAAAAAAC+IwAAAAAAAL8jAAAAAAAAAAAAAN4mAAAAAAAA3yYAAAAAAAAAAAAApyYAAAAAAACoJgAAAAAAAAAAAAC/IwAAAAAAAMAjAAAAAAAAAAAAAOEmAAAAAAAA4iYAAAAAAAAAAAAAqSYAAAAAAACqJgAAAAAAAAAAAADAIwAAAAAAAMEjAAAAAAAAAAAAAOQmAAAAAAAA5SYAAAAAAAAAAAAAqyYAAAAAAACsJgAAAAAAAAAAAADBIwAAAAAAAMIjAAAAAAAAAAAAAOcmAAAAAAAA6CYAAAAAAAAAAAAArSYAAAAAAACuJgAAAAAAAAAAAADCIwAAAAAAAMMjAAAAAAAAAAAAAOomAAAAAAAA6yYAAAAAAAAAAAAAryYAAAAAAACwJgAAAAAAAAAAAADDIwAAAAAAAMQjAAAAAAAAAAAAAO0mAAAAAAAA7iYAAAAAAAAAAAAAsSYAAAAAAACyJgAAAAAAAAAAAADEIwAAAAAAAMUjAAAAAAAAAAAAAPAmAAAAAAAA8SYAAAAAAAAAAAAAsyYAAAAAAAC0JgAAAAAAAAAAAADFIwAAAAAAAMYjAAAAAAAAAAAAAPMmAAAAAAAA9CYAAAAAAAAAAAAAtSYAAAAAAAC2JgAAAAAAAAAAAADGIwAAAAAAAMcjAAAAAAAAAAAAAPYmAAAAAAAA9yYAAAAAAAAAAAAAtyYAAAAAAAC4JgAAAAAAAAAAAADHIwAAAAAAAMgjAAAAAAAAAAAAAA",
					"AQAAAAAAAAADAAAAvSMAAAAAAAC9IwAAAAAAAAAAAAAAAPC/oyYAAAAAAACjJgAAAAAAAAAAAAAAAPC/2CYAAAAAAADYJgAAAAAAAAAAAAAAAPC/"
				],
				[
					264,
					1,
					"insert",
					{
						"characters": " "
					},
					"AwAAAPkmAAAAAAAA+iYAAAAAAAAAAAAAuSYAAAAAAAC6JgAAAAAAAAAAAADIIwAAAAAAAMkjAAAAAAAAAAAAAA",
					"AQAAAAAAAAADAAAAyCMAAAAAAADIIwAAAAAAAAAAAAAAAPC/uSYAAAAAAAC5JgAAAAAAAAAAAAAAAPC/+SYAAAAAAAD5JgAAAAAAAAAAAAAAAPC/"
				],
				[
					266,
					1,
					"insert",
					{
						"characters": "grid_"
					},
					"DwAAAPwmAAAAAAAA/SYAAAAAAAAAAAAAuyYAAAAAAAC8JgAAAAAAAAAAAADJIwAAAAAAAMojAAAAAAAAAAAAAP8mAAAAAAAAACcAAAAAAAAAAAAAvSYAAAAAAAC+JgAAAAAAAAAAAADKIwAAAAAAAMsjAAAAAAAAAAAAAAInAAAAAAAAAycAAAAAAAAAAAAAvyYAAAAAAADAJgAAAAAAAAAAAADLIwAAAAAAAMwjAAAAAAAAAAAAAAUnAAAAAAAABicAAAAAAAAAAAAAwSYAAAAAAADCJgAAAAAAAAAAAADMIwAAAAAAAM0jAAAAAAAAAAAAAAgnAAAAAAAACScAAAAAAAAAAAAAwyYAAAAAAADEJgAAAAAAAAAAAADNIwAAAAAAAM4jAAAAAAAAAAAAAA",
					"AQAAAAAAAAADAAAAySMAAAAAAADJIwAAAAAAAAAAAAAAAPC/uyYAAAAAAAC7JgAAAAAAAAAAAAAAAPC//CYAAAAAAAD8JgAAAAAAAAAAAAAAAPC/"
				],
				[
					267,
					1,
					"insert",
					{
						"characters": "cell_size"
					},
					"GwAAAAsnAAAAAAAADCcAAAAAAAAAAAAAxSYAAAAAAADGJgAAAAAAAAAAAADOIwAAAAAAAM8jAAAAAAAAAAAAAA4nAAAAAAAADycAAAAAAAAAAAAAxyYAAAAAAADIJgAAAAAAAAAAAADPIwAAAAAAANAjAAAAAAAAAAAAABEnAAAAAAAAEicAAAAAAAAAAAAAySYAAAAAAADKJgAAAAAAAAAAAADQIwAAAAAAANEjAAAAAAAAAAAAABQnAAAAAAAAFScAAAAAAAAAAAAAyyYAAAAAAADMJgAAAAAAAAAAAADRIwAAAAAAANIjAAAAAAAAAAAAABcnAAAAAAAAGCcAAAAAAAAAAAAAzSYAAAAAAADOJgAAAAAAAAAAAADSIwAAAAAAANMjAAAAAAAAAAAAABonAAAAAAAAGycAAAAAAAAAAAAAzyYAAAAAAADQJgAAAAAAAAAAAADTIwAAAAAAANQjAAAAAAAAAAAAAB0nAAAAAAAAHicAAAAAAAAAAAAA0SYAAAAAAADSJgAAAAAAAAAAAADUIwAAAAAAANUjAAAAAAAAAAAAACAnAAAAAAAAIScAAAAAAAAAAAAA0yYAAAAAAADUJgAAAAAAAAAAAADVIwAAAAAAANYjAAAAAAAAAAAAACMnAAAAAAAAJCcAAAAAAAAAAAAA1SYAAAAAAADWJgAAAAAAAAAAAADWIwAAAAAAANcjAAAAAAAAAAAAAA",
					"AQAAAAAAAAADAAAAziMAAAAAAADOIwAAAAAAAAAAAAAAAPC/xSYAAAAAAADFJgAAAAAAAAAAAAAAAPC/CycAAAAAAAALJwAAAAAAAAAAAAAAAPC/"
				],
				[
					279,
					1,
					"left_delete",
					null,
					"AQAAACsnAAAAAAAAKycAAAAAAAASAAAAZHJhd19hcnJvd19vbl9ncmlk",
					"AQAAAAAAAAABAAAAKycAAAAAAAA9JwAAAAAAAAAAAAAAAPC/"
				],
				[
					286,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAAHYjAAAAAAAAdyMAAAAAAAAAAAAAdyMAAAAAAAB4IwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdiMAAAAAAAB2IwAAAAAAAAAAAAAAAPC/"
				],
				[
					287,
					1,
					"insert",
					{
						"characters": " f32"
					},
					"BAAAAHgjAAAAAAAAeSMAAAAAAAAAAAAAeSMAAAAAAAB6IwAAAAAAAAAAAAB6IwAAAAAAAHsjAAAAAAAAAAAAAHsjAAAAAAAAfCMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeCMAAAAAAAB4IwAAAAAAAAAAAAAAAPC/"
				],
				[
					295,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAABQjAAAAAAAAFSMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFCMAAAAAAAAUIwAAAAAAAAAAAAAAAPC/"
				],
				[
					296,
					1,
					"paste",
					null,
					"AQAAABUjAAAAAAAA/SMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFSMAAAAAAAAVIwAAAAAAAAAAAAAAAPC/"
				],
				[
					311,
					1,
					"insert",
					{
						"characters": "color,"
					},
					"BgAAALgnAAAAAAAAuScAAAAAAAAAAAAAuScAAAAAAAC6JwAAAAAAAAAAAAC6JwAAAAAAALsnAAAAAAAAAAAAALsnAAAAAAAAvCcAAAAAAAAAAAAAvCcAAAAAAAC9JwAAAAAAAAAAAAC9JwAAAAAAAL4nAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuCcAAAAAAAC4JwAAAAAAAAAAAAAAAPC/"
				],
				[
					312,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAL4nAAAAAAAAvycAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvicAAAAAAAC+JwAAAAAAAAAAAAAAAPC/"
				],
				[
					316,
					1,
					"insert",
					{
						"characters": "color,"
					},
					"BgAAAA4oAAAAAAAADygAAAAAAAAAAAAADygAAAAAAAAQKAAAAAAAAAAAAAAQKAAAAAAAABEoAAAAAAAAAAAAABEoAAAAAAAAEigAAAAAAAAAAAAAEigAAAAAAAATKAAAAAAAAAAAAAATKAAAAAAAABQoAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADigAAAAAAAAOKAAAAAAAAAAAAAAAAPC/"
				],
				[
					317,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABQoAAAAAAAAFSgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFCgAAAAAAAAUKAAAAAAAAAAAAAAAAPC/"
				],
				[
					327,
					1,
					"insert",
					{
						"characters": " f32"
					},
					"BAAAAIYlAAAAAAAAhyUAAAAAAAAAAAAAhyUAAAAAAACIJQAAAAAAAAAAAACIJQAAAAAAAIklAAAAAAAAAAAAAIklAAAAAAAAiiUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhiUAAAAAAACGJQAAAAAAAAAAAAAAAPC/"
				],
				[
					328,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIolAAAAAAAAiyUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiiUAAAAAAACKJQAAAAAAAAAAAAAAAPC/"
				],
				[
					330,
					2,
					"delete_word",
					{
						"forward": false
					},
					"AgAAAJAlAAAAAAAAkCUAAAAAAAABAAAAMI8lAAAAAAAAjyUAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAAkSUAAAAAAACRJQAAAAAAAAAAAAAAAPC/"
				],
				[
					331,
					2,
					"left_delete",
					null,
					"AgAAAI4lAAAAAAAAjiUAAAAAAAABAAAAMI0lAAAAAAAAjSUAAAAAAAABAAAAMQ",
					"AQAAAAAAAAABAAAAjyUAAAAAAACPJQAAAAAAAAAAAAAAAPC/"
				],
				[
					332,
					1,
					"insert",
					{
						"characters": "0.2"
					},
					"AwAAAI0lAAAAAAAAjiUAAAAAAAAAAAAAjiUAAAAAAACPJQAAAAAAAAAAAACPJQAAAAAAAJAlAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjSUAAAAAAACNJQAAAAAAAAAAAAAAAPC/"
				],
				[
					340,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAKIkAAAAAAAAoyQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoiQAAAAAAACiJAAAAAAAAAAAAAAAAPC/"
				],
				[
					341,
					1,
					"insert",
					{
						"characters": " thickness,"
					},
					"CwAAAKMkAAAAAAAApCQAAAAAAAAAAAAApCQAAAAAAAClJAAAAAAAAAAAAAClJAAAAAAAAKYkAAAAAAAAAAAAAKYkAAAAAAAApyQAAAAAAAAAAAAApyQAAAAAAACoJAAAAAAAAAAAAACoJAAAAAAAAKkkAAAAAAAAAAAAAKkkAAAAAAAAqiQAAAAAAAAAAAAAqiQAAAAAAACrJAAAAAAAAAAAAACrJAAAAAAAAKwkAAAAAAAAAAAAAKwkAAAAAAAArSQAAAAAAAAAAAAArSQAAAAAAACuJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoyQAAAAAAACjJAAAAAAAAAAAAAAAAPC/"
				],
				[
					342,
					1,
					"insert",
					{
						"characters": " color,"
					},
					"BwAAAK4kAAAAAAAAryQAAAAAAAAAAAAAryQAAAAAAACwJAAAAAAAAAAAAACwJAAAAAAAALEkAAAAAAAAAAAAALEkAAAAAAAAsiQAAAAAAAAAAAAAsiQAAAAAAACzJAAAAAAAAAAAAACzJAAAAAAAALQkAAAAAAAAAAAAALQkAAAAAAAAtSQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAriQAAAAAAACuJAAAAAAAAAAAAAAAAPC/"
				],
				[
					343,
					1,
					"insert",
					{
						"characters": " grid_cell_"
					},
					"CwAAALUkAAAAAAAAtiQAAAAAAAAAAAAAtiQAAAAAAAC3JAAAAAAAAAAAAAC3JAAAAAAAALgkAAAAAAAAAAAAALgkAAAAAAAAuSQAAAAAAAAAAAAAuSQAAAAAAAC6JAAAAAAAAAAAAAC6JAAAAAAAALskAAAAAAAAAAAAALskAAAAAAAAvCQAAAAAAAAAAAAAvCQAAAAAAAC9JAAAAAAAAAAAAAC9JAAAAAAAAL4kAAAAAAAAAAAAAL4kAAAAAAAAvyQAAAAAAAAAAAAAvyQAAAAAAADAJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtSQAAAAAAAC1JAAAAAAAAAAAAAAAAPC/"
				],
				[
					344,
					1,
					"insert",
					{
						"characters": "sew"
					},
					"AwAAAMAkAAAAAAAAwSQAAAAAAAAAAAAAwSQAAAAAAADCJAAAAAAAAAAAAADCJAAAAAAAAMMkAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwCQAAAAAAADAJAAAAAAAAAAAAAAAAPC/"
				],
				[
					345,
					2,
					"left_delete",
					null,
					"AgAAAMIkAAAAAAAAwiQAAAAAAAABAAAAd8EkAAAAAAAAwSQAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAAwyQAAAAAAADDJAAAAAAAAAAAAAAAAPC/"
				],
				[
					346,
					1,
					"insert",
					{
						"characters": "ize"
					},
					"AwAAAMEkAAAAAAAAwiQAAAAAAAAAAAAAwiQAAAAAAADDJAAAAAAAAAAAAADDJAAAAAAAAMQkAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwSQAAAAAAADBJAAAAAAAAAAAAAAAAPC/"
				],
				[
					350,
					1,
					"insert",
					{
						"characters": "\nmath."
					},
					"BgAAABMlAAAAAAAAGCUAAAAAAAAAAAAAGCUAAAAAAAAZJQAAAAAAAAAAAAAZJQAAAAAAABolAAAAAAAAAAAAABolAAAAAAAAGyUAAAAAAAAAAAAAGyUAAAAAAAAcJQAAAAAAAAAAAAAcJQAAAAAAAB0lAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEyUAAAAAAAATJQAAAAAAAAAAAAAA0IdA"
				],
				[
					351,
					1,
					"insert",
					{
						"characters": "norm"
					},
					"BAAAAB0lAAAAAAAAHiUAAAAAAAAAAAAAHiUAAAAAAAAfJQAAAAAAAAAAAAAfJQAAAAAAACAlAAAAAAAAAAAAACAlAAAAAAAAISUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHSUAAAAAAAAdJQAAAAAAAAAAAAAAAPC/"
				],
				[
					352,
					5,
					"delete_word",
					{
						"forward": false
					},
					"BQAAAB0lAAAAAAAAHSUAAAAAAAAEAAAAbm9ybRwlAAAAAAAAHCUAAAAAAAABAAAALhglAAAAAAAAGCUAAAAAAAAEAAAAbWF0aBQlAAAAAAAAFCUAAAAAAAAEAAAAICAgIBMlAAAAAAAAEyUAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAISUAAAAAAAAhJQAAAAAAAAAAAAAAAPC/"
				],
				[
					361,
					1,
					"insert",
					{
						"characters": "\nimport\"core:"
					},
					"DQAAACIAAAAAAAAAIwAAAAAAAAAAAAAAIwAAAAAAAAAkAAAAAAAAAAAAAAAkAAAAAAAAACUAAAAAAAAAAAAAACUAAAAAAAAAJgAAAAAAAAAAAAAAJgAAAAAAAAAnAAAAAAAAAAAAAAAnAAAAAAAAACgAAAAAAAAAAAAAACgAAAAAAAAAKQAAAAAAAAAAAAAAKQAAAAAAAAAqAAAAAAAAAAAAAAAqAAAAAAAAACsAAAAAAAAAAAAAACsAAAAAAAAALAAAAAAAAAAAAAAALAAAAAAAAAAtAAAAAAAAAAAAAAAtAAAAAAAAAC4AAAAAAAAAAAAAAC4AAAAAAAAALwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIgAAAAAAAAAiAAAAAAAAAAAAAAAAAPC/"
				],
				[
					362,
					1,
					"insert",
					{
						"characters": "la"
					},
					"AgAAAC8AAAAAAAAAMAAAAAAAAAAAAAAAMAAAAAAAAAAxAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALwAAAAAAAAAvAAAAAAAAAAAAAAAAAPC/"
				],
				[
					363,
					2,
					"delete_word",
					{
						"forward": false
					},
					"AgAAAC8AAAAAAAAALwAAAAAAAAACAAAAbGEuAAAAAAAAAC4AAAAAAAAAAQAAADo",
					"AQAAAAAAAAABAAAAMQAAAAAAAAAxAAAAAAAAAAAAAAAAAPC/"
				],
				[
					364,
					5,
					"left_delete",
					null,
					"BQAAAC0AAAAAAAAALQAAAAAAAAABAAAAZSwAAAAAAAAALAAAAAAAAAABAAAAcisAAAAAAAAAKwAAAAAAAAABAAAAbyoAAAAAAAAAKgAAAAAAAAABAAAAYykAAAAAAAAAKQAAAAAAAAABAAAAIg",
					"AQAAAAAAAAABAAAALgAAAAAAAAAuAAAAAAAAAAAAAAAAAPC/"
				],
				[
					365,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACkAAAAAAAAAKgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKQAAAAAAAAApAAAAAAAAAAAAAAAAAPC/"
				],
				[
					366,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAACoAAAAAAAAALAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKgAAAAAAAAAqAAAAAAAAAAAAAAAAAPC/"
				],
				[
					367,
					1,
					"insert",
					{
						"characters": "core:marg"
					},
					"CQAAACsAAAAAAAAALAAAAAAAAAAAAAAALAAAAAAAAAAtAAAAAAAAAAAAAAAtAAAAAAAAAC4AAAAAAAAAAAAAAC4AAAAAAAAALwAAAAAAAAAAAAAALwAAAAAAAAAwAAAAAAAAAAAAAAAwAAAAAAAAADEAAAAAAAAAAAAAADEAAAAAAAAAMgAAAAAAAAAAAAAAMgAAAAAAAAAzAAAAAAAAAAAAAAAzAAAAAAAAADQAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKwAAAAAAAAArAAAAAAAAAAAAAAAAAPC/"
				],
				[
					368,
					2,
					"left_delete",
					null,
					"AgAAADMAAAAAAAAAMwAAAAAAAAABAAAAZzIAAAAAAAAAMgAAAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAANAAAAAAAAAA0AAAAAAAAAAAAAAAAAPC/"
				],
				[
					369,
					1,
					"insert",
					{
						"characters": "th/la"
					},
					"BQAAADIAAAAAAAAAMwAAAAAAAAAAAAAAMwAAAAAAAAA0AAAAAAAAAAAAAAA0AAAAAAAAADUAAAAAAAAAAAAAADUAAAAAAAAANgAAAAAAAAAAAAAANgAAAAAAAAA3AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMgAAAAAAAAAyAAAAAAAAAAAAAAAAAPC/"
				],
				[
					370,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":5,\"session_name\":\"odin\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "linalg"
					},
					"AgAAADUAAAAAAAAANQAAAAAAAAACAAAAbGE1AAAAAAAAADsAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANwAAAAAAAAA3AAAAAAAAAAAAAAAAAPC/"
				],
				[
					373,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAADwAAAAAAAAAPQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPAAAAAAAAAA8AAAAAAAAAAAAAAAAAPC/"
				],
				[
					380,
					1,
					"insert",
					{
						"characters": "linalg"
					},
					"BgAAAD8lAAAAAAAAQCUAAAAAAAAEAAAAbWF0aEAlAAAAAAAAQSUAAAAAAAAAAAAAQSUAAAAAAABCJQAAAAAAAAAAAABCJQAAAAAAAEMlAAAAAAAAAAAAAEMlAAAAAAAARCUAAAAAAAAAAAAARCUAAAAAAABFJQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPyUAAAAAAABDJQAAAAAAAAAAAAAAAPC/"
				],
				[
					389,
					1,
					"insert",
					{
						"characters": "\ndir_noem"
					},
					"CQAAAC4lAAAAAAAAMyUAAAAAAAAAAAAAMyUAAAAAAAA0JQAAAAAAAAAAAAA0JQAAAAAAADUlAAAAAAAAAAAAADUlAAAAAAAANiUAAAAAAAAAAAAANiUAAAAAAAA3JQAAAAAAAAAAAAA3JQAAAAAAADglAAAAAAAAAAAAADglAAAAAAAAOSUAAAAAAAAAAAAAOSUAAAAAAAA6JQAAAAAAAAAAAAA6JQAAAAAAADslAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALiUAAAAAAAAuJQAAAAAAAAAAAAAAAPC/"
				],
				[
					390,
					1,
					"insert",
					{
						"characters": " :="
					},
					"AwAAADslAAAAAAAAPCUAAAAAAAAAAAAAPCUAAAAAAAA9JQAAAAAAAAAAAAA9JQAAAAAAAD4lAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOyUAAAAAAAA7JQAAAAAAAAAAAAAAAPC/"
				],
				[
					391,
					1,
					"insert",
					{
						"characters": " 1"
					},
					"AgAAAD4lAAAAAAAAPyUAAAAAAAAAAAAAPyUAAAAAAABAJQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPiUAAAAAAAA+JQAAAAAAAAAAAAAAAPC/"
				],
				[
					393,
					1,
					"left_delete",
					null,
					"AQAAADklAAAAAAAAOSUAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAAOiUAAAAAAAA6JQAAAAAAAAAAAAAAAPC/"
				],
				[
					394,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAADklAAAAAAAAOiUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOSUAAAAAAAA5JQAAAAAAAAAAAAAAAPC/"
				],
				[
					396,
					1,
					"insert",
					{
						"characters": "[2]f32{"
					},
					"BwAAAD8lAAAAAAAAQCUAAAAAAAAAAAAAQCUAAAAAAABBJQAAAAAAAAAAAABBJQAAAAAAAEIlAAAAAAAAAAAAAEIlAAAAAAAAQyUAAAAAAAAAAAAAQyUAAAAAAABEJQAAAAAAAAAAAABEJQAAAAAAAEUlAAAAAAAAAAAAAEUlAAAAAAAARiUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPyUAAAAAAAA/JQAAAAAAAAAAAAAAAPC/"
				],
				[
					398,
					1,
					"insert",
					{
						"characters": ",1}"
					},
					"AwAAAEclAAAAAAAASCUAAAAAAAAAAAAASCUAAAAAAABJJQAAAAAAAAAAAABJJQAAAAAAAEolAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARyUAAAAAAABHJQAAAAAAAAAAAAAAAPC/"
				],
				[
					401,
					1,
					"insert",
					{
						"characters": "/"
					},
					"AQAAAGYlAAAAAAAAZyUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZiUAAAAAAABmJQAAAAAAAAAAAAAAgHNA"
				],
				[
					402,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AQAAAE8lAAAAAAAAUiUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZyUAAAAAAABnJQAAAAAAAAAAAAAAAPC/"
				],
				[
					408,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"IgAAAIgoAAAAAAAAiygAAAAAAAAAAAAAMigAAAAAAAA1KAAAAAAAAAAAAADdJwAAAAAAAOAnAAAAAAAAAAAAAK4nAAAAAAAAsScAAAAAAAAAAAAApycAAAAAAACqJwAAAAAAAAAAAABUJwAAAAAAAFcnAAAAAAAAAAAAAAEnAAAAAAAABCcAAAAAAAAAAAAA7CYAAAAAAADvJgAAAAAAAAAAAADNJgAAAAAAANAmAAAAAAAAAAAAAMYmAAAAAAAAySYAAAAAAAAAAAAAdSYAAAAAAAB4JgAAAAAAAAAAAAAkJgAAAAAAACcmAAAAAAAAAAAAABAmAAAAAAAAEyYAAAAAAAAAAAAA8SUAAAAAAAD0JQAAAAAAAAAAAADUJQAAAAAAANclAAAAAAAAAAAAAKglAAAAAAAAqyUAAAAAAAAAAAAAdiUAAAAAAAB5JQAAAAAAAAAAAABLJQAAAAAAAE4lAAAAAAAAAAAAAC8lAAAAAAAAMiUAAAAAAAAAAAAAGCUAAAAAAAAbJQAAAAAAAAAAAADiJAAAAAAAAOUkAAAAAAAAAAAAAJ0kAAAAAAAAoCQAAAAAAAAAAAAAhCQAAAAAAACHJAAAAAAAAAAAAAAaJAAAAAAAAB0kAAAAAAAAAAAAABYkAAAAAAAAGSQAAAAAAAAAAAAAAyQAAAAAAAAGJAAAAAAAAAAAAADZIwAAAAAAANwjAAAAAAAAAAAAANcjAAAAAAAA2iMAAAAAAAAAAAAApiMAAAAAAACpIwAAAAAAAAAAAACjIwAAAAAAAKYjAAAAAAAAAAAAAJAjAAAAAAAAkyMAAAAAAAAAAAAAZCMAAAAAAABnIwAAAAAAAAAAAABiIwAAAAAAAGUjAAAAAAAAAAAAADEjAAAAAAAANCMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMCMAAAAAAACMKAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "source/game.odin",
			"settings":
			{
				"buffer_size": 36920,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					2697,
					1,
					"insert",
					{
						"characters": " _"
					},
					"AgAAABFYAAAAAAAAElgAAAAAAAAAAAAAElgAAAAAAAATWAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEVgAAAAAAAARWAAAAAAAAAAAAAAAAPC/"
				],
				[
					2698,
					1,
					"insert",
					{
						"characters": " :="
					},
					"AwAAABNYAAAAAAAAFFgAAAAAAAAAAAAAFFgAAAAAAAAVWAAAAAAAAAAAAAAVWAAAAAAAABZYAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAE1gAAAAAAAATWAAAAAAAAAAAAAAAAPC/"
				],
				[
					2699,
					1,
					"insert",
					{
						"characters": " ha_get"
					},
					"BwAAABZYAAAAAAAAF1gAAAAAAAAAAAAAF1gAAAAAAAAYWAAAAAAAAAAAAAAYWAAAAAAAABlYAAAAAAAAAAAAABlYAAAAAAAAGlgAAAAAAAAAAAAAGlgAAAAAAAAbWAAAAAAAAAAAAAAbWAAAAAAAABxYAAAAAAAAAAAAABxYAAAAAAAAHVgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFlgAAAAAAAAWWAAAAAAAAAAAAAAAAPC/"
				],
				[
					2706,
					1,
					"insert",
					{
						"characters": "\norbiting_ang"
					},
					"DQAAAEsIAAAAAAAATQgAAAAAAAAAAAAATQgAAAAAAABOCAAAAAAAAAAAAABOCAAAAAAAAE8IAAAAAAAAAAAAAE8IAAAAAAAAUAgAAAAAAAAAAAAAUAgAAAAAAABRCAAAAAAAAAAAAABRCAAAAAAAAFIIAAAAAAAAAAAAAFIIAAAAAAAAUwgAAAAAAAAAAAAAUwgAAAAAAABUCAAAAAAAAAAAAABUCAAAAAAAAFUIAAAAAAAAAAAAAFUIAAAAAAAAVggAAAAAAAAAAAAAVggAAAAAAABXCAAAAAAAAAAAAABXCAAAAAAAAFgIAAAAAAAAAAAAAFgIAAAAAAAAWQgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASwgAAAAAAABLCAAAAAAAAAAAAAAAAPC/"
				],
				[
					2707,
					1,
					"insert",
					{
						"characters": "le"
					},
					"AgAAAFkIAAAAAAAAWggAAAAAAAAAAAAAWggAAAAAAABbCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWQgAAAAAAABZCAAAAAAAAAAAAAAAAPC/"
				],
				[
					2708,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAAFsIAAAAAAAAXAgAAAAAAAAAAAAAXAgAAAAAAABdCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWwgAAAAAAABbCAAAAAAAAAAAAAAAAPC/"
				],
				[
					2709,
					1,
					"insert",
					{
						"characters": " f32,"
					},
					"BQAAAF0IAAAAAAAAXggAAAAAAAAAAAAAXggAAAAAAABfCAAAAAAAAAAAAABfCAAAAAAAAGAIAAAAAAAAAAAAAGAIAAAAAAAAYQgAAAAAAAAAAAAAYQgAAAAAAABiCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXQgAAAAAAABdCAAAAAAAAAAAAAAAAPC/"
				],
				[
					2719,
					1,
					"insert",
					{
						"characters": " in"
					},
					"AwAAAAJYAAAAAAAAA1gAAAAAAAAAAAAAA1gAAAAAAAAEWAAAAAAAAAAAAAAEWAAAAAAAAAVYAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAlgAAAAAAAACWAAAAAAAAAAAAAAAAPC/"
				],
				[
					2720,
					1,
					"insert",
					{
						"characters": " entity_behaviors"
					},
					"EQAAAAVYAAAAAAAABlgAAAAAAAAAAAAABlgAAAAAAAAHWAAAAAAAAAAAAAAHWAAAAAAAAAhYAAAAAAAAAAAAAAhYAAAAAAAACVgAAAAAAAAAAAAACVgAAAAAAAAKWAAAAAAAAAAAAAAKWAAAAAAAAAtYAAAAAAAAAAAAAAtYAAAAAAAADFgAAAAAAAAAAAAADFgAAAAAAAANWAAAAAAAAAAAAAANWAAAAAAAAA5YAAAAAAAAAAAAAA5YAAAAAAAAD1gAAAAAAAAAAAAAD1gAAAAAAAAQWAAAAAAAAAAAAAAQWAAAAAAAABFYAAAAAAAAAAAAABFYAAAAAAAAElgAAAAAAAAAAAAAElgAAAAAAAATWAAAAAAAAAAAAAATWAAAAAAAABRYAAAAAAAAAAAAABRYAAAAAAAAFVgAAAAAAAAAAAAAFVgAAAAAAAAWWAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABVgAAAAAAAAFWAAAAAAAAAAAAAAAAPC/"
				],
				[
					2725,
					1,
					"left_delete",
					null,
					"AQAAAAxYAAAAAAAADFgAAAAAAAABAAAAXw",
					"AQAAAAAAAAABAAAADVgAAAAAAAANWAAAAAAAAAAAAAAAAPC/"
				],
				[
					2726,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAAxYAAAAAAAADVgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADFgAAAAAAAAMWAAAAAAAAAAAAAAAAPC/"
				],
				[
					2732,
					1,
					"insert",
					{
						"characters": "origin_pos"
					},
					"CgAAAC5YAAAAAAAAL1gAAAAAAAAaAAAAcGFyZW50X2VudGl0eSwgXyA6PSBoYV9nZXQvWAAAAAAAADBYAAAAAAAAAAAAADBYAAAAAAAAMVgAAAAAAAAAAAAAMVgAAAAAAAAyWAAAAAAAAAAAAAAyWAAAAAAAADNYAAAAAAAAAAAAADNYAAAAAAAANFgAAAAAAAAAAAAANFgAAAAAAAA1WAAAAAAAAAAAAAA1WAAAAAAAADZYAAAAAAAAAAAAADZYAAAAAAAAN1gAAAAAAAAAAAAAN1gAAAAAAAA4WAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASFgAAAAAAAAuWAAAAAAAAAAAAAAAAPC/"
				],
				[
					2733,
					1,
					"insert",
					{
						"characters": " :="
					},
					"AwAAADhYAAAAAAAAOVgAAAAAAAAAAAAAOVgAAAAAAAA6WAAAAAAAAAAAAAA6WAAAAAAAADtYAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOFgAAAAAAAA4WAAAAAAAAAAAAAAAAPC/"
				],
				[
					2734,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADtYAAAAAAAAPFgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAO1gAAAAAAAA7WAAAAAAAAAAAAAAAAPC/"
				],
				[
					2736,
					1,
					"insert",
					{
						"characters": "\nparent"
					},
					"BwAAACJYAAAAAAAALlgAAAAAAAAAAAAALlgAAAAAAAAvWAAAAAAAAAAAAAAvWAAAAAAAADBYAAAAAAAAAAAAADBYAAAAAAAAMVgAAAAAAAAAAAAAMVgAAAAAAAAyWAAAAAAAAAAAAAAyWAAAAAAAADNYAAAAAAAAAAAAADNYAAAAAAAANFgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIlgAAAAAAAAiWAAAAAAAAAAAAAAAkHhA"
				],
				[
					2737,
					1,
					"insert",
					{
						"characters": "_"
					},
					"AQAAADRYAAAAAAAANVgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANFgAAAAAAAA0WAAAAAAAAAAAAAAAAPC/"
				],
				[
					2738,
					1,
					"left_delete",
					null,
					"AQAAADRYAAAAAAAANFgAAAAAAAABAAAAXw",
					"AQAAAAAAAAABAAAANVgAAAAAAAA1WAAAAAAAAAAAAAAAAPC/"
				],
				[
					2739,
					1,
					"insert",
					{
						"characters": " :="
					},
					"AwAAADRYAAAAAAAANVgAAAAAAAAAAAAANVgAAAAAAAA2WAAAAAAAAAAAAAA2WAAAAAAAADdYAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANFgAAAAAAAA0WAAAAAAAAAAAAAAAAPC/"
				],
				[
					2740,
					1,
					"insert",
					{
						"characters": " ha_get"
					},
					"BwAAADdYAAAAAAAAOFgAAAAAAAAAAAAAOFgAAAAAAAA5WAAAAAAAAAAAAAA5WAAAAAAAADpYAAAAAAAAAAAAADpYAAAAAAAAO1gAAAAAAAAAAAAAO1gAAAAAAAA8WAAAAAAAAAAAAAA8WAAAAAAAAD1YAAAAAAAAAAAAAD1YAAAAAAAAPlgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAN1gAAAAAAAA3WAAAAAAAAAAAAAAAAPC/"
				],
				[
					2741,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAD5YAAAAAAAAQFgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPlgAAAAAAAA+WAAAAAAAAAAAAAAAAPC/"
				],
				[
					2742,
					1,
					"insert",
					{
						"characters": "entities"
					},
					"CAAAAD9YAAAAAAAAQFgAAAAAAAAAAAAAQFgAAAAAAABBWAAAAAAAAAAAAABBWAAAAAAAAEJYAAAAAAAAAAAAAEJYAAAAAAAAQ1gAAAAAAAAAAAAAQ1gAAAAAAABEWAAAAAAAAAAAAABEWAAAAAAAAEVYAAAAAAAAAAAAAEVYAAAAAAAARlgAAAAAAAAAAAAARlgAAAAAAABHWAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAP1gAAAAAAAA/WAAAAAAAAAAAAAAAAPC/"
				],
				[
					2744,
					1,
					"insert",
					{
						"characters": "&"
					},
					"AQAAAD9YAAAAAAAAQFgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAP1gAAAAAAAA/WAAAAAAAAAAAAAAAAPC/"
				],
				[
					2746,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAEhYAAAAAAAASVgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASFgAAAAAAABIWAAAAAAAAAAAAAAAAPC/"
				],
				[
					2747,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAElYAAAAAAAASlgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASVgAAAAAAABJWAAAAAAAAAAAAAAAAPC/"
				],
				[
					2749,
					1,
					"left_delete",
					null,
					"AQAAAD9YAAAAAAAAP1gAAAAAAAABAAAAJg",
					"AQAAAAAAAAABAAAAQFgAAAAAAABAWAAAAAAAAAAAAAAAAPC/"
				],
				[
					2752,
					2,
					"left_delete",
					null,
					"AgAAAEhYAAAAAAAASFgAAAAAAAABAAAAIEdYAAAAAAAAR1gAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAASVgAAAAAAABJWAAAAAAAAAAAAAAAAPC/"
				],
				[
					2753,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAEdYAAAAAAAASFgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAR1gAAAAAAABHWAAAAAAAAAAAAAAAAPC/"
				],
				[
					2754,
					1,
					"insert",
					{
						"characters": " entity."
					},
					"CAAAAEhYAAAAAAAASVgAAAAAAAAAAAAASVgAAAAAAABKWAAAAAAAAAAAAABKWAAAAAAAAEtYAAAAAAAAAAAAAEtYAAAAAAAATFgAAAAAAAAAAAAATFgAAAAAAABNWAAAAAAAAAAAAABNWAAAAAAAAE5YAAAAAAAAAAAAAE5YAAAAAAAAT1gAAAAAAAAAAAAAT1gAAAAAAABQWAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASFgAAAAAAABIWAAAAAAAAAAAAAAAAPC/"
				],
				[
					2755,
					1,
					"insert",
					{
						"characters": "paren"
					},
					"BQAAAFBYAAAAAAAAUVgAAAAAAAAAAAAAUVgAAAAAAABSWAAAAAAAAAAAAABSWAAAAAAAAFNYAAAAAAAAAAAAAFNYAAAAAAAAVFgAAAAAAAAAAAAAVFgAAAAAAABVWAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUFgAAAAAAABQWAAAAAAAAAAAAAAAAPC/"
				],
				[
					2759,
					1,
					"insert_completion",
					{
						"completion": "parent_entity_handle",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "parent_entity_handle"
					},
					"AgAAAFBYAAAAAAAAUFgAAAAAAAAFAAAAcGFyZW5QWAAAAAAAAGRYAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVVgAAAAAAABVWAAAAAAAAAAAAAAAAPC/"
				],
				[
					2762,
					1,
					"insert",
					{
						"characters": "parent.pos"
					},
					"CgAAAH9YAAAAAAAAgFgAAAAAAAAAAAAAgFgAAAAAAACBWAAAAAAAAAAAAACBWAAAAAAAAIJYAAAAAAAAAAAAAIJYAAAAAAAAg1gAAAAAAAAAAAAAg1gAAAAAAACEWAAAAAAAAAAAAACEWAAAAAAAAIVYAAAAAAAAAAAAAIVYAAAAAAAAhlgAAAAAAAAAAAAAhlgAAAAAAACHWAAAAAAAAAAAAACHWAAAAAAAAIhYAAAAAAAAAAAAAIhYAAAAAAAAiVgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAf1gAAAAAAAB/WAAAAAAAAAAAAAAAsIpA"
				],
				[
					2764,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAIlYAAAAAAAAlVgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiVgAAAAAAACJWAAAAAAAAAAAAAAAAPC/"
				],
				[
					2768,
					1,
					"insert",
					{
						"characters": ","
					},
					"AgAAADRYAAAAAAAANVgAAAAAAAAAAAAAi1gAAAAAAACLWAAAAAAAAAsAAAAgICAgICAgCQkJCQ",
					"AQAAAAAAAAABAAAANFgAAAAAAAA0WAAAAAAAAAAAAAAAAPC/"
				],
				[
					2769,
					1,
					"insert",
					{
						"characters": " _"
					},
					"AgAAADVYAAAAAAAANlgAAAAAAAAAAAAANlgAAAAAAAA3WAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANVgAAAAAAAA1WAAAAAAAAAAAAAAAAPC/"
				],
				[
					2773,
					1,
					"reindent",
					null,
					"AQAAAI1YAAAAAAAAmFgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjVgAAAAAAACNWAAAAAAAAAAAAAAAAPC/"
				],
				[
					2774,
					1,
					"insert",
					{
						"characters": "entity."
					},
					"BwAAAJhYAAAAAAAAmVgAAAAAAAAAAAAAmVgAAAAAAACaWAAAAAAAAAAAAACaWAAAAAAAAJtYAAAAAAAAAAAAAJtYAAAAAAAAnFgAAAAAAAAAAAAAnFgAAAAAAACdWAAAAAAAAAAAAACdWAAAAAAAAJ5YAAAAAAAAAAAAAJ5YAAAAAAAAn1gAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmFgAAAAAAACYWAAAAAAAAAAAAAAAAPC/"
				],
				[
					2775,
					1,
					"left_delete",
					null,
					"AQAAAJ5YAAAAAAAAnlgAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAAn1gAAAAAAACfWAAAAAAAAAAAAAAAAPC/"
				],
				[
					2776,
					1,
					"insert",
					{
						"characters": "_ptr.orbiti"
					},
					"CwAAAJ5YAAAAAAAAn1gAAAAAAAAAAAAAn1gAAAAAAACgWAAAAAAAAAAAAACgWAAAAAAAAKFYAAAAAAAAAAAAAKFYAAAAAAAAolgAAAAAAAAAAAAAolgAAAAAAACjWAAAAAAAAAAAAACjWAAAAAAAAKRYAAAAAAAAAAAAAKRYAAAAAAAApVgAAAAAAAAAAAAApVgAAAAAAACmWAAAAAAAAAAAAACmWAAAAAAAAKdYAAAAAAAAAAAAAKdYAAAAAAAAqFgAAAAAAAAAAAAAqFgAAAAAAACpWAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnlgAAAAAAACeWAAAAAAAAAAAAAAAAPC/"
				],
				[
					2777,
					1,
					"insert",
					{
						"characters": "ng_angle"
					},
					"CAAAAKlYAAAAAAAAqlgAAAAAAAAAAAAAqlgAAAAAAACrWAAAAAAAAAAAAACrWAAAAAAAAKxYAAAAAAAAAAAAAKxYAAAAAAAArVgAAAAAAAAAAAAArVgAAAAAAACuWAAAAAAAAAAAAACuWAAAAAAAAK9YAAAAAAAAAAAAAK9YAAAAAAAAsFgAAAAAAAAAAAAAsFgAAAAAAACxWAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqVgAAAAAAACpWAAAAAAAAAAAAAAAAPC/"
				],
				[
					2778,
					1,
					"insert",
					{
						"characters": " +="
					},
					"AwAAALFYAAAAAAAAslgAAAAAAAAAAAAAslgAAAAAAACzWAAAAAAAAAAAAACzWAAAAAAAALRYAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsVgAAAAAAACxWAAAAAAAAAAAAAAAAPC/"
				],
				[
					2779,
					1,
					"insert",
					{
						"characters": " orb"
					},
					"BAAAALRYAAAAAAAAtVgAAAAAAAAAAAAAtVgAAAAAAAC2WAAAAAAAAAAAAAC2WAAAAAAAALdYAAAAAAAAAAAAALdYAAAAAAAAuFgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtFgAAAAAAAC0WAAAAAAAAAAAAAAAAPC/"
				],
				[
					2780,
					1,
					"insert",
					{
						"characters": "iting_dir"
					},
					"CQAAALhYAAAAAAAAuVgAAAAAAAAAAAAAuVgAAAAAAAC6WAAAAAAAAAAAAAC6WAAAAAAAALtYAAAAAAAAAAAAALtYAAAAAAAAvFgAAAAAAAAAAAAAvFgAAAAAAAC9WAAAAAAAAAAAAAC9WAAAAAAAAL5YAAAAAAAAAAAAAL5YAAAAAAAAv1gAAAAAAAAAAAAAv1gAAAAAAADAWAAAAAAAAAAAAADAWAAAAAAAAMFYAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuFgAAAAAAAC4WAAAAAAAAAAAAAAAAPC/"
				],
				[
					2781,
					1,
					"insert",
					{
						"characters": " *"
					},
					"AgAAAMFYAAAAAAAAwlgAAAAAAAAAAAAAwlgAAAAAAADDWAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwVgAAAAAAADBWAAAAAAAAAAAAAAAAPC/"
				],
				[
					2782,
					1,
					"insert",
					{
						"characters": " s"
					},
					"AgAAAMNYAAAAAAAAxFgAAAAAAAAAAAAAxFgAAAAAAADFWAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAw1gAAAAAAADDWAAAAAAAAAAAAAAAAPC/"
				],
				[
					2783,
					1,
					"left_delete",
					null,
					"AQAAAMRYAAAAAAAAxFgAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAAxVgAAAAAAADFWAAAAAAAAAAAAAAAAPC/"
				],
				[
					2784,
					1,
					"insert",
					{
						"characters": "entity.speed"
					},
					"DAAAAMRYAAAAAAAAxVgAAAAAAAAAAAAAxVgAAAAAAADGWAAAAAAAAAAAAADGWAAAAAAAAMdYAAAAAAAAAAAAAMdYAAAAAAAAyFgAAAAAAAAAAAAAyFgAAAAAAADJWAAAAAAAAAAAAADJWAAAAAAAAMpYAAAAAAAAAAAAAMpYAAAAAAAAy1gAAAAAAAAAAAAAy1gAAAAAAADMWAAAAAAAAAAAAADMWAAAAAAAAM1YAAAAAAAAAAAAAM1YAAAAAAAAzlgAAAAAAAAAAAAAzlgAAAAAAADPWAAAAAAAAAAAAADPWAAAAAAAANBYAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxFgAAAAAAADEWAAAAAAAAAAAAAAAAPC/"
				],
				[
					2785,
					1,
					"insert",
					{
						"characters": " *"
					},
					"AgAAANBYAAAAAAAA0VgAAAAAAAAAAAAA0VgAAAAAAADSWAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0FgAAAAAAADQWAAAAAAAAAAAAAAAAPC/"
				],
				[
					2786,
					1,
					"insert",
					{
						"characters": " frea"
					},
					"BQAAANJYAAAAAAAA01gAAAAAAAAAAAAA01gAAAAAAADUWAAAAAAAAAAAAADUWAAAAAAAANVYAAAAAAAAAAAAANVYAAAAAAAA1lgAAAAAAAAAAAAA1lgAAAAAAADXWAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0lgAAAAAAADSWAAAAAAAAAAAAAAAAPC/"
				],
				[
					2787,
					2,
					"left_delete",
					null,
					"AgAAANZYAAAAAAAA1lgAAAAAAAABAAAAYdVYAAAAAAAA1VgAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAA11gAAAAAAADXWAAAAAAAAAAAAAAAAPC/"
				],
				[
					2788,
					1,
					"insert",
					{
						"characters": "ame_time"
					},
					"CAAAANVYAAAAAAAA1lgAAAAAAAAAAAAA1lgAAAAAAADXWAAAAAAAAAAAAADXWAAAAAAAANhYAAAAAAAAAAAAANhYAAAAAAAA2VgAAAAAAAAAAAAA2VgAAAAAAADaWAAAAAAAAAAAAADaWAAAAAAAANtYAAAAAAAAAAAAANtYAAAAAAAA3FgAAAAAAAAAAAAA3FgAAAAAAADdWAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1VgAAAAAAADVWAAAAAAAAAAAAAAAAPC/"
				],
				[
					2795,
					1,
					"insert",
					{
						"characters": "entity.orbiting"
					},
					"DwAAALVYAAAAAAAAtlgAAAAAAAAMAAAAb3JiaXRpbmdfZGlytlgAAAAAAAC3WAAAAAAAAAAAAAC3WAAAAAAAALhYAAAAAAAAAAAAALhYAAAAAAAAuVgAAAAAAAAAAAAAuVgAAAAAAAC6WAAAAAAAAAAAAAC6WAAAAAAAALtYAAAAAAAAAAAAALtYAAAAAAAAvFgAAAAAAAAAAAAAvFgAAAAAAAC9WAAAAAAAAAAAAAC9WAAAAAAAAL5YAAAAAAAAAAAAAL5YAAAAAAAAv1gAAAAAAAAAAAAAv1gAAAAAAADAWAAAAAAAAAAAAADAWAAAAAAAAMFYAAAAAAAAAAAAAMFYAAAAAAAAwlgAAAAAAAAAAAAAwlgAAAAAAADDWAAAAAAAAAAAAADDWAAAAAAAAMRYAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtVgAAAAAAADBWAAAAAAAAAAAAAAAAPC/"
				],
				[
					2796,
					1,
					"insert",
					{
						"characters": "_dir"
					},
					"BAAAAMRYAAAAAAAAxVgAAAAAAAAAAAAAxVgAAAAAAADGWAAAAAAAAAAAAADGWAAAAAAAAMdYAAAAAAAAAAAAAMdYAAAAAAAAyFgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxFgAAAAAAADEWAAAAAAAAAAAAAAAAPC/"
				],
				[
					2805,
					1,
					"insert",
					{
						"characters": "f32("
					},
					"BAAAALVYAAAAAAAAtlgAAAAAAAAAAAAAtlgAAAAAAAC3WAAAAAAAAAAAAAC3WAAAAAAAALhYAAAAAAAAAAAAALhYAAAAAAAAuVgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtVgAAAAAAAC1WAAAAAAAAAAAAAAAAPC/"
				],
				[
					2807,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAMxYAAAAAAAAzVgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzFgAAAAAAADMWAAAAAAAAAAAAAAAAPC/"
				],
				[
					2810,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAOlYAAAAAAAA9VgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6VgAAAAAAADpWAAAAAAAAP///////+9/"
				],
				[
					2811,
					1,
					"insert",
					{
						"characters": "\noffset"
					},
					"CAAAAPVYAAAAAAAAAVkAAAAAAAAAAAAA6lgAAAAAAADqWAAAAAAAAAsAAAAgICAgICAgCQkJCfZYAAAAAAAA91gAAAAAAAAAAAAA91gAAAAAAAD4WAAAAAAAAAAAAAD4WAAAAAAAAPlYAAAAAAAAAAAAAPlYAAAAAAAA+lgAAAAAAAAAAAAA+lgAAAAAAAD7WAAAAAAAAAAAAAD7WAAAAAAAAPxYAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9VgAAAAAAAD1WAAAAAAAAAAAAAAAAPC/"
				],
				[
					2812,
					1,
					"insert",
					{
						"characters": " :="
					},
					"AwAAAPxYAAAAAAAA/VgAAAAAAAAAAAAA/VgAAAAAAAD+WAAAAAAAAAAAAAD+WAAAAAAAAP9YAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/FgAAAAAAAD8WAAAAAAAAAAAAAAAAPC/"
				],
				[
					2813,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAP9YAAAAAAAAAFkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/1gAAAAAAAD/WAAAAAAAAAAAAAAAAPC/"
				],
				[
					2814,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAABZAAAAAAAAAlkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAFkAAAAAAAAAWQAAAAAAAAAAAAAAAPC/"
				],
				[
					2815,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AQAAAAFZAAAAAAAAAlkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAVkAAAAAAAABWQAAAAAAAAAAAAAAAPC/"
				],
				[
					2819,
					1,
					"insert",
					{
						"characters": "f32"
					},
					"AwAAAANZAAAAAAAABFkAAAAAAAAAAAAABFkAAAAAAAAFWQAAAAAAAAAAAAAFWQAAAAAAAAZZAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAA1kAAAAAAAADWQAAAAAAAAAAAAAA0HdA"
				],
				[
					2827,
					1,
					"insert",
					{
						"characters": "entity_ptr"
					},
					"CgAAAPZYAAAAAAAA91gAAAAAAAAQAAAAb2Zmc2V0IDo9IFsyXWYzMvdYAAAAAAAA+FgAAAAAAAAAAAAA+FgAAAAAAAD5WAAAAAAAAAAAAAD5WAAAAAAAAPpYAAAAAAAAAAAAAPpYAAAAAAAA+1gAAAAAAAAAAAAA+1gAAAAAAAD8WAAAAAAAAAAAAAD8WAAAAAAAAP1YAAAAAAAAAAAAAP1YAAAAAAAA/lgAAAAAAAAAAAAA/lgAAAAAAAD/WAAAAAAAAAAAAAD/WAAAAAAAAABZAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABlkAAAAAAAD2WAAAAAAAAAAAAAAAAPC/"
				],
				[
					2828,
					1,
					"insert",
					{
						"characters": ".pos"
					},
					"BAAAAABZAAAAAAAAAVkAAAAAAAAAAAAAAVkAAAAAAAACWQAAAAAAAAAAAAACWQAAAAAAAANZAAAAAAAAAAAAAANZAAAAAAAABFkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAFkAAAAAAAAAWQAAAAAAAAAAAAAAAPC/"
				],
				[
					2829,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAARZAAAAAAAABVkAAAAAAAAAAAAABVkAAAAAAAAGWQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABFkAAAAAAAAEWQAAAAAAAAAAAAAAAPC/"
				],
				[
					2830,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAZZAAAAAAAAB1kAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABlkAAAAAAAAGWQAAAAAAAAAAAAAAAPC/"
				],
				[
					2831,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAAdZAAAAAAAACVkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAB1kAAAAAAAAHWQAAAAAAAAAAAAAAAPC/"
				],
				[
					2832,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AQAAAAhZAAAAAAAACVkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACFkAAAAAAAAIWQAAAAAAAAAAAAAAAPC/"
				],
				[
					2834,
					1,
					"insert",
					{
						"characters": "f32"
					},
					"AwAAAApZAAAAAAAAC1kAAAAAAAAAAAAAC1kAAAAAAAAMWQAAAAAAAAAAAAAMWQAAAAAAAA1ZAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAClkAAAAAAAAKWQAAAAAAAAAAAAAAAPC/"
				],
				[
					2835,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAA1ZAAAAAAAADlkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADVkAAAAAAAANWQAAAAAAAAAAAAAAAPC/"
				],
				[
					2836,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAA5ZAAAAAAAAEFkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADlkAAAAAAAAOWQAAAAAAAAAAAAAAAPC/"
				],
				[
					2837,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BAAAAA9ZAAAAAAAAG1kAAAAAAAAAAAAAG1kAAAAAAAAnWQAAAAAAAAAAAAAQWQAAAAAAABBZAAAAAAAACwAAACAgICAgICAJCQkJEFkAAAAAAAAcWQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAD1kAAAAAAAAPWQAAAAAAAAAAAAAAAPC/"
				],
				[
					2838,
					1,
					"insert",
					{
						"characters": "math.cos"
					},
					"CAAAABxZAAAAAAAAHVkAAAAAAAAAAAAAHVkAAAAAAAAeWQAAAAAAAAAAAAAeWQAAAAAAAB9ZAAAAAAAAAAAAAB9ZAAAAAAAAIFkAAAAAAAAAAAAAIFkAAAAAAAAhWQAAAAAAAAAAAAAhWQAAAAAAACJZAAAAAAAAAAAAACJZAAAAAAAAI1kAAAAAAAAAAAAAI1kAAAAAAAAkWQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHFkAAAAAAAAcWQAAAAAAAAAAAAAAAPC/"
				],
				[
					2839,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAACRZAAAAAAAAJlkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJFkAAAAAAAAkWQAAAAAAAAAAAAAAAPC/"
				],
				[
					2840,
					1,
					"insert",
					{
						"characters": "or"
					},
					"AgAAACVZAAAAAAAAJlkAAAAAAAAAAAAAJlkAAAAAAAAnWQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJVkAAAAAAAAlWQAAAAAAAAAAAAAAAPC/"
				],
				[
					2841,
					2,
					"left_delete",
					null,
					"AgAAACZZAAAAAAAAJlkAAAAAAAABAAAAciVZAAAAAAAAJVkAAAAAAAABAAAAbw",
					"AQAAAAAAAAABAAAAJ1kAAAAAAAAnWQAAAAAAAAAAAAAAAPC/"
				],
				[
					2842,
					1,
					"insert",
					{
						"characters": "entity.orbitin"
					},
					"DgAAACVZAAAAAAAAJlkAAAAAAAAAAAAAJlkAAAAAAAAnWQAAAAAAAAAAAAAnWQAAAAAAAChZAAAAAAAAAAAAAChZAAAAAAAAKVkAAAAAAAAAAAAAKVkAAAAAAAAqWQAAAAAAAAAAAAAqWQAAAAAAACtZAAAAAAAAAAAAACtZAAAAAAAALFkAAAAAAAAAAAAALFkAAAAAAAAtWQAAAAAAAAAAAAAtWQAAAAAAAC5ZAAAAAAAAAAAAAC5ZAAAAAAAAL1kAAAAAAAAAAAAAL1kAAAAAAAAwWQAAAAAAAAAAAAAwWQAAAAAAADFZAAAAAAAAAAAAADFZAAAAAAAAMlkAAAAAAAAAAAAAMlkAAAAAAAAzWQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJVkAAAAAAAAlWQAAAAAAAAAAAAAAAPC/"
				],
				[
					2843,
					1,
					"insert",
					{
						"characters": "g_angle,"
					},
					"CAAAADNZAAAAAAAANFkAAAAAAAAAAAAANFkAAAAAAAA1WQAAAAAAAAAAAAA1WQAAAAAAADZZAAAAAAAAAAAAADZZAAAAAAAAN1kAAAAAAAAAAAAAN1kAAAAAAAA4WQAAAAAAAAAAAAA4WQAAAAAAADlZAAAAAAAAAAAAADlZAAAAAAAAOlkAAAAAAAAAAAAAOlkAAAAAAAA7WQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAM1kAAAAAAAAzWQAAAAAAAAAAAAAAAPC/"
				],
				[
					2844,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADtZAAAAAAAAPFkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAO1kAAAAAAAA7WQAAAAAAAAAAAAAAAPC/"
				],
				[
					2845,
					2,
					"left_delete",
					null,
					"AgAAADtZAAAAAAAAO1kAAAAAAAABAAAAIDpZAAAAAAAAOlkAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAAPFkAAAAAAAA8WQAAAAAAAAAAAAAAAPC/"
				],
				[
					2847,
					1,
					"insert",
					{
						"characters": " *"
					},
					"AgAAADtZAAAAAAAAPFkAAAAAAAAAAAAAPFkAAAAAAAA9WQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAO1kAAAAAAAA7WQAAAAAAAAAAAAAAAPC/"
				],
				[
					2848,
					1,
					"insert",
					{
						"characters": " entity."
					},
					"CAAAAD1ZAAAAAAAAPlkAAAAAAAAAAAAAPlkAAAAAAAA/WQAAAAAAAAAAAAA/WQAAAAAAAEBZAAAAAAAAAAAAAEBZAAAAAAAAQVkAAAAAAAAAAAAAQVkAAAAAAABCWQAAAAAAAAAAAABCWQAAAAAAAENZAAAAAAAAAAAAAENZAAAAAAAARFkAAAAAAAAAAAAARFkAAAAAAABFWQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPVkAAAAAAAA9WQAAAAAAAAAAAAAAAPC/"
				],
				[
					2849,
					1,
					"insert",
					{
						"characters": "orbiting"
					},
					"CAAAAEVZAAAAAAAARlkAAAAAAAAAAAAARlkAAAAAAABHWQAAAAAAAAAAAABHWQAAAAAAAEhZAAAAAAAAAAAAAEhZAAAAAAAASVkAAAAAAAAAAAAASVkAAAAAAABKWQAAAAAAAAAAAABKWQAAAAAAAEtZAAAAAAAAAAAAAEtZAAAAAAAATFkAAAAAAAAAAAAATFkAAAAAAABNWQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARVkAAAAAAABFWQAAAAAAAAAAAAAAAPC/"
				],
				[
					2852,
					1,
					"insert_completion",
					{
						"completion": "orbiting_distance",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "orbiting_distance"
					},
					"AgAAAEVZAAAAAAAARVkAAAAAAAAIAAAAb3JiaXRpbmdFWQAAAAAAAFZZAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATVkAAAAAAABNWQAAAAAAAAAAAAAAAPC/"
				],
				[
					2853,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAFZZAAAAAAAAV1kAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVlkAAAAAAABWWQAAAAAAAAAAAAAAAPC/"
				],
				[
					2854,
					1,
					"insert",
					{
						"characters": "\nmath.sin"
					},
					"CQAAAFdZAAAAAAAAZFkAAAAAAAAAAAAAZFkAAAAAAABlWQAAAAAAAAAAAABlWQAAAAAAAGZZAAAAAAAAAAAAAGZZAAAAAAAAZ1kAAAAAAAAAAAAAZ1kAAAAAAABoWQAAAAAAAAAAAABoWQAAAAAAAGlZAAAAAAAAAAAAAGlZAAAAAAAAalkAAAAAAAAAAAAAalkAAAAAAABrWQAAAAAAAAAAAABrWQAAAAAAAGxZAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAV1kAAAAAAABXWQAAAAAAAAAAAAAAAPC/"
				],
				[
					2855,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAGxZAAAAAAAAblkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbFkAAAAAAABsWQAAAAAAAAAAAAAAAPC/"
				],
				[
					2856,
					1,
					"insert",
					{
						"characters": "entity.orbiting"
					},
					"DwAAAG1ZAAAAAAAAblkAAAAAAAAAAAAAblkAAAAAAABvWQAAAAAAAAAAAABvWQAAAAAAAHBZAAAAAAAAAAAAAHBZAAAAAAAAcVkAAAAAAAAAAAAAcVkAAAAAAAByWQAAAAAAAAAAAAByWQAAAAAAAHNZAAAAAAAAAAAAAHNZAAAAAAAAdFkAAAAAAAAAAAAAdFkAAAAAAAB1WQAAAAAAAAAAAAB1WQAAAAAAAHZZAAAAAAAAAAAAAHZZAAAAAAAAd1kAAAAAAAAAAAAAd1kAAAAAAAB4WQAAAAAAAAAAAAB4WQAAAAAAAHlZAAAAAAAAAAAAAHlZAAAAAAAAelkAAAAAAAAAAAAAelkAAAAAAAB7WQAAAAAAAAAAAAB7WQAAAAAAAHxZAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbVkAAAAAAABtWQAAAAAAAAAAAAAAAPC/"
				],
				[
					2857,
					1,
					"insert",
					{
						"characters": "_angle"
					},
					"BgAAAHxZAAAAAAAAfVkAAAAAAAAAAAAAfVkAAAAAAAB+WQAAAAAAAAAAAAB+WQAAAAAAAH9ZAAAAAAAAAAAAAH9ZAAAAAAAAgFkAAAAAAAAAAAAAgFkAAAAAAACBWQAAAAAAAAAAAACBWQAAAAAAAIJZAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfFkAAAAAAAB8WQAAAAAAAAAAAAAAAPC/"
				],
				[
					2859,
					1,
					"insert",
					{
						"characters": " *"
					},
					"AgAAAINZAAAAAAAAhFkAAAAAAAAAAAAAhFkAAAAAAACFWQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAg1kAAAAAAACDWQAAAAAAAAAAAAAAAPC/"
				],
				[
					2860,
					1,
					"insert",
					{
						"characters": " entity.orb"
					},
					"CwAAAIVZAAAAAAAAhlkAAAAAAAAAAAAAhlkAAAAAAACHWQAAAAAAAAAAAACHWQAAAAAAAIhZAAAAAAAAAAAAAIhZAAAAAAAAiVkAAAAAAAAAAAAAiVkAAAAAAACKWQAAAAAAAAAAAACKWQAAAAAAAItZAAAAAAAAAAAAAItZAAAAAAAAjFkAAAAAAAAAAAAAjFkAAAAAAACNWQAAAAAAAAAAAACNWQAAAAAAAI5ZAAAAAAAAAAAAAI5ZAAAAAAAAj1kAAAAAAAAAAAAAj1kAAAAAAACQWQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhVkAAAAAAACFWQAAAAAAAAAAAAAAAPC/"
				],
				[
					2861,
					1,
					"insert",
					{
						"characters": "iting_s"
					},
					"BwAAAJBZAAAAAAAAkVkAAAAAAAAAAAAAkVkAAAAAAACSWQAAAAAAAAAAAACSWQAAAAAAAJNZAAAAAAAAAAAAAJNZAAAAAAAAlFkAAAAAAAAAAAAAlFkAAAAAAACVWQAAAAAAAAAAAACVWQAAAAAAAJZZAAAAAAAAAAAAAJZZAAAAAAAAl1kAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkFkAAAAAAACQWQAAAAAAAAAAAAAAAPC/"
				],
				[
					2862,
					1,
					"left_delete",
					null,
					"AQAAAJZZAAAAAAAAllkAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAAl1kAAAAAAACXWQAAAAAAAAAAAAAAAPC/"
				],
				[
					2863,
					1,
					"insert",
					{
						"characters": "distance,"
					},
					"CQAAAJZZAAAAAAAAl1kAAAAAAAAAAAAAl1kAAAAAAACYWQAAAAAAAAAAAACYWQAAAAAAAJlZAAAAAAAAAAAAAJlZAAAAAAAAmlkAAAAAAAAAAAAAmlkAAAAAAACbWQAAAAAAAAAAAACbWQAAAAAAAJxZAAAAAAAAAAAAAJxZAAAAAAAAnVkAAAAAAAAAAAAAnVkAAAAAAACeWQAAAAAAAAAAAACeWQAAAAAAAJ9ZAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAllkAAAAAAACWWQAAAAAAAAAAAAAAAPC/"
				],
				[
					2874,
					1,
					"left_delete",
					null,
					"AQAAACJYAAAAAAAAIlgAAAAAAABqAAAACiAgICAgICAJCQkJcGFyZW50LCBfIDo9IGhhX2dldChlbnRpdGllcywgZW50aXR5LnBhcmVudF9lbnRpdHlfaGFuZGxlKQogICAgICAgCQkJCW9yaWdpbl9wb3MgOj0gcGFyZW50LnBvcw",
					"AQAAAAAAAAABAAAAjFgAAAAAAAAiWAAAAAAAAAAAAAAAAPC/"
				],
				[
					2884,
					1,
					"left_delete",
					null,
					"AQAAAEkTAAAAAAAASRMAAAAAAAABAAAANA",
					"AQAAAAAAAAABAAAAShMAAAAAAABKEwAAAAAAAAAAAAAAAPC/"
				],
				[
					2885,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AQAAAEkTAAAAAAAAShMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASRMAAAAAAABJEwAAAAAAAAAAAAAAAPC/"
				],
				[
					2889,
					1,
					"insert",
					{
						"characters": "\nif"
					},
					"AwAAAIl3AAAAAAAAk3cAAAAAAAAAAAAAk3cAAAAAAACUdwAAAAAAAAAAAACUdwAAAAAAAJV3AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiXcAAAAAAACJdwAAAAAAAAAAAAAAAPC/"
				],
				[
					2890,
					1,
					"insert",
					{
						"characters": " entity"
					},
					"BwAAAJV3AAAAAAAAlncAAAAAAAAAAAAAlncAAAAAAACXdwAAAAAAAAAAAACXdwAAAAAAAJh3AAAAAAAAAAAAAJh3AAAAAAAAmXcAAAAAAAAAAAAAmXcAAAAAAACadwAAAAAAAAAAAACadwAAAAAAAJt3AAAAAAAAAAAAAJt3AAAAAAAAnHcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlXcAAAAAAACVdwAAAAAAAAAAAAAAAPC/"
				],
				[
					2891,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAJZ3AAAAAAAAlncAAAAAAAAGAAAAZW50aXR5",
					"AQAAAAAAAAABAAAAnHcAAAAAAACcdwAAAAAAAAAAAAAAAPC/"
				],
				[
					2892,
					1,
					"insert",
					{
						"characters": ".Orb"
					},
					"BAAAAJZ3AAAAAAAAl3cAAAAAAAAAAAAAl3cAAAAAAACYdwAAAAAAAAAAAACYdwAAAAAAAJl3AAAAAAAAAAAAAJl3AAAAAAAAmncAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlncAAAAAAACWdwAAAAAAAAAAAAAAAPC/"
				],
				[
					2893,
					1,
					"insert",
					{
						"characters": "iting"
					},
					"BQAAAJp3AAAAAAAAm3cAAAAAAAAAAAAAm3cAAAAAAACcdwAAAAAAAAAAAACcdwAAAAAAAJ13AAAAAAAAAAAAAJ13AAAAAAAAnncAAAAAAAAAAAAAnncAAAAAAACfdwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmncAAAAAAACadwAAAAAAAAAAAAAAAPC/"
				],
				[
					2894,
					1,
					"insert_completion",
					{
						"completion": "Orbiting_Around_Parent",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "Orbiting_Around_Parent"
					},
					"AgAAAJd3AAAAAAAAl3cAAAAAAAAIAAAAT3JiaXRpbmeXdwAAAAAAAK13AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAn3cAAAAAAACfdwAAAAAAAAAAAAAAAPC/"
				],
				[
					2895,
					1,
					"insert",
					{
						"characters": " in"
					},
					"AwAAAK13AAAAAAAArncAAAAAAAAAAAAArncAAAAAAACvdwAAAAAAAAAAAACvdwAAAAAAALB3AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArXcAAAAAAACtdwAAAAAAAAAAAAAAAPC/"
				],
				[
					2896,
					1,
					"insert",
					{
						"characters": " entity.behav"
					},
					"DQAAALB3AAAAAAAAsXcAAAAAAAAAAAAAsXcAAAAAAACydwAAAAAAAAAAAACydwAAAAAAALN3AAAAAAAAAAAAALN3AAAAAAAAtHcAAAAAAAAAAAAAtHcAAAAAAAC1dwAAAAAAAAAAAAC1dwAAAAAAALZ3AAAAAAAAAAAAALZ3AAAAAAAAt3cAAAAAAAAAAAAAt3cAAAAAAAC4dwAAAAAAAAAAAAC4dwAAAAAAALl3AAAAAAAAAAAAALl3AAAAAAAAuncAAAAAAAAAAAAAuncAAAAAAAC7dwAAAAAAAAAAAAC7dwAAAAAAALx3AAAAAAAAAAAAALx3AAAAAAAAvXcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsHcAAAAAAACwdwAAAAAAAAAAAAAAAPC/"
				],
				[
					2897,
					1,
					"insert",
					{
						"characters": "iors"
					},
					"BAAAAL13AAAAAAAAvncAAAAAAAAAAAAAvncAAAAAAAC/dwAAAAAAAAAAAAC/dwAAAAAAAMB3AAAAAAAAAAAAAMB3AAAAAAAAwXcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvXcAAAAAAAC9dwAAAAAAAAAAAAAAAPC/"
				],
				[
					2898,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAMF3AAAAAAAAy3cAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwXcAAAAAAADBdwAAAAAAAAAAAAAAAPC/"
				],
				[
					2899,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAMt3AAAAAAAAzXcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAy3cAAAAAAADLdwAAAAAAAAAAAAAAAPC/"
				],
				[
					2900,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BAAAAMx3AAAAAAAA1ncAAAAAAAAAAAAA1ncAAAAAAADgdwAAAAAAAAAAAADNdwAAAAAAAM13AAAAAAAACQAAACAgICAgCQkJCc13AAAAAAAA13cAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzHcAAAAAAADMdwAAAAAAAAAAAAAAAPC/"
				],
				[
					2901,
					1,
					"insert",
					{
						"characters": "rl"
					},
					"AgAAANd3AAAAAAAA2HcAAAAAAAAAAAAA2HcAAAAAAADZdwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA13cAAAAAAADXdwAAAAAAAAAAAAAAAPC/"
				],
				[
					2905,
					1,
					"insert",
					{
						"characters": "grid.draw"
					},
					"CQAAANl3AAAAAAAA2ncAAAAAAAAAAAAA2ncAAAAAAADbdwAAAAAAAAAAAADbdwAAAAAAANx3AAAAAAAAAAAAANx3AAAAAAAA3XcAAAAAAAAAAAAA3XcAAAAAAADedwAAAAAAAAAAAADedwAAAAAAAN93AAAAAAAAAAAAAN93AAAAAAAA4HcAAAAAAAAAAAAA4HcAAAAAAADhdwAAAAAAAAAAAADhdwAAAAAAAOJ3AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2XcAAAAAAADZdwAAAAAAAAAAAAAAAPC/"
				],
				[
					2907,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAMx3AAAAAAAA13cAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzHcAAAAAAADMdwAAAAAAAAAAAAAAQHlA"
				],
				[
					2908,
					1,
					"insert",
					{
						"characters": "root_parent"
					},
					"CwAAANd3AAAAAAAA2HcAAAAAAAAAAAAA2HcAAAAAAADZdwAAAAAAAAAAAADZdwAAAAAAANp3AAAAAAAAAAAAANp3AAAAAAAA23cAAAAAAAAAAAAA23cAAAAAAADcdwAAAAAAAAAAAADcdwAAAAAAAN13AAAAAAAAAAAAAN13AAAAAAAA3ncAAAAAAAAAAAAA3ncAAAAAAADfdwAAAAAAAAAAAADfdwAAAAAAAOB3AAAAAAAAAAAAAOB3AAAAAAAA4XcAAAAAAAAAAAAA4XcAAAAAAADidwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA13cAAAAAAADXdwAAAAAAAAAAAAAAAPC/"
				],
				[
					2909,
					1,
					"insert",
					{
						"characters": "_pos"
					},
					"BAAAAOJ3AAAAAAAA43cAAAAAAAAAAAAA43cAAAAAAADkdwAAAAAAAAAAAADkdwAAAAAAAOV3AAAAAAAAAAAAAOV3AAAAAAAA5ncAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4ncAAAAAAADidwAAAAAAAAAAAAAAAPC/"
				],
				[
					2910,
					1,
					"insert",
					{
						"characters": " :="
					},
					"AwAAAOZ3AAAAAAAA53cAAAAAAAAAAAAA53cAAAAAAADodwAAAAAAAAAAAADodwAAAAAAAOl3AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5ncAAAAAAADmdwAAAAAAAAAAAAAAAPC/"
				],
				[
					2911,
					1,
					"insert",
					{
						"characters": " g"
					},
					"AgAAAOl3AAAAAAAA6ncAAAAAAAAAAAAA6ncAAAAAAADrdwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6XcAAAAAAADpdwAAAAAAAAAAAAAAAPC/"
				],
				[
					2912,
					1,
					"left_delete",
					null,
					"AQAAAOp3AAAAAAAA6ncAAAAAAAABAAAAZw",
					"AQAAAAAAAAABAAAA63cAAAAAAADrdwAAAAAAAAAAAAAAAPC/"
				],
				[
					2913,
					1,
					"insert",
					{
						"characters": "entity_get_root"
					},
					"DwAAAOp3AAAAAAAA63cAAAAAAAAAAAAA63cAAAAAAADsdwAAAAAAAAAAAADsdwAAAAAAAO13AAAAAAAAAAAAAO13AAAAAAAA7ncAAAAAAAAAAAAA7ncAAAAAAADvdwAAAAAAAAAAAADvdwAAAAAAAPB3AAAAAAAAAAAAAPB3AAAAAAAA8XcAAAAAAAAAAAAA8XcAAAAAAADydwAAAAAAAAAAAADydwAAAAAAAPN3AAAAAAAAAAAAAPN3AAAAAAAA9HcAAAAAAAAAAAAA9HcAAAAAAAD1dwAAAAAAAAAAAAD1dwAAAAAAAPZ3AAAAAAAAAAAAAPZ3AAAAAAAA93cAAAAAAAAAAAAA93cAAAAAAAD4dwAAAAAAAAAAAAD4dwAAAAAAAPl3AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6ncAAAAAAADqdwAAAAAAAAAAAAAAAPC/"
				],
				[
					2914,
					1,
					"insert",
					{
						"characters": "_pos"
					},
					"BAAAAPl3AAAAAAAA+ncAAAAAAAAAAAAA+ncAAAAAAAD7dwAAAAAAAAAAAAD7dwAAAAAAAPx3AAAAAAAAAAAAAPx3AAAAAAAA/XcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+XcAAAAAAAD5dwAAAAAAAAAAAAAAAPC/"
				],
				[
					2915,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAP13AAAAAAAA/3cAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/XcAAAAAAAD9dwAAAAAAAAAAAAAAAPC/"
				],
				[
					2916,
					1,
					"insert",
					{
						"characters": "entity.parent"
					},
					"DQAAAP53AAAAAAAA/3cAAAAAAAAAAAAA/3cAAAAAAAAAeAAAAAAAAAAAAAAAeAAAAAAAAAF4AAAAAAAAAAAAAAF4AAAAAAAAAngAAAAAAAAAAAAAAngAAAAAAAADeAAAAAAAAAAAAAADeAAAAAAAAAR4AAAAAAAAAAAAAAR4AAAAAAAABXgAAAAAAAAAAAAABXgAAAAAAAAGeAAAAAAAAAAAAAAGeAAAAAAAAAd4AAAAAAAAAAAAAAd4AAAAAAAACHgAAAAAAAAAAAAACHgAAAAAAAAJeAAAAAAAAAAAAAAJeAAAAAAAAAp4AAAAAAAAAAAAAAp4AAAAAAAAC3gAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/ncAAAAAAAD+dwAAAAAAAAAAAAAAAPC/"
				],
				[
					2919,
					1,
					"insert_completion",
					{
						"completion": "parent_entity_handle",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "parent_entity_handle"
					},
					"AgAAAAV4AAAAAAAABXgAAAAAAAAGAAAAcGFyZW50BXgAAAAAAAAZeAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAC3gAAAAAAAALeAAAAAAAAAAAAAAAAPC/"
				],
				[
					2924,
					1,
					"insert",
					{
						"characters": "cir"
					},
					"AwAAADB4AAAAAAAAMXgAAAAAAAAAAAAAMXgAAAAAAAAyeAAAAAAAAAAAAAAyeAAAAAAAADN4AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMHgAAAAAAAAweAAAAAAAAAAAAAAAPJBA"
				],
				[
					2925,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":0,\"session_name\":\"odin\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "draw_circle_on_grid(pos: [2]f32, r: f32, color: raylib.Color, grid_cell_size: f32)"
					},
					"AgAAACx4AAAAAAAALHgAAAAAAAAHAAAAZHJhd2Npcix4AAAAAAAAQXgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAM3gAAAAAAAAzeAAAAAAAAAAAAAAAAPC/"
				],
				[
					2926,
					1,
					"insert",
					{
						"characters": "root_"
					},
					"BQAAAEB4AAAAAAAAQXgAAAAAAAAAAAAAQXgAAAAAAABCeAAAAAAAAAAAAABCeAAAAAAAAEN4AAAAAAAAAAAAAEN4AAAAAAAARHgAAAAAAAAAAAAARHgAAAAAAABFeAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQHgAAAAAAABAeAAAAAAAAAAAAAAAAPC/"
				],
				[
					2927,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":11,\"session_name\":\"odin\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "root_parent_pos"
					},
					"AgAAAEB4AAAAAAAAQHgAAAAAAAAFAAAAcm9vdF9AeAAAAAAAAE94AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARXgAAAAAAABFeAAAAAAAAAAAAAAAAPC/"
				],
				[
					2928,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAE94AAAAAAAAUHgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAT3gAAAAAAABPeAAAAAAAAAAAAAAAAPC/"
				],
				[
					2929,
					1,
					"insert",
					{
						"characters": " entity."
					},
					"CAAAAFB4AAAAAAAAUXgAAAAAAAAAAAAAUXgAAAAAAABSeAAAAAAAAAAAAABSeAAAAAAAAFN4AAAAAAAAAAAAAFN4AAAAAAAAVHgAAAAAAAAAAAAAVHgAAAAAAABVeAAAAAAAAAAAAABVeAAAAAAAAFZ4AAAAAAAAAAAAAFZ4AAAAAAAAV3gAAAAAAAAAAAAAV3gAAAAAAABYeAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUHgAAAAAAABQeAAAAAAAAAAAAAAAAPC/"
				],
				[
					2930,
					1,
					"insert",
					{
						"characters": "distance"
					},
					"CAAAAFh4AAAAAAAAWXgAAAAAAAAAAAAAWXgAAAAAAABaeAAAAAAAAAAAAABaeAAAAAAAAFt4AAAAAAAAAAAAAFt4AAAAAAAAXHgAAAAAAAAAAAAAXHgAAAAAAABdeAAAAAAAAAAAAABdeAAAAAAAAF54AAAAAAAAAAAAAF54AAAAAAAAX3gAAAAAAAAAAAAAX3gAAAAAAABgeAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWHgAAAAAAABYeAAAAAAAAAAAAAAAAPC/"
				],
				[
					2931,
					1,
					"insert_completion",
					{
						"completion": "orbiting_distance",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "orbiting_distance"
					},
					"AgAAAFh4AAAAAAAAWHgAAAAAAAAIAAAAZGlzdGFuY2VYeAAAAAAAAGl4AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYHgAAAAAAABgeAAAAAAAAAAAAAAAAPC/"
				],
				[
					2932,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAGl4AAAAAAAAangAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaXgAAAAAAABpeAAAAAAAAAAAAAAAAPC/"
				],
				[
					2933,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGp4AAAAAAAAa3gAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAangAAAAAAABqeAAAAAAAAAAAAAAAAPC/"
				],
				[
					2934,
					1,
					"insert",
					{
						"characters": "rl.R"
					},
					"BAAAAGt4AAAAAAAAbHgAAAAAAAAAAAAAbHgAAAAAAABteAAAAAAAAAAAAABteAAAAAAAAG54AAAAAAAAAAAAAG54AAAAAAAAb3gAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAa3gAAAAAAABreAAAAAAAAAAAAAAAAPC/"
				],
				[
					2935,
					1,
					"insert",
					{
						"characters": "ED"
					},
					"AgAAAG94AAAAAAAAcHgAAAAAAAAAAAAAcHgAAAAAAABxeAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAb3gAAAAAAABveAAAAAAAAAAAAAAAAPC/"
				],
				[
					2937,
					1,
					"insert",
					{
						"characters": "\nred_alp"
					},
					"CAAAABp4AAAAAAAAJXgAAAAAAAAAAAAAJXgAAAAAAAAmeAAAAAAAAAAAAAAmeAAAAAAAACd4AAAAAAAAAAAAACd4AAAAAAAAKHgAAAAAAAAAAAAAKHgAAAAAAAApeAAAAAAAAAAAAAApeAAAAAAAACp4AAAAAAAAAAAAACp4AAAAAAAAK3gAAAAAAAAAAAAAK3gAAAAAAAAseAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGngAAAAAAAAaeAAAAAAAAAAAAAAADJJA"
				],
				[
					2938,
					1,
					"insert",
					{
						"characters": "ha"
					},
					"AgAAACx4AAAAAAAALXgAAAAAAAAAAAAALXgAAAAAAAAueAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALHgAAAAAAAAseAAAAAAAAAAAAAAAAPC/"
				],
				[
					2939,
					1,
					"insert",
					{
						"characters": " :="
					},
					"AwAAAC54AAAAAAAAL3gAAAAAAAAAAAAAL3gAAAAAAAAweAAAAAAAAAAAAAAweAAAAAAAADF4AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALngAAAAAAAAueAAAAAAAAAAAAAAAAPC/"
				],
				[
					2940,
					1,
					"insert",
					{
						"characters": " rl.RED"
					},
					"BwAAADF4AAAAAAAAMngAAAAAAAAAAAAAMngAAAAAAAAzeAAAAAAAAAAAAAAzeAAAAAAAADR4AAAAAAAAAAAAADR4AAAAAAAANXgAAAAAAAAAAAAANXgAAAAAAAA2eAAAAAAAAAAAAAA2eAAAAAAAADd4AAAAAAAAAAAAADd4AAAAAAAAOHgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMXgAAAAAAAAxeAAAAAAAAAAAAAAAAPC/"
				],
				[
					2941,
					1,
					"insert",
					{
						"characters": "\nred_alph"
					},
					"CQAAADh4AAAAAAAAQ3gAAAAAAAAAAAAAQ3gAAAAAAABEeAAAAAAAAAAAAABEeAAAAAAAAEV4AAAAAAAAAAAAAEV4AAAAAAAARngAAAAAAAAAAAAARngAAAAAAABHeAAAAAAAAAAAAABHeAAAAAAAAEh4AAAAAAAAAAAAAEh4AAAAAAAASXgAAAAAAAAAAAAASXgAAAAAAABKeAAAAAAAAAAAAABKeAAAAAAAAEt4AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOHgAAAAAAAA4eAAAAAAAAAAAAAAAAPC/"
				],
				[
					2942,
					1,
					"insert",
					{
						"characters": "a.a"
					},
					"AwAAAEt4AAAAAAAATHgAAAAAAAAAAAAATHgAAAAAAABNeAAAAAAAAAAAAABNeAAAAAAAAE54AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAS3gAAAAAAABLeAAAAAAAAAAAAAAAAPC/"
				],
				[
					2943,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAE54AAAAAAAAT3gAAAAAAAAAAAAAT3gAAAAAAABQeAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATngAAAAAAABOeAAAAAAAAAAAAAAAAPC/"
				],
				[
					2944,
					1,
					"insert",
					{
						"characters": " 1"
					},
					"AgAAAFB4AAAAAAAAUXgAAAAAAAAAAAAAUXgAAAAAAABSeAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUHgAAAAAAABQeAAAAAAAAAAAAAAAAPC/"
				],
				[
					2945,
					1,
					"left_delete",
					null,
					"AQAAAFF4AAAAAAAAUXgAAAAAAAABAAAAMQ",
					"AQAAAAAAAAABAAAAUngAAAAAAABSeAAAAAAAAAAAAAAAAPC/"
				],
				[
					2946,
					1,
					"insert",
					{
						"characters": "80"
					},
					"AgAAAFF4AAAAAAAAUngAAAAAAAAAAAAAUngAAAAAAABTeAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUXgAAAAAAABReAAAAAAAAAAAAAAAAPC/"
				],
				[
					2947,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAFN4AAAAAAAAXngAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAU3gAAAAAAABTeAAAAAAAAAAAAAAAAPC/"
				],
				[
					2948,
					1,
					"insert",
					{
						"characters": "green_alph"
					},
					"CgAAAF54AAAAAAAAX3gAAAAAAAAAAAAAX3gAAAAAAABgeAAAAAAAAAAAAABgeAAAAAAAAGF4AAAAAAAAAAAAAGF4AAAAAAAAYngAAAAAAAAAAAAAYngAAAAAAABjeAAAAAAAAAAAAABjeAAAAAAAAGR4AAAAAAAAAAAAAGR4AAAAAAAAZXgAAAAAAAAAAAAAZXgAAAAAAABmeAAAAAAAAAAAAABmeAAAAAAAAGd4AAAAAAAAAAAAAGd4AAAAAAAAaHgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXngAAAAAAABeeAAAAAAAAAAAAAAAAPC/"
				],
				[
					2949,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAAGh4AAAAAAAAaXgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaHgAAAAAAABoeAAAAAAAAAAAAAAAAPC/"
				],
				[
					2950,
					1,
					"insert",
					{
						"characters": " :="
					},
					"AwAAAGl4AAAAAAAAangAAAAAAAAAAAAAangAAAAAAABreAAAAAAAAAAAAABreAAAAAAAAGx4AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaXgAAAAAAABpeAAAAAAAAAAAAAAAAPC/"
				],
				[
					2951,
					1,
					"insert",
					{
						"characters": " rl.GREEN"
					},
					"CQAAAGx4AAAAAAAAbXgAAAAAAAAAAAAAbXgAAAAAAABueAAAAAAAAAAAAABueAAAAAAAAG94AAAAAAAAAAAAAG94AAAAAAAAcHgAAAAAAAAAAAAAcHgAAAAAAABxeAAAAAAAAAAAAABxeAAAAAAAAHJ4AAAAAAAAAAAAAHJ4AAAAAAAAc3gAAAAAAAAAAAAAc3gAAAAAAAB0eAAAAAAAAAAAAAB0eAAAAAAAAHV4AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbHgAAAAAAABseAAAAAAAAAAAAAAAAPC/"
				],
				[
					2952,
					1,
					"insert",
					{
						"characters": "\ngreen_)"
					},
					"CAAAAHV4AAAAAAAAgHgAAAAAAAAAAAAAgHgAAAAAAACBeAAAAAAAAAAAAACBeAAAAAAAAIJ4AAAAAAAAAAAAAIJ4AAAAAAAAg3gAAAAAAAAAAAAAg3gAAAAAAACEeAAAAAAAAAAAAACEeAAAAAAAAIV4AAAAAAAAAAAAAIV4AAAAAAAAhngAAAAAAAAAAAAAhngAAAAAAACHeAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdXgAAAAAAAB1eAAAAAAAAAAAAAAAAPC/"
				],
				[
					2953,
					1,
					"left_delete",
					null,
					"AQAAAIZ4AAAAAAAAhngAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAh3gAAAAAAACHeAAAAAAAAAAAAAAAAPC/"
				],
				[
					2954,
					1,
					"insert",
					{
						"characters": "alpha"
					},
					"BQAAAIZ4AAAAAAAAh3gAAAAAAAAAAAAAh3gAAAAAAACIeAAAAAAAAAAAAACIeAAAAAAAAIl4AAAAAAAAAAAAAIl4AAAAAAAAingAAAAAAAAAAAAAingAAAAAAACLeAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhngAAAAAAACGeAAAAAAAAAAAAAAAAPC/"
				],
				[
					2955,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIt4AAAAAAAAjHgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAi3gAAAAAAACLeAAAAAAAAAAAAAAAAPC/"
				],
				[
					2956,
					1,
					"left_delete",
					null,
					"AQAAAIt4AAAAAAAAi3gAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAjHgAAAAAAACMeAAAAAAAAAAAAAAAAPC/"
				],
				[
					2957,
					1,
					"insert",
					{
						"characters": ".a"
					},
					"AgAAAIt4AAAAAAAAjHgAAAAAAAAAAAAAjHgAAAAAAACNeAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAi3gAAAAAAACLeAAAAAAAAAAAAAAAAPC/"
				],
				[
					2958,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAI14AAAAAAAAjngAAAAAAAAAAAAAjngAAAAAAACPeAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjXgAAAAAAACNeAAAAAAAAAAAAAAAAPC/"
				],
				[
					2959,
					1,
					"insert",
					{
						"characters": " 80"
					},
					"AwAAAI94AAAAAAAAkHgAAAAAAAAAAAAAkHgAAAAAAACReAAAAAAAAAAAAACReAAAAAAAAJJ4AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAj3gAAAAAAACPeAAAAAAAAAAAAAAAAPC/"
				],
				[
					2964,
					3,
					"delete_word",
					{
						"forward": false
					},
					"AwAAAOZ4AAAAAAAA5ngAAAAAAAADAAAAUkVE5XgAAAAAAADleAAAAAAAAAEAAAAu43gAAAAAAADjeAAAAAAAAAIAAABybA",
					"AQAAAAAAAAABAAAA6XgAAAAAAADpeAAAAAAAAAAAAAAAAPC/"
				],
				[
					2965,
					1,
					"insert",
					{
						"characters": "red_alpha"
					},
					"CQAAAON4AAAAAAAA5HgAAAAAAAAAAAAA5HgAAAAAAADleAAAAAAAAAAAAADleAAAAAAAAOZ4AAAAAAAAAAAAAOZ4AAAAAAAA53gAAAAAAAAAAAAA53gAAAAAAADoeAAAAAAAAAAAAADoeAAAAAAAAOl4AAAAAAAAAAAAAOl4AAAAAAAA6ngAAAAAAAAAAAAA6ngAAAAAAADreAAAAAAAAAAAAADreAAAAAAAAOx4AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA43gAAAAAAADjeAAAAAAAAAAAAAAAAPC/"
				],
				[
					2967,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAOx4AAAAAAAA7XgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7HgAAAAAAADseAAAAAAAAAAAAAAAAPC/"
				],
				[
					2968,
					1,
					"insert",
					{
						"characters": " 32"
					},
					"AwAAAO14AAAAAAAA7ngAAAAAAAAAAAAA7ngAAAAAAADveAAAAAAAAAAAAADveAAAAAAAAPB4AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7XgAAAAAAADteAAAAAAAAAAAAAAAAPC/"
				],
				[
					2971,
					1,
					"insert",
					{
						"characters": "\ngr"
					},
					"AwAAAPF4AAAAAAAA/HgAAAAAAAAAAAAA/HgAAAAAAAD9eAAAAAAAAAAAAAD9eAAAAAAAAP54AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8XgAAAAAAADxeAAAAAAAAAAAAAAAAPC/"
				],
				[
					2972,
					2,
					"left_delete",
					null,
					"AgAAAP14AAAAAAAA/XgAAAAAAAABAAAAcvx4AAAAAAAA/HgAAAAAAAABAAAAZw",
					"AQAAAAAAAAABAAAA/ngAAAAAAAD+eAAAAAAAAAAAAAAAAPC/"
				],
				[
					2973,
					1,
					"insert",
					{
						"characters": "rlgrid.draw_"
					},
					"DAAAAPx4AAAAAAAA/XgAAAAAAAAAAAAA/XgAAAAAAAD+eAAAAAAAAAAAAAD+eAAAAAAAAP94AAAAAAAAAAAAAP94AAAAAAAAAHkAAAAAAAAAAAAAAHkAAAAAAAABeQAAAAAAAAAAAAABeQAAAAAAAAJ5AAAAAAAAAAAAAAJ5AAAAAAAAA3kAAAAAAAAAAAAAA3kAAAAAAAAEeQAAAAAAAAAAAAAEeQAAAAAAAAV5AAAAAAAAAAAAAAV5AAAAAAAABnkAAAAAAAAAAAAABnkAAAAAAAAHeQAAAAAAAAAAAAAHeQAAAAAAAAh5AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/HgAAAAAAAD8eAAAAAAAAAAAAAAAAPC/"
				],
				[
					2974,
					2,
					"delete_word",
					{
						"forward": false
					},
					"AgAAAAN5AAAAAAAAA3kAAAAAAAAFAAAAZHJhd18CeQAAAAAAAAJ5AAAAAAAAAQAAAC4",
					"AQAAAAAAAAABAAAACHkAAAAAAAAIeQAAAAAAAAAAAAAAAPC/"
				],
				[
					2975,
					1,
					"insert",
					{
						"characters": ".draw"
					},
					"BQAAAAJ5AAAAAAAAA3kAAAAAAAAAAAAAA3kAAAAAAAAEeQAAAAAAAAAAAAAEeQAAAAAAAAV5AAAAAAAAAAAAAAV5AAAAAAAABnkAAAAAAAAAAAAABnkAAAAAAAAHeQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAnkAAAAAAAACeQAAAAAAAAAAAAAAAPC/"
				],
				[
					2981,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":2,\"session_name\":\"odin\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "draw_line_on_grid(start_pos: [2]f32, end_pos: [2]f32, thickness: f32, color: raylib.Color, grid_cell_size: f32)"
					},
					"AgAAAAN5AAAAAAAAA3kAAAAAAAAEAAAAZHJhdwN5AAAAAAAAFnkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAB3kAAAAAAAAHeQAAAAAAAAAAAAAAAPC/"
				],
				[
					2984,
					1,
					"insert",
					{
						"characters": "\nroot_enti"
					},
					"CgAAAPF4AAAAAAAA/HgAAAAAAAAAAAAA/HgAAAAAAAD9eAAAAAAAAAAAAAD9eAAAAAAAAP54AAAAAAAAAAAAAP54AAAAAAAA/3gAAAAAAAAAAAAA/3gAAAAAAAAAeQAAAAAAAAAAAAAAeQAAAAAAAAF5AAAAAAAAAAAAAAF5AAAAAAAAAnkAAAAAAAAAAAAAAnkAAAAAAAADeQAAAAAAAAAAAAADeQAAAAAAAAR5AAAAAAAAAAAAAAR5AAAAAAAABXkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8XgAAAAAAADxeAAAAAAAAP///////+9/"
				],
				[
					2985,
					1,
					"insert",
					{
						"characters": "ty_pos"
					},
					"BgAAAAV5AAAAAAAABnkAAAAAAAAAAAAABnkAAAAAAAAHeQAAAAAAAAAAAAAHeQAAAAAAAAh5AAAAAAAAAAAAAAh5AAAAAAAACXkAAAAAAAAAAAAACXkAAAAAAAAKeQAAAAAAAAAAAAAKeQAAAAAAAAt5AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABXkAAAAAAAAFeQAAAAAAAAAAAAAAAPC/"
				],
				[
					2986,
					1,
					"insert",
					{
						"characters": " :="
					},
					"AwAAAAt5AAAAAAAADHkAAAAAAAAAAAAADHkAAAAAAAANeQAAAAAAAAAAAAANeQAAAAAAAA55AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAC3kAAAAAAAALeQAAAAAAAAAAAAAAAPC/"
				],
				[
					2987,
					1,
					"insert",
					{
						"characters": " entity_get_r"
					},
					"DQAAAA55AAAAAAAAD3kAAAAAAAAAAAAAD3kAAAAAAAAQeQAAAAAAAAAAAAAQeQAAAAAAABF5AAAAAAAAAAAAABF5AAAAAAAAEnkAAAAAAAAAAAAAEnkAAAAAAAATeQAAAAAAAAAAAAATeQAAAAAAABR5AAAAAAAAAAAAABR5AAAAAAAAFXkAAAAAAAAAAAAAFXkAAAAAAAAWeQAAAAAAAAAAAAAWeQAAAAAAABd5AAAAAAAAAAAAABd5AAAAAAAAGHkAAAAAAAAAAAAAGHkAAAAAAAAZeQAAAAAAAAAAAAAZeQAAAAAAABp5AAAAAAAAAAAAABp5AAAAAAAAG3kAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADnkAAAAAAAAOeQAAAAAAAAAAAAAAAPC/"
				],
				[
					2988,
					1,
					"insert",
					{
						"characters": "oot_pos"
					},
					"BwAAABt5AAAAAAAAHHkAAAAAAAAAAAAAHHkAAAAAAAAdeQAAAAAAAAAAAAAdeQAAAAAAAB55AAAAAAAAAAAAAB55AAAAAAAAH3kAAAAAAAAAAAAAH3kAAAAAAAAgeQAAAAAAAAAAAAAgeQAAAAAAACF5AAAAAAAAAAAAACF5AAAAAAAAInkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAG3kAAAAAAAAbeQAAAAAAAAAAAAAAAPC/"
				],
				[
					2989,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAACJ5AAAAAAAAJHkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAInkAAAAAAAAieQAAAAAAAAAAAAAAAPC/"
				],
				[
					2990,
					1,
					"insert",
					{
						"characters": "entity."
					},
					"BwAAACN5AAAAAAAAJHkAAAAAAAAAAAAAJHkAAAAAAAAleQAAAAAAAAAAAAAleQAAAAAAACZ5AAAAAAAAAAAAACZ5AAAAAAAAJ3kAAAAAAAAAAAAAJ3kAAAAAAAAoeQAAAAAAAAAAAAAoeQAAAAAAACl5AAAAAAAAAAAAACl5AAAAAAAAKnkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAI3kAAAAAAAAjeQAAAAAAAAAAAAAAAPC/"
				],
				[
					2991,
					2,
					"left_delete",
					null,
					"AgAAACl5AAAAAAAAKXkAAAAAAAABAAAALih5AAAAAAAAKHkAAAAAAAABAAAAeQ",
					"AQAAAAAAAAABAAAAKnkAAAAAAAAqeQAAAAAAAAAAAAAAAPC/"
				],
				[
					2992,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAACN5AAAAAAAAI3kAAAAAAAAFAAAAZW50aXQ",
					"AQAAAAAAAAABAAAAKHkAAAAAAAAoeQAAAAAAAAAAAAAAAPC/"
				],
				[
					2993,
					1,
					"insert",
					{
						"characters": "handle"
					},
					"BgAAACN5AAAAAAAAJHkAAAAAAAAAAAAAJHkAAAAAAAAleQAAAAAAAAAAAAAleQAAAAAAACZ5AAAAAAAAAAAAACZ5AAAAAAAAJ3kAAAAAAAAAAAAAJ3kAAAAAAAAoeQAAAAAAAAAAAAAoeQAAAAAAACl5AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAI3kAAAAAAAAjeQAAAAAAAAAAAAAAAPC/"
				],
				[
					2997,
					1,
					"insert",
					{
						"characters": "root_entity_pos"
					},
					"DwAAAE55AAAAAAAAT3kAAAAAAAAAAAAAT3kAAAAAAABQeQAAAAAAAAAAAABQeQAAAAAAAFF5AAAAAAAAAAAAAFF5AAAAAAAAUnkAAAAAAAAAAAAAUnkAAAAAAABTeQAAAAAAAAAAAABTeQAAAAAAAFR5AAAAAAAAAAAAAFR5AAAAAAAAVXkAAAAAAAAAAAAAVXkAAAAAAABWeQAAAAAAAAAAAABWeQAAAAAAAFd5AAAAAAAAAAAAAFd5AAAAAAAAWHkAAAAAAAAAAAAAWHkAAAAAAABZeQAAAAAAAAAAAABZeQAAAAAAAFp5AAAAAAAAAAAAAFp5AAAAAAAAW3kAAAAAAAAAAAAAW3kAAAAAAABceQAAAAAAAAAAAABceQAAAAAAAF15AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATnkAAAAAAABOeQAAAAAAAAAAAAAAAPC/"
				],
				[
					2998,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAF15AAAAAAAAXnkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXXkAAAAAAABdeQAAAAAAAAAAAAAAAPC/"
				],
				[
					2999,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAF55AAAAAAAAX3kAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXnkAAAAAAABeeQAAAAAAAAAAAAAAAPC/"
				],
				[
					3000,
					1,
					"insert",
					{
						"characters": "parent"
					},
					"BgAAAF95AAAAAAAAYHkAAAAAAAAAAAAAYHkAAAAAAABheQAAAAAAAAAAAABheQAAAAAAAGJ5AAAAAAAAAAAAAGJ5AAAAAAAAY3kAAAAAAAAAAAAAY3kAAAAAAABkeQAAAAAAAAAAAABkeQAAAAAAAGV5AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAX3kAAAAAAABfeQAAAAAAAAAAAAAAAPC/"
				],
				[
					3001,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAF95AAAAAAAAX3kAAAAAAAAGAAAAcGFyZW50",
					"AQAAAAAAAAABAAAAZXkAAAAAAABleQAAAAAAAAAAAAAAAPC/"
				],
				[
					3002,
					1,
					"insert",
					{
						"characters": "root_parent_pos"
					},
					"DwAAAF95AAAAAAAAYHkAAAAAAAAAAAAAYHkAAAAAAABheQAAAAAAAAAAAABheQAAAAAAAGJ5AAAAAAAAAAAAAGJ5AAAAAAAAY3kAAAAAAAAAAAAAY3kAAAAAAABkeQAAAAAAAAAAAABkeQAAAAAAAGV5AAAAAAAAAAAAAGV5AAAAAAAAZnkAAAAAAAAAAAAAZnkAAAAAAABneQAAAAAAAAAAAABneQAAAAAAAGh5AAAAAAAAAAAAAGh5AAAAAAAAaXkAAAAAAAAAAAAAaXkAAAAAAABqeQAAAAAAAAAAAABqeQAAAAAAAGt5AAAAAAAAAAAAAGt5AAAAAAAAbHkAAAAAAAAAAAAAbHkAAAAAAABteQAAAAAAAAAAAABteQAAAAAAAG55AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAX3kAAAAAAABfeQAAAAAAAAAAAAAAAPC/"
				],
				[
					3003,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAG55AAAAAAAAb3kAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbnkAAAAAAABueQAAAAAAAAAAAAAAAPC/"
				],
				[
					3004,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAG95AAAAAAAAcHkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAb3kAAAAAAABveQAAAAAAAAAAAAAAAPC/"
				],
				[
					3005,
					1,
					"insert",
					{
						"characters": "0.1,"
					},
					"BAAAAHB5AAAAAAAAcXkAAAAAAAAAAAAAcXkAAAAAAAByeQAAAAAAAAAAAAByeQAAAAAAAHN5AAAAAAAAAAAAAHN5AAAAAAAAdHkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcHkAAAAAAABweQAAAAAAAAAAAAAAAPC/"
				],
				[
					3006,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHR5AAAAAAAAdXkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdHkAAAAAAAB0eQAAAAAAAAAAAAAAAPC/"
				],
				[
					3007,
					1,
					"insert",
					{
						"characters": "green"
					},
					"BQAAAHV5AAAAAAAAdnkAAAAAAAAAAAAAdnkAAAAAAAB3eQAAAAAAAAAAAAB3eQAAAAAAAHh5AAAAAAAAAAAAAHh5AAAAAAAAeXkAAAAAAAAAAAAAeXkAAAAAAAB6eQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdXkAAAAAAAB1eQAAAAAAAAAAAAAAAPC/"
				],
				[
					3008,
					1,
					"insert",
					{
						"characters": "_alphja"
					},
					"BwAAAHp5AAAAAAAAe3kAAAAAAAAAAAAAe3kAAAAAAAB8eQAAAAAAAAAAAAB8eQAAAAAAAH15AAAAAAAAAAAAAH15AAAAAAAAfnkAAAAAAAAAAAAAfnkAAAAAAAB/eQAAAAAAAAAAAAB/eQAAAAAAAIB5AAAAAAAAAAAAAIB5AAAAAAAAgXkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAenkAAAAAAAB6eQAAAAAAAAAAAAAAAPC/"
				],
				[
					3009,
					2,
					"left_delete",
					null,
					"AgAAAIB5AAAAAAAAgHkAAAAAAAABAAAAYX95AAAAAAAAf3kAAAAAAAABAAAAag",
					"AQAAAAAAAAABAAAAgXkAAAAAAACBeQAAAAAAAAAAAAAAAPC/"
				],
				[
					3010,
					1,
					"insert",
					{
						"characters": "a,"
					},
					"AgAAAH95AAAAAAAAgHkAAAAAAAAAAAAAgHkAAAAAAACBeQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAf3kAAAAAAAB/eQAAAAAAAAAAAAAAAPC/"
				],
				[
					3011,
					1,
					"insert",
					{
						"characters": " 32"
					},
					"AwAAAIF5AAAAAAAAgnkAAAAAAAAAAAAAgnkAAAAAAACDeQAAAAAAAAAAAACDeQAAAAAAAIR5AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgXkAAAAAAACBeQAAAAAAAAAAAAAAAPC/"
				],
				[
					3018,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAABIIAAAAAAAAFAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEggAAAAAAAASCAAAAAAAAAAAAAAAAPC/"
				],
				[
					3020,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAPoHAAAAAAAA/AcAAAAAAAAAAAAAFQgAAAAAAAAVCAAAAAAAAAEAAAAJ",
					"AQAAAAAAAAABAAAA+gcAAAAAAAD6BwAAAAAAAAAAAAAAAEdA"
				],
				[
					3022,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAMsHAAAAAAAAzQcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAywcAAAAAAADLBwAAAAAAAAAAAAAAAEdA"
				],
				[
					3024,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAK4HAAAAAAAAsAcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArgcAAAAAAACuBwAAAAAAAAAAAAAAAEdA"
				],
				[
					3026,
					1,
					"cut",
					null,
					"AQAAAJ8HAAAAAAAAnwcAAAAAAAAOAAAACXNwZWVkIDogZjMyLAo",
					"AQAAAAAAAAABAAAAoAcAAAAAAACgBwAAAAAAAAAAAAAAAEdA"
				],
				[
					3028,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAB0HAAAAAAAAHgcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHQcAAAAAAAAdBwAAAAAAAAAAAAAAAAAA"
				],
				[
					3030,
					1,
					"paste",
					null,
					"AQAAAB0HAAAAAAAAKwcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHQcAAAAAAAAdBwAAAAAAAAAAAAAAAAAA"
				],
				[
					3032,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAEIHAAAAAAAAQwcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQgcAAAAAAABCBwAAAAAAAAAAAAAAAAAA"
				],
				[
					3034,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAHQHAAAAAAAAdQcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdAcAAAAAAAB0BwAAAAAAAAAAAAAAAAAA"
				],
				[
					3036,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAJAHAAAAAAAAkQcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkAcAAAAAAACQBwAAAAAAAAAAAAAAAAAA"
				],
				[
					3039,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAP4GAAAAAAAAAAcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/gYAAAAAAAD+BgAAAAAAAAAAAAAAAPC/"
				],
				[
					3045,
					1,
					"cut",
					null,
					"AQAAAAUIAAAAAAAABQgAAAAAAAAaAAAACWNvbGxpZGVyIDogcmwuUmVjdGFuZ2xlLAo",
					"AQAAAAAAAAABAAAAHggAAAAAAAAeCAAAAAAAAAAAAAAAAPC/"
				],
				[
					3052,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAACwHAAAAAAAALgcAAAAAAAAAAAAA/wYAAAAAAAD/BgAAAAAAAAEAAAAJ",
					"AQAAAAAAAAABAAAALAcAAAAAAAAsBwAAAAAAAP///////+9/"
				],
				[
					3053,
					1,
					"paste",
					null,
					"AQAAACwHAAAAAAAARgcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALQcAAAAAAAAtBwAAAAAAAAAAAAAAAPC/"
				],
				[
					3056,
					3,
					"left_delete",
					null,
					"AwAAAEcHAAAAAAAARwcAAAAAAAABAAAACkYHAAAAAAAARgcAAAAAAAABAAAACUUHAAAAAAAARQcAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAASAcAAAAAAABIBwAAAAAAAAAAAAAAAEdA"
				],
				[
					3062,
					1,
					"insert",
					{
						"characters": "\nSwing"
					},
					"BgAAAMEFAAAAAAAAwwUAAAAAAAAAAAAAwwUAAAAAAADEBQAAAAAAAAAAAADEBQAAAAAAAMUFAAAAAAAAAAAAAMUFAAAAAAAAxgUAAAAAAAAAAAAAxgUAAAAAAADHBQAAAAAAAAAAAADHBQAAAAAAAMgFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwQUAAAAAAADBBQAAAAAAAAAAAAAAAPC/"
				],
				[
					3063,
					1,
					"insert",
					{
						"characters": "_Around_Par"
					},
					"CwAAAMgFAAAAAAAAyQUAAAAAAAAAAAAAyQUAAAAAAADKBQAAAAAAAAAAAADKBQAAAAAAAMsFAAAAAAAAAAAAAMsFAAAAAAAAzAUAAAAAAAAAAAAAzAUAAAAAAADNBQAAAAAAAAAAAADNBQAAAAAAAM4FAAAAAAAAAAAAAM4FAAAAAAAAzwUAAAAAAAAAAAAAzwUAAAAAAADQBQAAAAAAAAAAAADQBQAAAAAAANEFAAAAAAAAAAAAANEFAAAAAAAA0gUAAAAAAAAAAAAA0gUAAAAAAADTBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyAUAAAAAAADIBQAAAAAAAAAAAAAAAPC/"
				],
				[
					3064,
					1,
					"insert",
					{
						"characters": "ent,"
					},
					"BAAAANMFAAAAAAAA1AUAAAAAAAAAAAAA1AUAAAAAAADVBQAAAAAAAAAAAADVBQAAAAAAANYFAAAAAAAAAAAAANYFAAAAAAAA1wUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0wUAAAAAAADTBQAAAAAAAAAAAAAAAPC/"
				],
				[
					3070,
					1,
					"insert",
					{
						"characters": "\n\nswing_angle"
					},
					"DgAAAIMIAAAAAAAAhQgAAAAAAAAAAAAAhQgAAAAAAACHCAAAAAAAAAAAAACECAAAAAAAAIQIAAAAAAAAAQAAAAmGCAAAAAAAAIcIAAAAAAAAAAAAAIcIAAAAAAAAiAgAAAAAAAAAAAAAiAgAAAAAAACJCAAAAAAAAAAAAACJCAAAAAAAAIoIAAAAAAAAAAAAAIoIAAAAAAAAiwgAAAAAAAAAAAAAiwgAAAAAAACMCAAAAAAAAAAAAACMCAAAAAAAAI0IAAAAAAAAAAAAAI0IAAAAAAAAjggAAAAAAAAAAAAAjggAAAAAAACPCAAAAAAAAAAAAACPCAAAAAAAAJAIAAAAAAAAAAAAAJAIAAAAAAAAkQgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgwgAAAAAAACDCAAAAAAAAAAAAAAAAPC/"
				],
				[
					3071,
					1,
					"insert",
					{
						"characters": "_1"
					},
					"AgAAAJEIAAAAAAAAkggAAAAAAAAAAAAAkggAAAAAAACTCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkQgAAAAAAACRCAAAAAAAAAAAAAAAAPC/"
				],
				[
					3072,
					1,
					"left_delete",
					null,
					"AQAAAJIIAAAAAAAAkggAAAAAAAABAAAAMQ",
					"AQAAAAAAAAABAAAAkwgAAAAAAACTCAAAAAAAAAAAAAAAAPC/"
				],
				[
					3073,
					1,
					"insert",
					{
						"characters": "start"
					},
					"BQAAAJIIAAAAAAAAkwgAAAAAAAAAAAAAkwgAAAAAAACUCAAAAAAAAAAAAACUCAAAAAAAAJUIAAAAAAAAAAAAAJUIAAAAAAAAlggAAAAAAAAAAAAAlggAAAAAAACXCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkggAAAAAAACSCAAAAAAAAAAAAAAAAPC/"
				],
				[
					3074,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAAJcIAAAAAAAAmAgAAAAAAAAAAAAAmAgAAAAAAACZCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlwgAAAAAAACXCAAAAAAAAAAAAAAAAPC/"
				],
				[
					3075,
					1,
					"insert",
					{
						"characters": " f32,"
					},
					"BQAAAJkIAAAAAAAAmggAAAAAAAAAAAAAmggAAAAAAACbCAAAAAAAAAAAAACbCAAAAAAAAJwIAAAAAAAAAAAAAJwIAAAAAAAAnQgAAAAAAAAAAAAAnQgAAAAAAACeCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmQgAAAAAAACZCAAAAAAAAAAAAAAAAPC/"
				],
				[
					3076,
					1,
					"insert",
					{
						"characters": "\nswing_ang"
					},
					"CgAAAJ4IAAAAAAAAoAgAAAAAAAAAAAAAoAgAAAAAAAChCAAAAAAAAAAAAAChCAAAAAAAAKIIAAAAAAAAAAAAAKIIAAAAAAAAowgAAAAAAAAAAAAAowgAAAAAAACkCAAAAAAAAAAAAACkCAAAAAAAAKUIAAAAAAAAAAAAAKUIAAAAAAAApggAAAAAAAAAAAAApggAAAAAAACnCAAAAAAAAAAAAACnCAAAAAAAAKgIAAAAAAAAAAAAAKgIAAAAAAAAqQgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnggAAAAAAACeCAAAAAAAAAAAAAAAAPC/"
				],
				[
					3077,
					1,
					"insert",
					{
						"characters": "le_end"
					},
					"BgAAAKkIAAAAAAAAqggAAAAAAAAAAAAAqggAAAAAAACrCAAAAAAAAAAAAACrCAAAAAAAAKwIAAAAAAAAAAAAAKwIAAAAAAAArQgAAAAAAAAAAAAArQgAAAAAAACuCAAAAAAAAAAAAACuCAAAAAAAAK8IAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqQgAAAAAAACpCAAAAAAAAAAAAAAAAPC/"
				],
				[
					3078,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAAK8IAAAAAAAAsAgAAAAAAAAAAAAAsAgAAAAAAACxCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArwgAAAAAAACvCAAAAAAAAAAAAAAAAPC/"
				],
				[
					3079,
					1,
					"insert",
					{
						"characters": " f32,"
					},
					"BQAAALEIAAAAAAAAsggAAAAAAAAAAAAAsggAAAAAAACzCAAAAAAAAAAAAACzCAAAAAAAALQIAAAAAAAAAAAAALQIAAAAAAAAtQgAAAAAAAAAAAAAtQgAAAAAAAC2CAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsQgAAAAAAACxCAAAAAAAAAAAAAAAAPC/"
				],
				[
					3083,
					1,
					"insert",
					{
						"characters": "\n\ng2"
					},
					"BQAAAOETAAAAAAAA4xMAAAAAAAAAAAAA4xMAAAAAAADlEwAAAAAAAAAAAADiEwAAAAAAAOITAAAAAAAAAQAAAAnkEwAAAAAAAOUTAAAAAAAAAAAAAOUTAAAAAAAA5hMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4RMAAAAAAADhEwAAAAAAAAAAAAAAAPC/"
				],
				[
					3084,
					2,
					"left_delete",
					null,
					"AgAAAOUTAAAAAAAA5RMAAAAAAAABAAAAMuQTAAAAAAAA5BMAAAAAAAABAAAAZw",
					"AQAAAAAAAAABAAAA5hMAAAAAAADmEwAAAAAAAAAAAAAAAPC/"
				],
				[
					3085,
					1,
					"insert",
					{
						"characters": "swingin_g_h"
					},
					"CwAAAOQTAAAAAAAA5RMAAAAAAAAAAAAA5RMAAAAAAADmEwAAAAAAAAAAAADmEwAAAAAAAOcTAAAAAAAAAAAAAOcTAAAAAAAA6BMAAAAAAAAAAAAA6BMAAAAAAADpEwAAAAAAAAAAAADpEwAAAAAAAOoTAAAAAAAAAAAAAOoTAAAAAAAA6xMAAAAAAAAAAAAA6xMAAAAAAADsEwAAAAAAAAAAAADsEwAAAAAAAO0TAAAAAAAAAAAAAO0TAAAAAAAA7hMAAAAAAAAAAAAA7hMAAAAAAADvEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5BMAAAAAAADkEwAAAAAAAAAAAAAAAPC/"
				],
				[
					3086,
					1,
					"insert",
					{
						"characters": " :="
					},
					"AwAAAO8TAAAAAAAA8BMAAAAAAAAAAAAA8BMAAAAAAADxEwAAAAAAAAAAAADxEwAAAAAAAPITAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7xMAAAAAAADvEwAAAAAAAAAAAAAAAPC/"
				],
				[
					3087,
					1,
					"insert",
					{
						"characters": " h"
					},
					"AgAAAPITAAAAAAAA8xMAAAAAAAAAAAAA8xMAAAAAAAD0EwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8hMAAAAAAADyEwAAAAAAAAAAAAAAAPC/"
				],
				[
					3093,
					1,
					"left_delete",
					null,
					"AQAAAPMTAAAAAAAA8xMAAAAAAAABAAAAaA",
					"AQAAAAAAAAABAAAA9BMAAAAAAAD0EwAAAAAAAAAAAAAAAPC/"
				],
				[
					3094,
					1,
					"paste",
					null,
					"AQAAAPMTAAAAAAAAkBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8xMAAAAAAADzEwAAAAAAAAAAAAAAAPC/"
				],
				[
					3098,
					1,
					"left_delete",
					null,
					"AQAAAGMUAAAAAAAAYxQAAAAAAAABAAAAMg",
					"AQAAAAAAAAABAAAAZBQAAAAAAABkFAAAAAAAAAAAAAAAAPC/"
				],
				[
					3099,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAAGMUAAAAAAAAZBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYxQAAAAAAABjFAAAAAAAAAAAAAAAAPC/"
				],
				[
					3101,
					1,
					"left_delete",
					null,
					"AQAAAGMUAAAAAAAAYxQAAAAAAAABAAAAMQ",
					"AQAAAAAAAAABAAAAZBQAAAAAAABkFAAAAAAAAAAAAAAAAPC/"
				],
				[
					3102,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AQAAAGMUAAAAAAAAZBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYxQAAAAAAABjFAAAAAAAAAAAAAAAAPC/"
				],
				[
					3108,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAI4UAAAAAAAAjxQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjhQAAAAAAACOFAAAAAAAAAAAAAAAAPC/"
				],
				[
					3109,
					1,
					"insert",
					{
						"characters": " swing"
					},
					"BgAAAI8UAAAAAAAAkBQAAAAAAAAAAAAAkBQAAAAAAACRFAAAAAAAAAAAAACRFAAAAAAAAJIUAAAAAAAAAAAAAJIUAAAAAAAAkxQAAAAAAAAAAAAAkxQAAAAAAACUFAAAAAAAAAAAAACUFAAAAAAAAJUUAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjxQAAAAAAACPFAAAAAAAAAAAAAAAAPC/"
				],
				[
					3110,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":5,\"session_name\":\"odin\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "swing_angle_end"
					},
					"AgAAAJAUAAAAAAAAkBQAAAAAAAAFAAAAc3dpbmeQFAAAAAAAAJ8UAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlRQAAAAAAACVFAAAAAAAAAAAAAAAAPC/"
				],
				[
					3111,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAJ8UAAAAAAAAoBQAAAAAAAAAAAAAoBQAAAAAAAChFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnxQAAAAAAACfFAAAAAAAAAAAAAAAAPC/"
				],
				[
					3112,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKEUAAAAAAAAohQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoRQAAAAAAAChFAAAAAAAAAAAAAAAAPC/"
				],
				[
					3113,
					1,
					"insert",
					{
						"characters": "270,"
					},
					"BAAAAKIUAAAAAAAAoxQAAAAAAAAAAAAAoxQAAAAAAACkFAAAAAAAAAAAAACkFAAAAAAAAKUUAAAAAAAAAAAAAKUUAAAAAAAAphQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAohQAAAAAAACiFAAAAAAAAAAAAAAAAPC/"
				],
				[
					3114,
					1,
					"insert",
					{
						"characters": " swing_angle"
					},
					"DAAAAKYUAAAAAAAApxQAAAAAAAAAAAAApxQAAAAAAACoFAAAAAAAAAAAAACoFAAAAAAAAKkUAAAAAAAAAAAAAKkUAAAAAAAAqhQAAAAAAAAAAAAAqhQAAAAAAACrFAAAAAAAAAAAAACrFAAAAAAAAKwUAAAAAAAAAAAAAKwUAAAAAAAArRQAAAAAAAAAAAAArRQAAAAAAACuFAAAAAAAAAAAAACuFAAAAAAAAK8UAAAAAAAAAAAAAK8UAAAAAAAAsBQAAAAAAAAAAAAAsBQAAAAAAACxFAAAAAAAAAAAAACxFAAAAAAAALIUAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAphQAAAAAAACmFAAAAAAAAAAAAAAAAPC/"
				],
				[
					3115,
					1,
					"insert",
					{
						"characters": "_s"
					},
					"AgAAALIUAAAAAAAAsxQAAAAAAAAAAAAAsxQAAAAAAAC0FAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAshQAAAAAAACyFAAAAAAAAAAAAAAAAPC/"
				],
				[
					3116,
					1,
					"insert",
					{
						"characters": "tart"
					},
					"BAAAALQUAAAAAAAAtRQAAAAAAAAAAAAAtRQAAAAAAAC2FAAAAAAAAAAAAAC2FAAAAAAAALcUAAAAAAAAAAAAALcUAAAAAAAAuBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtBQAAAAAAAC0FAAAAAAAAAAAAAAAAPC/"
				],
				[
					3117,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAALgUAAAAAAAAuRQAAAAAAAAAAAAAuRQAAAAAAAC6FAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuBQAAAAAAAC4FAAAAAAAAAAAAAAAAPC/"
				],
				[
					3118,
					1,
					"insert",
					{
						"characters": " 90"
					},
					"AwAAALoUAAAAAAAAuxQAAAAAAAAAAAAAuxQAAAAAAAC8FAAAAAAAAAAAAAC8FAAAAAAAAL0UAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuhQAAAAAAAC6FAAAAAAAAAAAAAAAAPC/"
				],
				[
					3123,
					1,
					"insert",
					{
						"characters": "\n\ndegrees_to"
					},
					"DAAAAHIKAAAAAAAAcwoAAAAAAAAAAAAAcwoAAAAAAAB0CgAAAAAAAAAAAAB0CgAAAAAAAHUKAAAAAAAAAAAAAHUKAAAAAAAAdgoAAAAAAAAAAAAAdgoAAAAAAAB3CgAAAAAAAAAAAAB3CgAAAAAAAHgKAAAAAAAAAAAAAHgKAAAAAAAAeQoAAAAAAAAAAAAAeQoAAAAAAAB6CgAAAAAAAAAAAAB6CgAAAAAAAHsKAAAAAAAAAAAAAHsKAAAAAAAAfAoAAAAAAAAAAAAAfAoAAAAAAAB9CgAAAAAAAAAAAAB9CgAAAAAAAH4KAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcgoAAAAAAAByCgAAAAAAAAAAAAAAAPC/"
				],
				[
					3124,
					1,
					"insert",
					{
						"characters": "_re"
					},
					"AwAAAH4KAAAAAAAAfwoAAAAAAAAAAAAAfwoAAAAAAACACgAAAAAAAAAAAACACgAAAAAAAIEKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfgoAAAAAAAB+CgAAAAAAAAAAAAAAAPC/"
				],
				[
					3125,
					1,
					"left_delete",
					null,
					"AQAAAIAKAAAAAAAAgAoAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAAgQoAAAAAAACBCgAAAAAAAAAAAAAAAPC/"
				],
				[
					3126,
					1,
					"insert",
					{
						"characters": "adians"
					},
					"BgAAAIAKAAAAAAAAgQoAAAAAAAAAAAAAgQoAAAAAAACCCgAAAAAAAAAAAACCCgAAAAAAAIMKAAAAAAAAAAAAAIMKAAAAAAAAhAoAAAAAAAAAAAAAhAoAAAAAAACFCgAAAAAAAAAAAACFCgAAAAAAAIYKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgAoAAAAAAACACgAAAAAAAAAAAAAAAPC/"
				],
				[
					3127,
					1,
					"insert",
					{
						"characters": " ::"
					},
					"AwAAAIYKAAAAAAAAhwoAAAAAAAAAAAAAhwoAAAAAAACICgAAAAAAAAAAAACICgAAAAAAAIkKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhgoAAAAAAACGCgAAAAAAAAAAAAAAAPC/"
				],
				[
					3128,
					1,
					"insert",
					{
						"characters": " proc"
					},
					"BQAAAIkKAAAAAAAAigoAAAAAAAAAAAAAigoAAAAAAACLCgAAAAAAAAAAAACLCgAAAAAAAIwKAAAAAAAAAAAAAIwKAAAAAAAAjQoAAAAAAAAAAAAAjQoAAAAAAACOCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiQoAAAAAAACJCgAAAAAAAAAAAAAAAPC/"
				],
				[
					3129,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAI4KAAAAAAAAkAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjgoAAAAAAACOCgAAAAAAAAAAAAAAAPC/"
				],
				[
					3130,
					1,
					"insert",
					{
						"characters": "degrees"
					},
					"BwAAAI8KAAAAAAAAkAoAAAAAAAAAAAAAkAoAAAAAAACRCgAAAAAAAAAAAACRCgAAAAAAAJIKAAAAAAAAAAAAAJIKAAAAAAAAkwoAAAAAAAAAAAAAkwoAAAAAAACUCgAAAAAAAAAAAACUCgAAAAAAAJUKAAAAAAAAAAAAAJUKAAAAAAAAlgoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjwoAAAAAAACPCgAAAAAAAAAAAAAAAPC/"
				],
				[
					3131,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAAJYKAAAAAAAAlwoAAAAAAAAAAAAAlwoAAAAAAACYCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlgoAAAAAAACWCgAAAAAAAAAAAAAAAPC/"
				],
				[
					3132,
					1,
					"insert",
					{
						"characters": " f32"
					},
					"BAAAAJgKAAAAAAAAmQoAAAAAAAAAAAAAmQoAAAAAAACaCgAAAAAAAAAAAACaCgAAAAAAAJsKAAAAAAAAAAAAAJsKAAAAAAAAnAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmAoAAAAAAACYCgAAAAAAAAAAAAAAAPC/"
				],
				[
					3134,
					1,
					"insert",
					{
						"characters": " ->"
					},
					"AwAAAJ0KAAAAAAAAngoAAAAAAAAAAAAAngoAAAAAAACfCgAAAAAAAAAAAACfCgAAAAAAAKAKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnQoAAAAAAACdCgAAAAAAAAAAAAAAAPC/"
				],
				[
					3135,
					1,
					"insert",
					{
						"characters": " f32"
					},
					"BAAAAKAKAAAAAAAAoQoAAAAAAAAAAAAAoQoAAAAAAACiCgAAAAAAAAAAAACiCgAAAAAAAKMKAAAAAAAAAAAAAKMKAAAAAAAApAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoAoAAAAAAACgCgAAAAAAAAAAAAAAAPC/"
				],
				[
					3136,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAKQKAAAAAAAApQoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApAoAAAAAAACkCgAAAAAAAAAAAAAAAPC/"
				],
				[
					3137,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAKUKAAAAAAAApwoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApQoAAAAAAAClCgAAAAAAAAAAAAAAAPC/"
				],
				[
					3138,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"AwAAAKYKAAAAAAAApwoAAAAAAAAAAAAApwoAAAAAAACoCgAAAAAAAAAAAACnCgAAAAAAAKgKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApgoAAAAAAACmCgAAAAAAAAAAAAAAAPC/"
				],
				[
					3140,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAKoKAAAAAAAAqwoAAAAAAAAAAAAApwoAAAAAAACnCgAAAAAAAAEAAAAJ",
					"AQAAAAAAAAABAAAAqgoAAAAAAACqCgAAAAAAAAAAAAAAAEdA"
				],
				[
					3142,
					1,
					"reindent",
					null,
					"AQAAAKcKAAAAAAAAqAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApwoAAAAAAACnCgAAAAAAAAAAAAAAAAAA"
				],
				[
					3143,
					1,
					"insert",
					{
						"characters": "rads"
					},
					"BAAAAKgKAAAAAAAAqQoAAAAAAAAAAAAAqQoAAAAAAACqCgAAAAAAAAAAAACqCgAAAAAAAKsKAAAAAAAAAAAAAKsKAAAAAAAArAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqAoAAAAAAACoCgAAAAAAAAAAAAAAAPC/"
				],
				[
					3144,
					1,
					"insert",
					{
						"characters": " :="
					},
					"AwAAAKwKAAAAAAAArQoAAAAAAAAAAAAArQoAAAAAAACuCgAAAAAAAAAAAACuCgAAAAAAAK8KAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArAoAAAAAAACsCgAAAAAAAAAAAAAAAPC/"
				],
				[
					3145,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAK8KAAAAAAAAsAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArwoAAAAAAACvCgAAAAAAAAAAAAAAAPC/"
				],
				[
					3146,
					5,
					"left_delete",
					null,
					"BQAAAK8KAAAAAAAArwoAAAAAAAABAAAAIK4KAAAAAAAArgoAAAAAAAABAAAAPa0KAAAAAAAArQoAAAAAAAABAAAAOqwKAAAAAAAArAoAAAAAAAABAAAAIKsKAAAAAAAAqwoAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAAsAoAAAAAAACwCgAAAAAAAAAAAAAAAPC/"
				],
				[
					3147,
					1,
					"insert",
					{
						"characters": "ians"
					},
					"BAAAAKsKAAAAAAAArAoAAAAAAAAAAAAArAoAAAAAAACtCgAAAAAAAAAAAACtCgAAAAAAAK4KAAAAAAAAAAAAAK4KAAAAAAAArwoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqwoAAAAAAACrCgAAAAAAAAAAAAAAAPC/"
				],
				[
					3148,
					1,
					"insert",
					{
						"characters": " :="
					},
					"AwAAAK8KAAAAAAAAsAoAAAAAAAAAAAAAsAoAAAAAAACxCgAAAAAAAAAAAACxCgAAAAAAALIKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArwoAAAAAAACvCgAAAAAAAAAAAAAAAPC/"
				],
				[
					3149,
					1,
					"insert",
					{
						"characters": " degre"
					},
					"BgAAALIKAAAAAAAAswoAAAAAAAAAAAAAswoAAAAAAAC0CgAAAAAAAAAAAAC0CgAAAAAAALUKAAAAAAAAAAAAALUKAAAAAAAAtgoAAAAAAAAAAAAAtgoAAAAAAAC3CgAAAAAAAAAAAAC3CgAAAAAAALgKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsgoAAAAAAACyCgAAAAAAAAAAAAAAAPC/"
				],
				[
					3150,
					1,
					"insert",
					{
						"characters": "es"
					},
					"AgAAALgKAAAAAAAAuQoAAAAAAAAAAAAAuQoAAAAAAAC6CgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuAoAAAAAAAC4CgAAAAAAAAAAAAAAAPC/"
				],
				[
					3151,
					1,
					"insert",
					{
						"characters": " *"
					},
					"AgAAALoKAAAAAAAAuwoAAAAAAAAAAAAAuwoAAAAAAAC8CgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAugoAAAAAAAC6CgAAAAAAAAAAAAAAAPC/"
				],
				[
					3152,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALwKAAAAAAAAvQoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvAoAAAAAAAC8CgAAAAAAAAAAAAAAAPC/"
				],
				[
					3153,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAL0KAAAAAAAAvwoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvQoAAAAAAAC9CgAAAAAAAAAAAAAAAPC/"
				],
				[
					3154,
					1,
					"insert",
					{
						"characters": "math.TA"
					},
					"BwAAAL4KAAAAAAAAvwoAAAAAAAAAAAAAvwoAAAAAAADACgAAAAAAAAAAAADACgAAAAAAAMEKAAAAAAAAAAAAAMEKAAAAAAAAwgoAAAAAAAAAAAAAwgoAAAAAAADDCgAAAAAAAAAAAADDCgAAAAAAAMQKAAAAAAAAAAAAAMQKAAAAAAAAxQoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvgoAAAAAAAC+CgAAAAAAAAAAAAAAAPC/"
				],
				[
					3155,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":1,\"session_name\":\"odin\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "TAU"
					},
					"AgAAAMMKAAAAAAAAwwoAAAAAAAACAAAAVEHDCgAAAAAAAMYKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxQoAAAAAAADFCgAAAAAAAAAAAAAAAPC/"
				],
				[
					3156,
					1,
					"insert",
					{
						"characters": " /"
					},
					"AgAAAMYKAAAAAAAAxwoAAAAAAAAAAAAAxwoAAAAAAADICgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxgoAAAAAAADGCgAAAAAAAAAAAAAAAPC/"
				],
				[
					3157,
					1,
					"insert",
					{
						"characters": " 360.0"
					},
					"BgAAAMgKAAAAAAAAyQoAAAAAAAAAAAAAyQoAAAAAAADKCgAAAAAAAAAAAADKCgAAAAAAAMsKAAAAAAAAAAAAAMsKAAAAAAAAzAoAAAAAAAAAAAAAzAoAAAAAAADNCgAAAAAAAAAAAADNCgAAAAAAAM4KAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyAoAAAAAAADICgAAAAAAAAAAAAAAAPC/"
				],
				[
					3160,
					1,
					"insert",
					{
						"characters": "\nreturn"
					},
					"BwAAAM8KAAAAAAAA0QoAAAAAAAAAAAAA0QoAAAAAAADSCgAAAAAAAAAAAADSCgAAAAAAANMKAAAAAAAAAAAAANMKAAAAAAAA1AoAAAAAAAAAAAAA1AoAAAAAAADVCgAAAAAAAAAAAADVCgAAAAAAANYKAAAAAAAAAAAAANYKAAAAAAAA1woAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzwoAAAAAAADPCgAAAAAAAAAAAAAAAPC/"
				],
				[
					3161,
					1,
					"insert",
					{
						"characters": " re"
					},
					"AwAAANcKAAAAAAAA2AoAAAAAAAAAAAAA2AoAAAAAAADZCgAAAAAAAAAAAADZCgAAAAAAANoKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1woAAAAAAADXCgAAAAAAAAAAAAAAAPC/"
				],
				[
					3162,
					1,
					"left_delete",
					null,
					"AQAAANkKAAAAAAAA2QoAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAA2goAAAAAAADaCgAAAAAAAAAAAAAAAPC/"
				],
				[
					3163,
					1,
					"insert",
					{
						"characters": "adio"
					},
					"BAAAANkKAAAAAAAA2goAAAAAAAAAAAAA2goAAAAAAADbCgAAAAAAAAAAAADbCgAAAAAAANwKAAAAAAAAAAAAANwKAAAAAAAA3QoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2QoAAAAAAADZCgAAAAAAAAAAAAAAAPC/"
				],
				[
					3164,
					1,
					"left_delete",
					null,
					"AQAAANwKAAAAAAAA3AoAAAAAAAABAAAAbw",
					"AQAAAAAAAAABAAAA3QoAAAAAAADdCgAAAAAAAAAAAAAAAPC/"
				],
				[
					3165,
					1,
					"insert",
					{
						"characters": "uns"
					},
					"AwAAANwKAAAAAAAA3QoAAAAAAAAAAAAA3QoAAAAAAADeCgAAAAAAAAAAAADeCgAAAAAAAN8KAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3AoAAAAAAADcCgAAAAAAAAAAAAAAAPC/"
				],
				[
					3166,
					3,
					"left_delete",
					null,
					"AwAAAN4KAAAAAAAA3goAAAAAAAABAAAAc90KAAAAAAAA3QoAAAAAAAABAAAAbtwKAAAAAAAA3AoAAAAAAAABAAAAdQ",
					"AQAAAAAAAAABAAAA3woAAAAAAADfCgAAAAAAAAAAAAAAAPC/"
				],
				[
					3167,
					1,
					"insert",
					{
						"characters": "ans"
					},
					"AwAAANwKAAAAAAAA3QoAAAAAAAAAAAAA3QoAAAAAAADeCgAAAAAAAAAAAADeCgAAAAAAAN8KAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3AoAAAAAAADcCgAAAAAAAAAAAAAAAPC/"
				],
				[
					3170,
					1,
					"insert",
					{
						"characters": "\n\nradians_t"
					},
					"CwAAAOEKAAAAAAAA4goAAAAAAAAAAAAA4goAAAAAAADjCgAAAAAAAAAAAADjCgAAAAAAAOQKAAAAAAAAAAAAAOQKAAAAAAAA5QoAAAAAAAAAAAAA5QoAAAAAAADmCgAAAAAAAAAAAADmCgAAAAAAAOcKAAAAAAAAAAAAAOcKAAAAAAAA6AoAAAAAAAAAAAAA6AoAAAAAAADpCgAAAAAAAAAAAADpCgAAAAAAAOoKAAAAAAAAAAAAAOoKAAAAAAAA6woAAAAAAAAAAAAA6woAAAAAAADsCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4QoAAAAAAADhCgAAAAAAAAAAAAAAAGpA"
				],
				[
					3171,
					1,
					"insert",
					{
						"characters": "o_degrees"
					},
					"CQAAAOwKAAAAAAAA7QoAAAAAAAAAAAAA7QoAAAAAAADuCgAAAAAAAAAAAADuCgAAAAAAAO8KAAAAAAAAAAAAAO8KAAAAAAAA8AoAAAAAAAAAAAAA8AoAAAAAAADxCgAAAAAAAAAAAADxCgAAAAAAAPIKAAAAAAAAAAAAAPIKAAAAAAAA8woAAAAAAAAAAAAA8woAAAAAAAD0CgAAAAAAAAAAAAD0CgAAAAAAAPUKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7AoAAAAAAADsCgAAAAAAAAAAAAAAAPC/"
				],
				[
					3172,
					1,
					"insert",
					{
						"characters": " ::"
					},
					"AwAAAPUKAAAAAAAA9goAAAAAAAAAAAAA9goAAAAAAAD3CgAAAAAAAAAAAAD3CgAAAAAAAPgKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9QoAAAAAAAD1CgAAAAAAAAAAAAAAAPC/"
				],
				[
					3173,
					1,
					"insert",
					{
						"characters": " proc"
					},
					"BQAAAPgKAAAAAAAA+QoAAAAAAAAAAAAA+QoAAAAAAAD6CgAAAAAAAAAAAAD6CgAAAAAAAPsKAAAAAAAAAAAAAPsKAAAAAAAA/AoAAAAAAAAAAAAA/AoAAAAAAAD9CgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+AoAAAAAAAD4CgAAAAAAAAAAAAAAAPC/"
				],
				[
					3174,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAP0KAAAAAAAA/woAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/QoAAAAAAAD9CgAAAAAAAAAAAAAAAPC/"
				],
				[
					3175,
					1,
					"insert",
					{
						"characters": "radians"
					},
					"BwAAAP4KAAAAAAAA/woAAAAAAAAAAAAA/woAAAAAAAAACwAAAAAAAAAAAAAACwAAAAAAAAELAAAAAAAAAAAAAAELAAAAAAAAAgsAAAAAAAAAAAAAAgsAAAAAAAADCwAAAAAAAAAAAAADCwAAAAAAAAQLAAAAAAAAAAAAAAQLAAAAAAAABQsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/goAAAAAAAD+CgAAAAAAAAAAAAAAAPC/"
				],
				[
					3176,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAAAULAAAAAAAABgsAAAAAAAAAAAAABgsAAAAAAAAHCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABQsAAAAAAAAFCwAAAAAAAAAAAAAAAPC/"
				],
				[
					3177,
					1,
					"insert",
					{
						"characters": " f32"
					},
					"BAAAAAcLAAAAAAAACAsAAAAAAAAAAAAACAsAAAAAAAAJCwAAAAAAAAAAAAAJCwAAAAAAAAoLAAAAAAAAAAAAAAoLAAAAAAAACwsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABwsAAAAAAAAHCwAAAAAAAAAAAAAAAPC/"
				],
				[
					3179,
					1,
					"insert",
					{
						"characters": " ->"
					},
					"AwAAAAwLAAAAAAAADQsAAAAAAAAAAAAADQsAAAAAAAAOCwAAAAAAAAAAAAAOCwAAAAAAAA8LAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADAsAAAAAAAAMCwAAAAAAAAAAAAAAAPC/"
				],
				[
					3180,
					1,
					"insert",
					{
						"characters": " f32"
					},
					"BAAAAA8LAAAAAAAAEAsAAAAAAAAAAAAAEAsAAAAAAAARCwAAAAAAAAAAAAARCwAAAAAAABILAAAAAAAAAAAAABILAAAAAAAAEwsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADwsAAAAAAAAPCwAAAAAAAAAAAAAAAPC/"
				],
				[
					3181,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAABMLAAAAAAAAFAsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEwsAAAAAAAATCwAAAAAAAAAAAAAAAPC/"
				],
				[
					3182,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAABQLAAAAAAAAFgsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFAsAAAAAAAAUCwAAAAAAAAAAAAAAAPC/"
				],
				[
					3183,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"AwAAABULAAAAAAAAFgsAAAAAAAAAAAAAFgsAAAAAAAAXCwAAAAAAAAAAAAAWCwAAAAAAABcLAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFQsAAAAAAAAVCwAAAAAAAAAAAAAAAPC/"
				],
				[
					3186,
					1,
					"insert",
					{
						"characters": "degrees"
					},
					"BwAAABcLAAAAAAAAGAsAAAAAAAAAAAAAGAsAAAAAAAAZCwAAAAAAAAAAAAAZCwAAAAAAABoLAAAAAAAAAAAAABoLAAAAAAAAGwsAAAAAAAAAAAAAGwsAAAAAAAAcCwAAAAAAAAAAAAAcCwAAAAAAAB0LAAAAAAAAAAAAAB0LAAAAAAAAHgsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFwsAAAAAAAAXCwAAAAAAAAAAAAAAAPC/"
				],
				[
					3187,
					1,
					"insert",
					{
						"characters": " :="
					},
					"AwAAAB4LAAAAAAAAHwsAAAAAAAAAAAAAHwsAAAAAAAAgCwAAAAAAAAAAAAAgCwAAAAAAACELAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHgsAAAAAAAAeCwAAAAAAAAAAAAAAAPC/"
				],
				[
					3188,
					1,
					"insert",
					{
						"characters": " ras"
					},
					"BAAAACELAAAAAAAAIgsAAAAAAAAAAAAAIgsAAAAAAAAjCwAAAAAAAAAAAAAjCwAAAAAAACQLAAAAAAAAAAAAACQLAAAAAAAAJQsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIQsAAAAAAAAhCwAAAAAAAAAAAAAAAPC/"
				],
				[
					3189,
					1,
					"left_delete",
					null,
					"AQAAACQLAAAAAAAAJAsAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAAJQsAAAAAAAAlCwAAAAAAAAAAAAAAAPC/"
				],
				[
					3190,
					1,
					"insert",
					{
						"characters": "dians"
					},
					"BQAAACQLAAAAAAAAJQsAAAAAAAAAAAAAJQsAAAAAAAAmCwAAAAAAAAAAAAAmCwAAAAAAACcLAAAAAAAAAAAAACcLAAAAAAAAKAsAAAAAAAAAAAAAKAsAAAAAAAApCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJAsAAAAAAAAkCwAAAAAAAAAAAAAAAPC/"
				],
				[
					3191,
					1,
					"insert",
					{
						"characters": " *"
					},
					"AgAAACkLAAAAAAAAKgsAAAAAAAAAAAAAKgsAAAAAAAArCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKQsAAAAAAAApCwAAAAAAAAAAAAAAAPC/"
				],
				[
					3192,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACsLAAAAAAAALAsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKwsAAAAAAAArCwAAAAAAAAAAAAAAAPC/"
				],
				[
					3193,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAACwLAAAAAAAALgsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALAsAAAAAAAAsCwAAAAAAAAAAAAAAAPC/"
				],
				[
					3194,
					1,
					"insert",
					{
						"characters": "360"
					},
					"AwAAAC0LAAAAAAAALgsAAAAAAAAAAAAALgsAAAAAAAAvCwAAAAAAAAAAAAAvCwAAAAAAADALAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALQsAAAAAAAAtCwAAAAAAAAAAAAAAAPC/"
				],
				[
					3195,
					1,
					"insert",
					{
						"characters": " /"
					},
					"AgAAADALAAAAAAAAMQsAAAAAAAAAAAAAMQsAAAAAAAAyCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMAsAAAAAAAAwCwAAAAAAAAAAAAAAAPC/"
				],
				[
					3196,
					1,
					"insert",
					{
						"characters": " math.TAUE"
					},
					"CgAAADILAAAAAAAAMwsAAAAAAAAAAAAAMwsAAAAAAAA0CwAAAAAAAAAAAAA0CwAAAAAAADULAAAAAAAAAAAAADULAAAAAAAANgsAAAAAAAAAAAAANgsAAAAAAAA3CwAAAAAAAAAAAAA3CwAAAAAAADgLAAAAAAAAAAAAADgLAAAAAAAAOQsAAAAAAAAAAAAAOQsAAAAAAAA6CwAAAAAAAAAAAAA6CwAAAAAAADsLAAAAAAAAAAAAADsLAAAAAAAAPAsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMgsAAAAAAAAyCwAAAAAAAAAAAAAAAPC/"
				],
				[
					3197,
					1,
					"left_delete",
					null,
					"AQAAADsLAAAAAAAAOwsAAAAAAAABAAAARQ",
					"AQAAAAAAAAABAAAAPAsAAAAAAAA8CwAAAAAAAAAAAAAAAPC/"
				],
				[
					3200,
					1,
					"insert",
					{
						"characters": "\nreturn"
					},
					"BwAAADwLAAAAAAAAPgsAAAAAAAAAAAAAPgsAAAAAAAA/CwAAAAAAAAAAAAA/CwAAAAAAAEALAAAAAAAAAAAAAEALAAAAAAAAQQsAAAAAAAAAAAAAQQsAAAAAAABCCwAAAAAAAAAAAABCCwAAAAAAAEMLAAAAAAAAAAAAAEMLAAAAAAAARAsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPAsAAAAAAAA8CwAAAAAAAAAAAAAAAPC/"
				],
				[
					3201,
					1,
					"insert",
					{
						"characters": " degrees"
					},
					"CAAAAEQLAAAAAAAARQsAAAAAAAAAAAAARQsAAAAAAABGCwAAAAAAAAAAAABGCwAAAAAAAEcLAAAAAAAAAAAAAEcLAAAAAAAASAsAAAAAAAAAAAAASAsAAAAAAABJCwAAAAAAAAAAAABJCwAAAAAAAEoLAAAAAAAAAAAAAEoLAAAAAAAASwsAAAAAAAAAAAAASwsAAAAAAABMCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARAsAAAAAAABECwAAAAAAAAAAAAAAAPC/"
				],
				[
					3208,
					1,
					"left_delete",
					null,
					"AQAAAH8VAAAAAAAAfxUAAAAAAAADAAAAMjcw",
					"AQAAAAAAAAABAAAAfxUAAAAAAACCFQAAAAAAAAAAAAAAAPC/"
				],
				[
					3209,
					1,
					"insert",
					{
						"characters": "degrees"
					},
					"BwAAAH8VAAAAAAAAgBUAAAAAAAAAAAAAgBUAAAAAAACBFQAAAAAAAAAAAACBFQAAAAAAAIIVAAAAAAAAAAAAAIIVAAAAAAAAgxUAAAAAAAAAAAAAgxUAAAAAAACEFQAAAAAAAAAAAACEFQAAAAAAAIUVAAAAAAAAAAAAAIUVAAAAAAAAhhUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfxUAAAAAAAB/FQAAAAAAAAAAAAAAAPC/"
				],
				[
					3210,
					1,
					"insert",
					{
						"characters": "_to_rado"
					},
					"CAAAAIYVAAAAAAAAhxUAAAAAAAAAAAAAhxUAAAAAAACIFQAAAAAAAAAAAACIFQAAAAAAAIkVAAAAAAAAAAAAAIkVAAAAAAAAihUAAAAAAAAAAAAAihUAAAAAAACLFQAAAAAAAAAAAACLFQAAAAAAAIwVAAAAAAAAAAAAAIwVAAAAAAAAjRUAAAAAAAAAAAAAjRUAAAAAAACOFQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhhUAAAAAAACGFQAAAAAAAAAAAAAAAPC/"
				],
				[
					3211,
					1,
					"left_delete",
					null,
					"AQAAAI0VAAAAAAAAjRUAAAAAAAABAAAAbw",
					"AQAAAAAAAAABAAAAjhUAAAAAAACOFQAAAAAAAAAAAAAAAPC/"
				],
				[
					3212,
					1,
					"insert",
					{
						"characters": "ians("
					},
					"BQAAAI0VAAAAAAAAjhUAAAAAAAAAAAAAjhUAAAAAAACPFQAAAAAAAAAAAACPFQAAAAAAAJAVAAAAAAAAAAAAAJAVAAAAAAAAkRUAAAAAAAAAAAAAkRUAAAAAAACSFQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjRUAAAAAAACNFQAAAAAAAAAAAAAAAPC/"
				],
				[
					3213,
					1,
					"insert",
					{
						"characters": "270)"
					},
					"BAAAAJIVAAAAAAAAkxUAAAAAAAAAAAAAkxUAAAAAAACUFQAAAAAAAAAAAACUFQAAAAAAAJUVAAAAAAAAAAAAAJUVAAAAAAAAlhUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkhUAAAAAAACSFQAAAAAAAAAAAAAAAPC/"
				],
				[
					3220,
					1,
					"paste",
					null,
					"AQAAAKwVAAAAAAAAwxUAAAAAAAACAAAAOTA",
					"AQAAAAAAAAABAAAArhUAAAAAAACsFQAAAAAAAAAAAAAAAPC/"
				],
				[
					3222,
					3,
					"left_delete",
					null,
					"AwAAAMEVAAAAAAAAwRUAAAAAAAABAAAAMMAVAAAAAAAAwBUAAAAAAAABAAAAN78VAAAAAAAAvxUAAAAAAAABAAAAMg",
					"AQAAAAAAAAABAAAAwhUAAAAAAADCFQAAAAAAAAAAAAAAAPC/"
				],
				[
					3223,
					1,
					"insert",
					{
						"characters": "90"
					},
					"AgAAAL8VAAAAAAAAwBUAAAAAAAAAAAAAwBUAAAAAAADBFQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvxUAAAAAAAC/FQAAAAAAAAAAAAAAAPC/"
				],
				[
					3227,
					1,
					"reindent",
					null,
					"AQAAAMUVAAAAAAAAxhUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxRUAAAAAAADFFQAAAAAAAAAAAAAAAPC/"
				],
				[
					3228,
					1,
					"insert",
					{
						"characters": "set_parent"
					},
					"CgAAAMYVAAAAAAAAxxUAAAAAAAAAAAAAxxUAAAAAAADIFQAAAAAAAAAAAADIFQAAAAAAAMkVAAAAAAAAAAAAAMkVAAAAAAAAyhUAAAAAAAAAAAAAyhUAAAAAAADLFQAAAAAAAAAAAADLFQAAAAAAAMwVAAAAAAAAAAAAAMwVAAAAAAAAzRUAAAAAAAAAAAAAzRUAAAAAAADOFQAAAAAAAAAAAADOFQAAAAAAAM8VAAAAAAAAAAAAAM8VAAAAAAAA0BUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxhUAAAAAAADGFQAAAAAAAAAAAAAAAPC/"
				],
				[
					3229,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAANAVAAAAAAAA0hUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0BUAAAAAAADQFQAAAAAAAAAAAAAAAPC/"
				],
				[
					3230,
					1,
					"insert",
					{
						"characters": "g_"
					},
					"AgAAANEVAAAAAAAA0hUAAAAAAAAAAAAA0hUAAAAAAADTFQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0RUAAAAAAADRFQAAAAAAAAAAAAAAAPC/"
				],
				[
					3231,
					1,
					"insert",
					{
						"characters": "h"
					},
					"AQAAANMVAAAAAAAA1BUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0xUAAAAAAADTFQAAAAAAAAAAAAAAAPC/"
				],
				[
					3232,
					3,
					"left_delete",
					null,
					"AwAAANMVAAAAAAAA0xUAAAAAAAABAAAAaNIVAAAAAAAA0hUAAAAAAAABAAAAX9EVAAAAAAAA0RUAAAAAAAABAAAAZw",
					"AQAAAAAAAAABAAAA1BUAAAAAAADUFQAAAAAAAAAAAAAAAPC/"
				],
				[
					3233,
					1,
					"insert",
					{
						"characters": "swinging_h"
					},
					"CgAAANEVAAAAAAAA0hUAAAAAAAAAAAAA0hUAAAAAAADTFQAAAAAAAAAAAADTFQAAAAAAANQVAAAAAAAAAAAAANQVAAAAAAAA1RUAAAAAAAAAAAAA1RUAAAAAAADWFQAAAAAAAAAAAADWFQAAAAAAANcVAAAAAAAAAAAAANcVAAAAAAAA2BUAAAAAAAAAAAAA2BUAAAAAAADZFQAAAAAAAAAAAADZFQAAAAAAANoVAAAAAAAAAAAAANoVAAAAAAAA2xUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0RUAAAAAAADRFQAAAAAAAAAAAAAAAPC/"
				],
				[
					3234,
					1,
					"left_delete",
					null,
					"AQAAANoVAAAAAAAA2hUAAAAAAAABAAAAaA",
					"AQAAAAAAAAABAAAA2xUAAAAAAADbFQAAAAAAAAAAAAAAAPC/"
				],
				[
					3235,
					1,
					"insert",
					{
						"characters": "g_h,"
					},
					"BAAAANoVAAAAAAAA2xUAAAAAAAAAAAAA2xUAAAAAAADcFQAAAAAAAAAAAADcFQAAAAAAAN0VAAAAAAAAAAAAAN0VAAAAAAAA3hUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2hUAAAAAAADaFQAAAAAAAAAAAAAAAPC/"
				],
				[
					3236,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAN4VAAAAAAAA3xUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3hUAAAAAAADeFQAAAAAAAAAAAAAAAPC/"
				],
				[
					3237,
					1,
					"insert",
					{
						"characters": "e4_h"
					},
					"BAAAAN8VAAAAAAAA4BUAAAAAAAAAAAAA4BUAAAAAAADhFQAAAAAAAAAAAADhFQAAAAAAAOIVAAAAAAAAAAAAAOIVAAAAAAAA4xUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3xUAAAAAAADfFQAAAAAAAAAAAAAAAPC/"
				],
				[
					3240,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAOQVAAAAAAAA5hUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5BUAAAAAAADkFQAAAAAAAAAAAAAAAPC/"
				],
				[
					3253,
					1,
					"paste",
					null,
					"AQAAANEVAAAAAAAA3BUAAAAAAAAMAAAAc3dpbmdpbmdfZ19o",
					"AQAAAAAAAAABAAAA0RUAAAAAAADdFQAAAAAAAAAAAAAAAPC/"
				],
				[
					3257,
					1,
					"insert",
					{
						"characters": "\n\niof"
					},
					"BwAAAJlbAAAAAAAApVsAAAAAAAAAAAAA5BUAAAAAAADkFQAAAAAAAAEAAAAJpFsAAAAAAACwWwAAAAAAAAAAAACZWwAAAAAAAJlbAAAAAAAACwAAACAgICAgICAJCQkJpVsAAAAAAACmWwAAAAAAAAAAAACmWwAAAAAAAKdbAAAAAAAAAAAAAKdbAAAAAAAAqFsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmVsAAAAAAACZWwAAAAAAAAAAAAAAAPC/"
				],
				[
					3258,
					2,
					"left_delete",
					null,
					"AgAAAKdbAAAAAAAAp1sAAAAAAAABAAAAZqZbAAAAAAAAplsAAAAAAAABAAAAbw",
					"AQAAAAAAAAABAAAAqFsAAAAAAACoWwAAAAAAAAAAAAAAAPC/"
				],
				[
					3259,
					1,
					"insert",
					{
						"characters": "f"
					},
					"AQAAAKZbAAAAAAAAp1sAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAplsAAAAAAACmWwAAAAAAAAAAAAAAAPC/"
				],
				[
					3260,
					1,
					"insert",
					{
						"characters": " .Swinging"
					},
					"CgAAAKdbAAAAAAAAqFsAAAAAAAAAAAAAqFsAAAAAAACpWwAAAAAAAAAAAACpWwAAAAAAAKpbAAAAAAAAAAAAAKpbAAAAAAAAq1sAAAAAAAAAAAAAq1sAAAAAAACsWwAAAAAAAAAAAACsWwAAAAAAAK1bAAAAAAAAAAAAAK1bAAAAAAAArlsAAAAAAAAAAAAArlsAAAAAAACvWwAAAAAAAAAAAACvWwAAAAAAALBbAAAAAAAAAAAAALBbAAAAAAAAsVsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAp1sAAAAAAACnWwAAAAAAAAAAAAAAAPC/"
				],
				[
					3261,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAKlbAAAAAAAAqVsAAAAAAAAIAAAAU3dpbmdpbmc",
					"AQAAAAAAAAABAAAAsVsAAAAAAACxWwAAAAAAAAAAAAAAAPC/"
				],
				[
					3264,
					1,
					"insert",
					{
						"characters": " in"
					},
					"AwAAAKlbAAAAAAAAqlsAAAAAAAAAAAAAqlsAAAAAAACrWwAAAAAAAAAAAACrWwAAAAAAAKxbAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqVsAAAAAAACpWwAAAAAAAAAAAAAAAPC/"
				],
				[
					3265,
					1,
					"insert",
					{
						"characters": " entity.behavio"
					},
					"DwAAAKxbAAAAAAAArVsAAAAAAAAAAAAArVsAAAAAAACuWwAAAAAAAAAAAACuWwAAAAAAAK9bAAAAAAAAAAAAAK9bAAAAAAAAsFsAAAAAAAAAAAAAsFsAAAAAAACxWwAAAAAAAAAAAACxWwAAAAAAALJbAAAAAAAAAAAAALJbAAAAAAAAs1sAAAAAAAAAAAAAs1sAAAAAAAC0WwAAAAAAAAAAAAC0WwAAAAAAALVbAAAAAAAAAAAAALVbAAAAAAAAtlsAAAAAAAAAAAAAtlsAAAAAAAC3WwAAAAAAAAAAAAC3WwAAAAAAALhbAAAAAAAAAAAAALhbAAAAAAAAuVsAAAAAAAAAAAAAuVsAAAAAAAC6WwAAAAAAAAAAAAC6WwAAAAAAALtbAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArFsAAAAAAACsWwAAAAAAAAAAAAAAAPC/"
				],
				[
					3266,
					1,
					"insert",
					{
						"characters": "rs"
					},
					"AgAAALtbAAAAAAAAvFsAAAAAAAAAAAAAvFsAAAAAAAC9WwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAu1sAAAAAAAC7WwAAAAAAAAAAAAAAAPC/"
				],
				[
					3269,
					1,
					"insert",
					{
						"characters": "Swing"
					},
					"BQAAAKlbAAAAAAAAqlsAAAAAAAAAAAAAqlsAAAAAAACrWwAAAAAAAAAAAACrWwAAAAAAAKxbAAAAAAAAAAAAAKxbAAAAAAAArVsAAAAAAAAAAAAArVsAAAAAAACuWwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqVsAAAAAAACpWwAAAAAAAAAAAAAAAPC/"
				],
				[
					3270,
					1,
					"insert_completion",
					{
						"completion": "Swing_Around_Parent",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "Swing_Around_Parent"
					},
					"AgAAAKlbAAAAAAAAqVsAAAAAAAAFAAAAU3dpbmepWwAAAAAAALxbAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArlsAAAAAAACuWwAAAAAAAAAAAAAAAPC/"
				],
				[
					3273,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAANBbAAAAAAAA3FsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0FsAAAAAAADQWwAAAAAAAP///////+9/"
				],
				[
					3274,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAANxbAAAAAAAA3lsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3FsAAAAAAADcWwAAAAAAAAAAAAAAAPC/"
				],
				[
					3275,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BAAAAN1bAAAAAAAA6VsAAAAAAAAAAAAA6VsAAAAAAAD1WwAAAAAAAAAAAADeWwAAAAAAAN5bAAAAAAAACwAAACAgICAgICAJCQkJ3lsAAAAAAADqWwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3VsAAAAAAADdWwAAAAAAAAAAAAAAAPC/"
				],
				[
					3277,
					1,
					"insert",
					{
						"characters": "if"
					},
					"AgAAAOpbAAAAAAAA61sAAAAAAAAAAAAA61sAAAAAAADsWwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6lsAAAAAAADqWwAAAAAAAAAAAAAAAPC/"
				],
				[
					3278,
					1,
					"insert",
					{
						"characters": " e"
					},
					"AgAAAOxbAAAAAAAA7VsAAAAAAAAAAAAA7VsAAAAAAADuWwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7FsAAAAAAADsWwAAAAAAAAAAAAAAAPC/"
				],
				[
					3279,
					1,
					"insert",
					{
						"characters": "ntity_ptr"
					},
					"CQAAAO5bAAAAAAAA71sAAAAAAAAAAAAA71sAAAAAAADwWwAAAAAAAAAAAADwWwAAAAAAAPFbAAAAAAAAAAAAAPFbAAAAAAAA8lsAAAAAAAAAAAAA8lsAAAAAAADzWwAAAAAAAAAAAADzWwAAAAAAAPRbAAAAAAAAAAAAAPRbAAAAAAAA9VsAAAAAAAAAAAAA9VsAAAAAAAD2WwAAAAAAAAAAAAD2WwAAAAAAAPdbAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7lsAAAAAAADuWwAAAAAAAAAAAAAAAPC/"
				],
				[
					3280,
					1,
					"insert",
					{
						"characters": ".orbiting"
					},
					"CQAAAPdbAAAAAAAA+FsAAAAAAAAAAAAA+FsAAAAAAAD5WwAAAAAAAAAAAAD5WwAAAAAAAPpbAAAAAAAAAAAAAPpbAAAAAAAA+1sAAAAAAAAAAAAA+1sAAAAAAAD8WwAAAAAAAAAAAAD8WwAAAAAAAP1bAAAAAAAAAAAAAP1bAAAAAAAA/lsAAAAAAAAAAAAA/lsAAAAAAAD/WwAAAAAAAAAAAAD/WwAAAAAAAABcAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA91sAAAAAAAD3WwAAAAAAAAAAAAAAAPC/"
				],
				[
					3281,
					1,
					"insert",
					{
						"characters": "_angle"
					},
					"BgAAAABcAAAAAAAAAVwAAAAAAAAAAAAAAVwAAAAAAAACXAAAAAAAAAAAAAACXAAAAAAAAANcAAAAAAAAAAAAAANcAAAAAAAABFwAAAAAAAAAAAAABFwAAAAAAAAFXAAAAAAAAAAAAAAFXAAAAAAAAAZcAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAFwAAAAAAAAAXAAAAAAAAAAAAAAAAPC/"
				],
				[
					3282,
					1,
					"insert",
					{
						"characters": " >"
					},
					"AgAAAAZcAAAAAAAAB1wAAAAAAAAAAAAAB1wAAAAAAAAIXAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABlwAAAAAAAAGXAAAAAAAAAAAAAAAAPC/"
				],
				[
					3283,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAhcAAAAAAAACVwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACFwAAAAAAAAIXAAAAAAAAAAAAAAAAPC/"
				],
				[
					3286,
					1,
					"reindent",
					null,
					"AQAAANZaAAAAAAAA4VoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1loAAAAAAADWWgAAAAAAAAAAAAAAAPC/"
				],
				[
					3287,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAOFaAAAAAAAA4loAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4VoAAAAAAADhWgAAAAAAAAAAAAAAAPC/"
				],
				[
					3288,
					1,
					"left_delete",
					null,
					"AQAAAOFaAAAAAAAA4VoAAAAAAAABAAAACQ",
					"AQAAAAAAAAABAAAA4loAAAAAAADiWgAAAAAAAAAAAAAAAPC/"
				],
				[
					3289,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAOFaAAAAAAAA7VoAAAAAAAAAAAAA1loAAAAAAADWWgAAAAAAAAsAAAAgICAgICAgCQkJCQ",
					"AQAAAAAAAAABAAAA4VoAAAAAAADhWgAAAAAAAAAAAAAAAPC/"
				],
				[
					3290,
					1,
					"paste",
					null,
					"AQAAAOJaAAAAAAAAdFsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4loAAAAAAADiWgAAAAAAAAAAAAAAAPC/"
				],
				[
					3291,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAHRbAAAAAAAAeVsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdFsAAAAAAAB0WwAAAAAAAAAAAAAAAPC/"
				],
				[
					3294,
					4,
					"indent",
					null,
					"EAAAAANbAAAAAAAABFsAAAAAAAAAAAAAKFsAAAAAAAApWwAAAAAAAAAAAABNWwAAAAAAAE5bAAAAAAAAAAAAAHJbAAAAAAAAc1sAAAAAAAAAAAAAA1sAAAAAAAAEWwAAAAAAAAAAAAApWwAAAAAAACpbAAAAAAAAAAAAAE9bAAAAAAAAUFsAAAAAAAAAAAAAdVsAAAAAAAB2WwAAAAAAAAAAAAADWwAAAAAAAARbAAAAAAAAAAAAACpbAAAAAAAAK1sAAAAAAAAAAAAAUVsAAAAAAABSWwAAAAAAAAAAAAB4WwAAAAAAAHlbAAAAAAAAAAAAAANbAAAAAAAABFsAAAAAAAAAAAAAK1sAAAAAAAAsWwAAAAAAAAAAAABTWwAAAAAAAFRbAAAAAAAAAAAAAHtbAAAAAAAAfFsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdFsAAAAAAAAJWwAAAAAAAAAAAAAAAPC/"
				],
				[
					3310,
					1,
					"paste",
					null,
					"BAAAAF9bAAAAAAAAaVsAAAAAAAAAAAAAPVsAAAAAAABHWwAAAAAAAAAAAAAPWwAAAAAAABlbAAAAAAAAAAAAAOVaAAAAAAAA71oAAAAAAAAAAAAA",
					"AQAAAAAAAAAEAAAA5VoAAAAAAADlWgAAAAAAAAAAAAAAAPC/D1sAAAAAAAAPWwAAAAAAAAAAAAAAAPC/PVsAAAAAAAA9WwAAAAAAAAAAAAAAAPC/X1sAAAAAAABfWwAAAAAAAAAAAAAAAPC/"
				],
				[
					3311,
					1,
					"insert",
					{
						"characters": "."
					},
					"BQAAAIdbAAAAAAAAiFsAAAAAAAAAAAAAW1sAAAAAAABcWwAAAAAAAAAAAAAjWwAAAAAAACRbAAAAAAAAAAAAAO9aAAAAAAAA8FoAAAAAAAAAAAAAsVsAAAAAAACxWwAAAAAAAAQAAAAgICAg",
					"AQAAAAAAAAAEAAAA71oAAAAAAADvWgAAAAAAAAAAAAAAAPC/I1sAAAAAAAAjWwAAAAAAAAAAAAAAAPC/W1sAAAAAAABbWwAAAAAAAAAAAAAAAPC/h1sAAAAAAACHWwAAAAAAAAAAAAAAAPC/"
				],
				[
					3313,
					1,
					"left_delete",
					null,
					"BAAAAJlbAAAAAAAAmVsAAAAAAAABAAAAXmxbAAAAAAAAbFsAAAAAAAABAAAAXjNbAAAAAAAAM1sAAAAAAAABAAAAXv5aAAAAAAAA/loAAAAAAAABAAAAXg",
					"AQAAAAAAAAAEAAAA/1oAAAAAAAD/WgAAAAAAAAAAAAAAAPC/NFsAAAAAAAA0WwAAAAAAAAAAAAAAAPC/bVsAAAAAAABtWwAAAAAAAAAAAAAAAPC/mlsAAAAAAACaWwAAAAAAAAAAAAAAAPC/"
				],
				[
					3320,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAAtbAAAAAAAAF1sAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAC1sAAAAAAAALWwAAAAAAAAAAAAAAAPC/"
				],
				[
					3324,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAHtbAAAAAAAAhFsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAe1sAAAAAAAB7WwAAAAAAAAAAAAAAAPC/"
				],
				[
					3328,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAFVbAAAAAAAAXlsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVVsAAAAAAABVWwAAAAAAAAAAAAAAAPC/"
				],
				[
					3336,
					1,
					"reindent",
					null,
					"AQAAANZaAAAAAAAA4VoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1loAAAAAAADWWgAAAAAAAAAAAAAAAPC/"
				],
				[
					3342,
					1,
					"insert",
					{
						"characters": "\nentity_ptr"
					},
					"DAAAAOFaAAAAAAAA7VoAAAAAAAAAAAAA1loAAAAAAADWWgAAAAAAAAsAAAAgICAgICAgCQkJCeJaAAAAAAAA41oAAAAAAAAAAAAA41oAAAAAAADkWgAAAAAAAAAAAADkWgAAAAAAAOVaAAAAAAAAAAAAAOVaAAAAAAAA5loAAAAAAAAAAAAA5loAAAAAAADnWgAAAAAAAAAAAADnWgAAAAAAAOhaAAAAAAAAAAAAAOhaAAAAAAAA6VoAAAAAAAAAAAAA6VoAAAAAAADqWgAAAAAAAAAAAADqWgAAAAAAAOtaAAAAAAAAAAAAAOtaAAAAAAAA7FoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4VoAAAAAAADhWgAAAAAAAAAAAAAAAPC/"
				],
				[
					3343,
					1,
					"insert",
					{
						"characters": ".orbiting_a"
					},
					"CwAAAOxaAAAAAAAA7VoAAAAAAAAAAAAA7VoAAAAAAADuWgAAAAAAAAAAAADuWgAAAAAAAO9aAAAAAAAAAAAAAO9aAAAAAAAA8FoAAAAAAAAAAAAA8FoAAAAAAADxWgAAAAAAAAAAAADxWgAAAAAAAPJaAAAAAAAAAAAAAPJaAAAAAAAA81oAAAAAAAAAAAAA81oAAAAAAAD0WgAAAAAAAAAAAAD0WgAAAAAAAPVaAAAAAAAAAAAAAPVaAAAAAAAA9loAAAAAAAAAAAAA9loAAAAAAAD3WgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7FoAAAAAAADsWgAAAAAAAAAAAAAAAPC/"
				],
				[
					3344,
					1,
					"insert",
					{
						"characters": "ngle"
					},
					"BAAAAPdaAAAAAAAA+FoAAAAAAAAAAAAA+FoAAAAAAAD5WgAAAAAAAAAAAAD5WgAAAAAAAPpaAAAAAAAAAAAAAPpaAAAAAAAA+1oAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA91oAAAAAAAD3WgAAAAAAAAAAAAAAAPC/"
				],
				[
					3345,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAPtaAAAAAAAA/FoAAAAAAAAAAAAA/FoAAAAAAAD9WgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+1oAAAAAAAD7WgAAAAAAAAAAAAAAAPC/"
				],
				[
					3346,
					1,
					"insert",
					{
						"characters": " mar"
					},
					"BAAAAP1aAAAAAAAA/loAAAAAAAAAAAAA/loAAAAAAAD/WgAAAAAAAAAAAAD/WgAAAAAAAABbAAAAAAAAAAAAAABbAAAAAAAAAVsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/VoAAAAAAAD9WgAAAAAAAAAAAAAAAPC/"
				],
				[
					3347,
					1,
					"left_delete",
					null,
					"AQAAAABbAAAAAAAAAFsAAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAAAVsAAAAAAAABWwAAAAAAAAAAAAAAAPC/"
				],
				[
					3348,
					1,
					"insert",
					{
						"characters": "th.mod"
					},
					"BgAAAABbAAAAAAAAAVsAAAAAAAAAAAAAAVsAAAAAAAACWwAAAAAAAAAAAAACWwAAAAAAAANbAAAAAAAAAAAAAANbAAAAAAAABFsAAAAAAAAAAAAABFsAAAAAAAAFWwAAAAAAAAAAAAAFWwAAAAAAAAZbAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAFsAAAAAAAAAWwAAAAAAAAAAAAAAAPC/"
				],
				[
					3349,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAAZbAAAAAAAACFsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABlsAAAAAAAAGWwAAAAAAAAAAAAAAAPC/"
				],
				[
					3350,
					1,
					"insert",
					{
						"characters": "entity_ptr.o"
					},
					"DAAAAAdbAAAAAAAACFsAAAAAAAAAAAAACFsAAAAAAAAJWwAAAAAAAAAAAAAJWwAAAAAAAApbAAAAAAAAAAAAAApbAAAAAAAAC1sAAAAAAAAAAAAAC1sAAAAAAAAMWwAAAAAAAAAAAAAMWwAAAAAAAA1bAAAAAAAAAAAAAA1bAAAAAAAADlsAAAAAAAAAAAAADlsAAAAAAAAPWwAAAAAAAAAAAAAPWwAAAAAAABBbAAAAAAAAAAAAABBbAAAAAAAAEVsAAAAAAAAAAAAAEVsAAAAAAAASWwAAAAAAAAAAAAASWwAAAAAAABNbAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAB1sAAAAAAAAHWwAAAAAAAAAAAAAAAPC/"
				],
				[
					3351,
					1,
					"insert",
					{
						"characters": "rbiting_angle"
					},
					"DQAAABNbAAAAAAAAFFsAAAAAAAAAAAAAFFsAAAAAAAAVWwAAAAAAAAAAAAAVWwAAAAAAABZbAAAAAAAAAAAAABZbAAAAAAAAF1sAAAAAAAAAAAAAF1sAAAAAAAAYWwAAAAAAAAAAAAAYWwAAAAAAABlbAAAAAAAAAAAAABlbAAAAAAAAGlsAAAAAAAAAAAAAGlsAAAAAAAAbWwAAAAAAAAAAAAAbWwAAAAAAABxbAAAAAAAAAAAAABxbAAAAAAAAHVsAAAAAAAAAAAAAHVsAAAAAAAAeWwAAAAAAAAAAAAAeWwAAAAAAAB9bAAAAAAAAAAAAAB9bAAAAAAAAIFsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAE1sAAAAAAAATWwAAAAAAAAAAAAAAAPC/"
				],
				[
					3352,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAACBbAAAAAAAAIVsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIFsAAAAAAAAgWwAAAAAAAAAAAAAAAPC/"
				],
				[
					3353,
					1,
					"insert",
					{
						"characters": " math.TAU"
					},
					"CQAAACFbAAAAAAAAIlsAAAAAAAAAAAAAIlsAAAAAAAAjWwAAAAAAAAAAAAAjWwAAAAAAACRbAAAAAAAAAAAAACRbAAAAAAAAJVsAAAAAAAAAAAAAJVsAAAAAAAAmWwAAAAAAAAAAAAAmWwAAAAAAACdbAAAAAAAAAAAAACdbAAAAAAAAKFsAAAAAAAAAAAAAKFsAAAAAAAApWwAAAAAAAAAAAAApWwAAAAAAACpbAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIVsAAAAAAAAhWwAAAAAAAAAAAAAAAPC/"
				],
				[
					3357,
					1,
					"left_delete",
					null,
					"AQAAADdbAAAAAAAAN1sAAAAAAADoAAAAaWYgZW50aXR5X3B0ci5vcmJpdGluZ19hbmdsZSA+PSBtYXRoLlRBVSAKICAgICAgIAkJCQl7CgkJCQkgICAgICAgIGVudGl0eV9wdHIub3JiaXRpbmdfYW5nbGUgLT0gbWF0aC5UQVUKCQkJCSAgICB9IAoJCQkJICAgIGVsc2UgaWYgZW50aXR5X3B0ci5vcmJpdGluZ19hbmdsZSA8IDAgCgkJCQkgICAgewoJCQkJICAgICAgICBlbnRpdHlfcHRyLm9yYml0aW5nX2FuZ2xlICs9IG1hdGguVEFVCgkJCQkgICAgfQ",
					"AQAAAAAAAAABAAAAH1wAAAAAAAA3WwAAAAAAAAAAAAAAAPC/"
				],
				[
					3358,
					2,
					"delete_word",
					{
						"forward": false
					},
					"AgAAACxbAAAAAAAALFsAAAAAAAALAAAAICAgICAgIAkJCQkrWwAAAAAAACtbAAAAAAAAAQAAAAo",
					"AQAAAAAAAAABAAAAN1sAAAAAAAA3WwAAAAAAAAAAAAAAAPC/"
				],
				[
					3362,
					1,
					"insert",
					{
						"characters": "entity_ptr."
					},
					"CwAAAF9cAAAAAAAAYFwAAAAAAAAAAAAAYFwAAAAAAABhXAAAAAAAAAAAAABhXAAAAAAAAGJcAAAAAAAAAAAAAGJcAAAAAAAAY1wAAAAAAAAAAAAAY1wAAAAAAABkXAAAAAAAAAAAAABkXAAAAAAAAGVcAAAAAAAAAAAAAGVcAAAAAAAAZlwAAAAAAAAAAAAAZlwAAAAAAABnXAAAAAAAAAAAAABnXAAAAAAAAGhcAAAAAAAAAAAAAGhcAAAAAAAAaVwAAAAAAAAAAAAAaVwAAAAAAABqXAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAX1wAAAAAAABfXAAAAAAAAAAAAAAAAPC/"
				],
				[
					3363,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAGpcAAAAAAAAa1wAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAalwAAAAAAABqXAAAAAAAAAAAAAAAAPC/"
				],
				[
					3365,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":10,\"session_name\":\"odin\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "swing_angle_end"
					},
					"AgAAAGpcAAAAAAAAalwAAAAAAAABAAAAc2pcAAAAAAAAeVwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAa1wAAAAAAABrXAAAAAAAAAAAAAAAAPC/"
				],
				[
					3368,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAF5cAAAAAAAAX1wAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXlwAAAAAAABeXAAAAAAAAAAAAAAAAPC/"
				],
				[
					3370,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAHpcAAAAAAAAh1wAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAelwAAAAAAAB6XAAAAAAAAP///////+9/"
				],
				[
					3371,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAIdcAAAAAAAAiVwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAh1wAAAAAAACHXAAAAAAAAAAAAAAAAPC/"
				],
				[
					3372,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BAAAAIhcAAAAAAAAlVwAAAAAAAAAAAAAlVwAAAAAAACiXAAAAAAAAAAAAACJXAAAAAAAAIlcAAAAAAAADAAAACAgICAgICAJCQkJCYlcAAAAAAAAllwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiFwAAAAAAACIXAAAAAAAAAAAAAAAAPC/"
				],
				[
					3373,
					1,
					"insert",
					{
						"characters": "entity_ptr"
					},
					"CgAAAJZcAAAAAAAAl1wAAAAAAAAAAAAAl1wAAAAAAACYXAAAAAAAAAAAAACYXAAAAAAAAJlcAAAAAAAAAAAAAJlcAAAAAAAAmlwAAAAAAAAAAAAAmlwAAAAAAACbXAAAAAAAAAAAAACbXAAAAAAAAJxcAAAAAAAAAAAAAJxcAAAAAAAAnVwAAAAAAAAAAAAAnVwAAAAAAACeXAAAAAAAAAAAAACeXAAAAAAAAJ9cAAAAAAAAAAAAAJ9cAAAAAAAAoFwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAllwAAAAAAACWXAAAAAAAAAAAAAAAAPC/"
				],
				[
					3374,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAKBcAAAAAAAAoVwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoFwAAAAAAACgXAAAAAAAAAAAAAAAAPC/"
				],
				[
					3375,
					1,
					"insert",
					{
						"characters": "orbiting"
					},
					"CAAAAKFcAAAAAAAAolwAAAAAAAAAAAAAolwAAAAAAACjXAAAAAAAAAAAAACjXAAAAAAAAKRcAAAAAAAAAAAAAKRcAAAAAAAApVwAAAAAAAAAAAAApVwAAAAAAACmXAAAAAAAAAAAAACmXAAAAAAAAKdcAAAAAAAAAAAAAKdcAAAAAAAAqFwAAAAAAAAAAAAAqFwAAAAAAACpXAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoVwAAAAAAAChXAAAAAAAAAAAAAAAAPC/"
				],
				[
					3379,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":5,\"session_name\":\"odin\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "orbiting_dir"
					},
					"AgAAAKFcAAAAAAAAoVwAAAAAAAAIAAAAb3JiaXRpbmehXAAAAAAAAK1cAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqVwAAAAAAACpXAAAAAAAAAAAAAAAAPC/"
				],
				[
					3380,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAK1cAAAAAAAArlwAAAAAAAAAAAAArlwAAAAAAACvXAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArVwAAAAAAACtXAAAAAAAAAAAAAAAAPC/"
				],
				[
					3381,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAK9cAAAAAAAAsFwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAr1wAAAAAAACvXAAAAAAAAAAAAAAAAPC/"
				],
				[
					3386,
					1,
					"insert",
					{
						"characters": "-"
					},
					"AQAAALBcAAAAAAAAsVwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsFwAAAAAAACwXAAAAAAAAP///////+9/"
				],
				[
					3387,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAALFcAAAAAAAAs1wAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsVwAAAAAAACxXAAAAAAAAAAAAAAAAPC/"
				],
				[
					3388,
					1,
					"paste",
					null,
					"AQAAALJcAAAAAAAAyVwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAslwAAAAAAACyXAAAAAAAAAAAAAAAAPC/"
				],
				[
					3391,
					1,
					"insert",
					{
						"characters": "\nelse"
					},
					"BQAAANhcAAAAAAAA5VwAAAAAAAAAAAAA5VwAAAAAAADmXAAAAAAAAAAAAADmXAAAAAAAAOdcAAAAAAAAAAAAAOdcAAAAAAAA6FwAAAAAAAAAAAAA6FwAAAAAAADpXAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2FwAAAAAAADYXAAAAAAAAAAAAAAAgIxA"
				],
				[
					3392,
					1,
					"insert",
					{
						"characters": " if"
					},
					"AwAAAOlcAAAAAAAA6lwAAAAAAAAAAAAA6lwAAAAAAADrXAAAAAAAAAAAAADrXAAAAAAAAOxcAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6VwAAAAAAADpXAAAAAAAAAAAAAAAAPC/"
				],
				[
					3393,
					1,
					"insert",
					{
						"characters": " entity_ptr."
					},
					"DAAAAOxcAAAAAAAA7VwAAAAAAAAAAAAA7VwAAAAAAADuXAAAAAAAAAAAAADuXAAAAAAAAO9cAAAAAAAAAAAAAO9cAAAAAAAA8FwAAAAAAAAAAAAA8FwAAAAAAADxXAAAAAAAAAAAAADxXAAAAAAAAPJcAAAAAAAAAAAAAPJcAAAAAAAA81wAAAAAAAAAAAAA81wAAAAAAAD0XAAAAAAAAAAAAAD0XAAAAAAAAPVcAAAAAAAAAAAAAPVcAAAAAAAA9lwAAAAAAAAAAAAA9lwAAAAAAAD3XAAAAAAAAAAAAAD3XAAAAAAAAPhcAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7FwAAAAAAADsXAAAAAAAAAAAAAAAAPC/"
				],
				[
					3394,
					1,
					"insert",
					{
						"characters": "orbiting_angle"
					},
					"DgAAAPhcAAAAAAAA+VwAAAAAAAAAAAAA+VwAAAAAAAD6XAAAAAAAAAAAAAD6XAAAAAAAAPtcAAAAAAAAAAAAAPtcAAAAAAAA/FwAAAAAAAAAAAAA/FwAAAAAAAD9XAAAAAAAAAAAAAD9XAAAAAAAAP5cAAAAAAAAAAAAAP5cAAAAAAAA/1wAAAAAAAAAAAAA/1wAAAAAAAAAXQAAAAAAAAAAAAAAXQAAAAAAAAFdAAAAAAAAAAAAAAFdAAAAAAAAAl0AAAAAAAAAAAAAAl0AAAAAAAADXQAAAAAAAAAAAAADXQAAAAAAAARdAAAAAAAAAAAAAARdAAAAAAAABV0AAAAAAAAAAAAABV0AAAAAAAAGXQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+FwAAAAAAAD4XAAAAAAAAAAAAAAAAPC/"
				],
				[
					3395,
					1,
					"insert",
					{
						"characters": " <="
					},
					"AwAAAAZdAAAAAAAAB10AAAAAAAAAAAAAB10AAAAAAAAIXQAAAAAAAAAAAAAIXQAAAAAAAAldAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABl0AAAAAAAAGXQAAAAAAAAAAAAAAAPC/"
				],
				[
					3396,
					1,
					"insert",
					{
						"characters": " entity_ptr."
					},
					"DAAAAAldAAAAAAAACl0AAAAAAAAAAAAACl0AAAAAAAALXQAAAAAAAAAAAAALXQAAAAAAAAxdAAAAAAAAAAAAAAxdAAAAAAAADV0AAAAAAAAAAAAADV0AAAAAAAAOXQAAAAAAAAAAAAAOXQAAAAAAAA9dAAAAAAAAAAAAAA9dAAAAAAAAEF0AAAAAAAAAAAAAEF0AAAAAAAARXQAAAAAAAAAAAAARXQAAAAAAABJdAAAAAAAAAAAAABJdAAAAAAAAE10AAAAAAAAAAAAAE10AAAAAAAAUXQAAAAAAAAAAAAAUXQAAAAAAABVdAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACV0AAAAAAAAJXQAAAAAAAAAAAAAAAPC/"
				],
				[
					3397,
					1,
					"insert",
					{
						"characters": "swing_angle_"
					},
					"DAAAABVdAAAAAAAAFl0AAAAAAAAAAAAAFl0AAAAAAAAXXQAAAAAAAAAAAAAXXQAAAAAAABhdAAAAAAAAAAAAABhdAAAAAAAAGV0AAAAAAAAAAAAAGV0AAAAAAAAaXQAAAAAAAAAAAAAaXQAAAAAAABtdAAAAAAAAAAAAABtdAAAAAAAAHF0AAAAAAAAAAAAAHF0AAAAAAAAdXQAAAAAAAAAAAAAdXQAAAAAAAB5dAAAAAAAAAAAAAB5dAAAAAAAAH10AAAAAAAAAAAAAH10AAAAAAAAgXQAAAAAAAAAAAAAgXQAAAAAAACFdAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFV0AAAAAAAAVXQAAAAAAAAAAAAAAAPC/"
				],
				[
					3398,
					1,
					"insert",
					{
						"characters": "start"
					},
					"BQAAACFdAAAAAAAAIl0AAAAAAAAAAAAAIl0AAAAAAAAjXQAAAAAAAAAAAAAjXQAAAAAAACRdAAAAAAAAAAAAACRdAAAAAAAAJV0AAAAAAAAAAAAAJV0AAAAAAAAmXQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIV0AAAAAAAAhXQAAAAAAAAAAAAAAAPC/"
				],
				[
					3399,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAACZdAAAAAAAAM10AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJl0AAAAAAAAmXQAAAAAAAAAAAAAAAPC/"
				],
				[
					3400,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAADNdAAAAAAAANV0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAM10AAAAAAAAzXQAAAAAAAAAAAAAAAPC/"
				],
				[
					3401,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BAAAADRdAAAAAAAAQV0AAAAAAAAAAAAAQV0AAAAAAABOXQAAAAAAAAAAAAA1XQAAAAAAADVdAAAAAAAADAAAACAgICAgICAJCQkJCTVdAAAAAAAAQl0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANF0AAAAAAAA0XQAAAAAAAAAAAAAAAPC/"
				],
				[
					3402,
					1,
					"insert",
					{
						"characters": "entity_ptr.or"
					},
					"DQAAAEJdAAAAAAAAQ10AAAAAAAAAAAAAQ10AAAAAAABEXQAAAAAAAAAAAABEXQAAAAAAAEVdAAAAAAAAAAAAAEVdAAAAAAAARl0AAAAAAAAAAAAARl0AAAAAAABHXQAAAAAAAAAAAABHXQAAAAAAAEhdAAAAAAAAAAAAAEhdAAAAAAAASV0AAAAAAAAAAAAASV0AAAAAAABKXQAAAAAAAAAAAABKXQAAAAAAAEtdAAAAAAAAAAAAAEtdAAAAAAAATF0AAAAAAAAAAAAATF0AAAAAAABNXQAAAAAAAAAAAABNXQAAAAAAAE5dAAAAAAAAAAAAAE5dAAAAAAAAT10AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQl0AAAAAAABCXQAAAAAAAAAAAAAAAPC/"
				],
				[
					3403,
					1,
					"insert",
					{
						"characters": "biting_dir"
					},
					"CgAAAE9dAAAAAAAAUF0AAAAAAAAAAAAAUF0AAAAAAABRXQAAAAAAAAAAAABRXQAAAAAAAFJdAAAAAAAAAAAAAFJdAAAAAAAAU10AAAAAAAAAAAAAU10AAAAAAABUXQAAAAAAAAAAAABUXQAAAAAAAFVdAAAAAAAAAAAAAFVdAAAAAAAAVl0AAAAAAAAAAAAAVl0AAAAAAABXXQAAAAAAAAAAAABXXQAAAAAAAFhdAAAAAAAAAAAAAFhdAAAAAAAAWV0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAT10AAAAAAABPXQAAAAAAAAAAAAAAAPC/"
				],
				[
					3404,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAFldAAAAAAAAWl0AAAAAAAAAAAAAWl0AAAAAAABbXQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWV0AAAAAAABZXQAAAAAAAAAAAAAAAPC/"
				],
				[
					3405,
					1,
					"insert",
					{
						"characters": " -"
					},
					"AgAAAFtdAAAAAAAAXF0AAAAAAAAAAAAAXF0AAAAAAABdXQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAW10AAAAAAABbXQAAAAAAAAAAAAAAAPC/"
				],
				[
					3406,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAF1dAAAAAAAAX10AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXV0AAAAAAABdXQAAAAAAAAAAAAAAAPC/"
				],
				[
					3407,
					1,
					"insert",
					{
						"characters": "entity_ptr"
					},
					"CgAAAF5dAAAAAAAAX10AAAAAAAAAAAAAX10AAAAAAABgXQAAAAAAAAAAAABgXQAAAAAAAGFdAAAAAAAAAAAAAGFdAAAAAAAAYl0AAAAAAAAAAAAAYl0AAAAAAABjXQAAAAAAAAAAAABjXQAAAAAAAGRdAAAAAAAAAAAAAGRdAAAAAAAAZV0AAAAAAAAAAAAAZV0AAAAAAABmXQAAAAAAAAAAAABmXQAAAAAAAGddAAAAAAAAAAAAAGddAAAAAAAAaF0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXl0AAAAAAABeXQAAAAAAAAAAAAAAAPC/"
				],
				[
					3408,
					1,
					"insert",
					{
						"characters": ".orbiting_dir"
					},
					"DQAAAGhdAAAAAAAAaV0AAAAAAAAAAAAAaV0AAAAAAABqXQAAAAAAAAAAAABqXQAAAAAAAGtdAAAAAAAAAAAAAGtdAAAAAAAAbF0AAAAAAAAAAAAAbF0AAAAAAABtXQAAAAAAAAAAAABtXQAAAAAAAG5dAAAAAAAAAAAAAG5dAAAAAAAAb10AAAAAAAAAAAAAb10AAAAAAABwXQAAAAAAAAAAAABwXQAAAAAAAHFdAAAAAAAAAAAAAHFdAAAAAAAAcl0AAAAAAAAAAAAAcl0AAAAAAABzXQAAAAAAAAAAAABzXQAAAAAAAHRdAAAAAAAAAAAAAHRdAAAAAAAAdV0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaF0AAAAAAABoXQAAAAAAAAAAAAAAAPC/"
				],
				[
					3415,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAADUVAAAAAAAANhUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANRUAAAAAAAA1FQAAAAAAAAAAAAAAAPC/"
				],
				[
					3416,
					1,
					"insert",
					{
						"characters": " .Swing"
					},
					"BwAAADYVAAAAAAAANxUAAAAAAAAAAAAANxUAAAAAAAA4FQAAAAAAAAAAAAA4FQAAAAAAADkVAAAAAAAAAAAAADkVAAAAAAAAOhUAAAAAAAAAAAAAOhUAAAAAAAA7FQAAAAAAAAAAAAA7FQAAAAAAADwVAAAAAAAAAAAAADwVAAAAAAAAPRUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANhUAAAAAAAA2FQAAAAAAAAAAAAAAAPC/"
				],
				[
					3417,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":8,\"session_name\":\"odin\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "Swing_Around_Parent"
					},
					"AgAAADgVAAAAAAAAOBUAAAAAAAAFAAAAU3dpbmc4FQAAAAAAAEsVAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPRUAAAAAAAA9FQAAAAAAAAAAAAAAAPC/"
				],
				[
					3437,
					1,
					"insert",
					{
						"characters": "entity_ptr"
					},
					"CgAAAFlcAAAAAAAAWlwAAAAAAAAAAAAAWlwAAAAAAABbXAAAAAAAAAAAAABbXAAAAAAAAFxcAAAAAAAAAAAAAFxcAAAAAAAAXVwAAAAAAAAAAAAAXVwAAAAAAABeXAAAAAAAAAAAAABeXAAAAAAAAF9cAAAAAAAAAAAAAF9cAAAAAAAAYFwAAAAAAAAAAAAAYFwAAAAAAABhXAAAAAAAAAAAAABhXAAAAAAAAGJcAAAAAAAAAAAAAGJcAAAAAAAAY1wAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWVwAAAAAAABZXAAAAAAAAAAAAAAAAPC/"
				],
				[
					3438,
					1,
					"insert",
					{
						"characters": ".orbiting_dir"
					},
					"DQAAAGNcAAAAAAAAZFwAAAAAAAAAAAAAZFwAAAAAAABlXAAAAAAAAAAAAABlXAAAAAAAAGZcAAAAAAAAAAAAAGZcAAAAAAAAZ1wAAAAAAAAAAAAAZ1wAAAAAAABoXAAAAAAAAAAAAABoXAAAAAAAAGlcAAAAAAAAAAAAAGlcAAAAAAAAalwAAAAAAAAAAAAAalwAAAAAAABrXAAAAAAAAAAAAABrXAAAAAAAAGxcAAAAAAAAAAAAAGxcAAAAAAAAbVwAAAAAAAAAAAAAbVwAAAAAAABuXAAAAAAAAAAAAABuXAAAAAAAAG9cAAAAAAAAAAAAAG9cAAAAAAAAcFwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAY1wAAAAAAABjXAAAAAAAAAAAAAAAAPC/"
				],
				[
					3439,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHBcAAAAAAAAcVwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcFwAAAAAAABwXAAAAAAAAAAAAAAAAPC/"
				],
				[
					3440,
					1,
					"insert",
					{
						"characters": ">"
					},
					"AQAAAHFcAAAAAAAAclwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcVwAAAAAAABxXAAAAAAAAAAAAAAAAPC/"
				],
				[
					3441,
					1,
					"insert",
					{
						"characters": " 0"
					},
					"AgAAAHJcAAAAAAAAc1wAAAAAAAAAAAAAc1wAAAAAAAB0XAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAclwAAAAAAAByXAAAAAAAAAAAAAAAAPC/"
				],
				[
					3442,
					1,
					"insert",
					{
						"characters": " &&"
					},
					"AwAAAHRcAAAAAAAAdVwAAAAAAAAAAAAAdVwAAAAAAAB2XAAAAAAAAAAAAAB2XAAAAAAAAHdcAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdFwAAAAAAAB0XAAAAAAAAAAAAAAAAPC/"
				],
				[
					3443,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHdcAAAAAAAAeFwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAd1wAAAAAAAB3XAAAAAAAAAAAAAAAAPC/"
				],
				[
					3467,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACFdAAAAAAAAIl0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIV0AAAAAAAAhXQAAAAAAAAAAAAAAAPC/"
				],
				[
					3468,
					1,
					"paste",
					null,
					"AQAAACJdAAAAAAAAPV0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIl0AAAAAAAAiXQAAAAAAAAAAAAAAAPC/"
				],
				[
					3470,
					1,
					"left_delete",
					null,
					"AQAAADpdAAAAAAAAOl0AAAAAAAABAAAAPg",
					"AQAAAAAAAAABAAAAO10AAAAAAAA7XQAAAAAAAAAAAAAAAPC/"
				],
				[
					3471,
					1,
					"insert",
					{
						"characters": "<"
					},
					"AQAAADpdAAAAAAAAO10AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOl0AAAAAAAA6XQAAAAAAAAAAAAAAAPC/"
				],
				[
					3475,
					1,
					"insert",
					{
						"characters": " &&"
					},
					"AwAAAD1dAAAAAAAAPl0AAAAAAAAAAAAAPl0AAAAAAAA/XQAAAAAAAAAAAAA/XQAAAAAAAEBdAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPV0AAAAAAAA9XQAAAAAAAAAAAAAAAPC/"
				],
				[
					3483,
					1,
					"insert",
					{
						"characters": "180"
					},
					"AwAAAKgVAAAAAAAAqRUAAAAAAAADAAAAMjcwqRUAAAAAAACqFQAAAAAAAAAAAACqFQAAAAAAAKsVAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqBUAAAAAAACrFQAAAAAAAAAAAAAAAPC/"
				],
				[
					3488,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAANUVAAAAAAAA1hUAAAAAAAACAAAAOTA",
					"AQAAAAAAAAABAAAA1RUAAAAAAADXFQAAAAAAAAAAAAAAAPC/"
				],
				[
					3496,
					1,
					"insert",
					{
						"characters": " -"
					},
					"AgAAAKsVAAAAAAAArBUAAAAAAAAAAAAArBUAAAAAAACtFQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqxUAAAAAAACrFQAAAAAAAAAAAAAAAPC/"
				],
				[
					3497,
					1,
					"insert",
					{
						"characters": " 10"
					},
					"AwAAAK0VAAAAAAAArhUAAAAAAAAAAAAArhUAAAAAAACvFQAAAAAAAAAAAACvFQAAAAAAALAVAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArRUAAAAAAACtFQAAAAAAAAAAAAAAAPC/"
				],
				[
					3501,
					1,
					"insert",
					{
						"characters": " +"
					},
					"AgAAANsVAAAAAAAA3BUAAAAAAAAAAAAA3BUAAAAAAADdFQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2xUAAAAAAADbFQAAAAAAAAAAAAAAAPC/"
				],
				[
					3502,
					1,
					"insert",
					{
						"characters": " 10"
					},
					"AwAAAN0VAAAAAAAA3hUAAAAAAAAAAAAA3hUAAAAAAADfFQAAAAAAAAAAAADfFQAAAAAAAOAVAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3RUAAAAAAADdFQAAAAAAAAAAAAAAAPC/"
				],
				[
					3506,
					1,
					"cut",
					null,
					"AQAAALoIAAAAAAAAuggAAAAAAAAuAAAAZW50aXRpZXMgOiBIYW5kbGVfQXJyYXkoRW50aXR5LCBFbnRpdHlfSGFuZGxlKQ",
					"AQAAAAAAAAABAAAA6AgAAAAAAAC6CAAAAAAAAAAAAAAAAPC/"
				],
				[
					3509,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AwAAALYIAAAAAAAAuAgAAAAAAAAAAAAAuAgAAAAAAAC6CAAAAAAAAAAAAAC3CAAAAAAAALcIAAAAAAAAAQAAAAk",
					"AQAAAAAAAAABAAAAtggAAAAAAAC2CAAAAAAAAAAAAAAAAPC/"
				],
				[
					3510,
					1,
					"paste",
					null,
					"AQAAALkIAAAAAAAA5wgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuQgAAAAAAAC5CAAAAAAAAAAAAAAAAPC/"
				],
				[
					3511,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAOcIAAAAAAAA6AgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5wgAAAAAAADnCAAAAAAAAAAAAAAAAPC/"
				],
				[
					3517,
					1,
					"cut",
					null,
					"AQAAALgIAAAAAAAAuAgAAAAAAAAxAAAACWVudGl0aWVzIDogSGFuZGxlX0FycmF5KEVudGl0eSwgRW50aXR5X0hhbmRsZSksCg",
					"AQAAAAAAAAABAAAAzQgAAAAAAADNCAAAAAAAAAAAAAAAAPC/"
				],
				[
					3523,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAFYiAAAAAAAAVyIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAViIAAAAAAABWIgAAAAAAAAAAAAAAAAAA"
				],
				[
					3524,
					1,
					"paste",
					null,
					"AQAAAFciAAAAAAAAiCIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVyIAAAAAAABXIgAAAAAAAAAAAAAAAPC/"
				],
				[
					3583,
					1,
					"insert",
					{
						"characters": "game_state"
					},
					"aAEAAI5iAAAAAAAAj2IAAAAAAAAAAAAACF8AAAAAAAAJXwAAAAAAAAAAAABmWAAAAAAAAGdYAAAAAAAAAAAAANFXAAAAAAAA0lcAAAAAAAAAAAAA5FEAAAAAAADlUQAAAAAAAAAAAACRTwAAAAAAAJJPAAAAAAAAAAAAAFtPAAAAAAAAXE8AAAAAAAAAAAAAki4AAAAAAACTLgAAAAAAAAAAAAApLgAAAAAAACouAAAAAAAAAAAAAC4rAAAAAAAALysAAAAAAAAAAAAAFCoAAAAAAAAVKgAAAAAAAAAAAADRKAAAAAAAANIoAAAAAAAAAAAAACEWAAAAAAAAIhYAAAAAAAAAAAAAqxQAAAAAAACsFAAAAAAAAAAAAADlEwAAAAAAAOYTAAAAAAAAAAAAADATAAAAAAAAMRMAAAAAAAAAAAAAoBIAAAAAAAChEgAAAAAAAAAAAAA2EgAAAAAAADcSAAAAAAAAAAAAALIRAAAAAAAAsxEAAAAAAAAAAAAAHxEAAAAAAAAgEQAAAAAAAAAAAAC1EAAAAAAAALYQAAAAAAAAAAAAAEsQAAAAAAAATBAAAAAAAAAAAAAA4Q8AAAAAAADiDwAAAAAAAAAAAAB3DwAAAAAAAHgPAAAAAAAAAAAAAA4PAAAAAAAADw8AAAAAAAAAAAAApQ4AAAAAAACmDgAAAAAAAAAAAAA8DgAAAAAAAD0OAAAAAAAAAAAAANQNAAAAAAAA1Q0AAAAAAAAAAAAAZA0AAAAAAABlDQAAAAAAAAAAAAD+DAAAAAAAAP8MAAAAAAAAAAAAAJgMAAAAAAAAmQwAAAAAAAAAAAAAMgwAAAAAAAAzDAAAAAAAAAAAAADMCwAAAAAAAM0LAAAAAAAAAAAAAGYLAAAAAAAAZwsAAAAAAAAAAAAA7gkAAAAAAADvCQAAAAAAAAAAAAA3CQAAAAAAADgJAAAAAAAAAAAAALJiAAAAAAAAs2IAAAAAAAAAAAAAK18AAAAAAAAsXwAAAAAAAAAAAACIWAAAAAAAAIlYAAAAAAAAAAAAAPJXAAAAAAAA81cAAAAAAAAAAAAABFIAAAAAAAAFUgAAAAAAAAAAAACwTwAAAAAAALFPAAAAAAAAAAAAAHlPAAAAAAAAek8AAAAAAAAAAAAAry4AAAAAAACwLgAAAAAAAAAAAABFLgAAAAAAAEYuAAAAAAAAAAAAAEkrAAAAAAAASisAAAAAAAAAAAAALioAAAAAAAAvKgAAAAAAAAAAAADqKAAAAAAAAOsoAAAAAAAAAAAAADkWAAAAAAAAOhYAAAAAAAAAAAAAwhQAAAAAAADDFAAAAAAAAAAAAAD7EwAAAAAAAPwTAAAAAAAAAAAAAEUTAAAAAAAARhMAAAAAAAAAAAAAtBIAAAAAAAC1EgAAAAAAAAAAAABJEgAAAAAAAEoSAAAAAAAAAAAAAMQRAAAAAAAAxREAAAAAAAAAAAAAMBEAAAAAAAAxEQAAAAAAAAAAAADFEAAAAAAAAMYQAAAAAAAAAAAAAFoQAAAAAAAAWxAAAAAAAAAAAAAA7w8AAAAAAADwDwAAAAAAAAAAAACEDwAAAAAAAIUPAAAAAAAAAAAAABoPAAAAAAAAGw8AAAAAAAAAAAAAsA4AAAAAAACxDgAAAAAAAAAAAABGDgAAAAAAAEcOAAAAAAAAAAAAAN0NAAAAAAAA3g0AAAAAAAAAAAAAbA0AAAAAAABtDQAAAAAAAAAAAAAFDQAAAAAAAAYNAAAAAAAAAAAAAJ4MAAAAAAAAnwwAAAAAAAAAAAAANwwAAAAAAAA4DAAAAAAAAAAAAADQCwAAAAAAANELAAAAAAAAAAAAAGkLAAAAAAAAagsAAAAAAAAAAAAA8AkAAAAAAADxCQAAAAAAAAAAAAA4CQAAAAAAADkJAAAAAAAAAAAAANZiAAAAAAAA12IAAAAAAAAAAAAATl8AAAAAAABPXwAAAAAAAAAAAACqWAAAAAAAAKtYAAAAAAAAAAAAABNYAAAAAAAAFFgAAAAAAAAAAAAAJFIAAAAAAAAlUgAAAAAAAAAAAADPTwAAAAAAANBPAAAAAAAAAAAAAJdPAAAAAAAAmE8AAAAAAAAAAAAAzC4AAAAAAADNLgAAAAAAAAAAAABhLgAAAAAAAGIuAAAAAAAAAAAAAGQrAAAAAAAAZSsAAAAAAAAAAAAASCoAAAAAAABJKgAAAAAAAAAAAAADKQAAAAAAAAQpAAAAAAAAAAAAAFEWAAAAAAAAUhYAAAAAAAAAAAAA2RQAAAAAAADaFAAAAAAAAAAAAAARFAAAAAAAABIUAAAAAAAAAAAAAFoTAAAAAAAAWxMAAAAAAAAAAAAAyBIAAAAAAADJEgAAAAAAAAAAAABcEgAAAAAAAF0SAAAAAAAAAAAAANYRAAAAAAAA1xEAAAAAAAAAAAAAQREAAAAAAABCEQAAAAAAAAAAAADVEAAAAAAAANYQAAAAAAAAAAAAAGkQAAAAAAAAahAAAAAAAAAAAAAA/Q8AAAAAAAD+DwAAAAAAAAAAAACRDwAAAAAAAJIPAAAAAAAAAAAAACYPAAAAAAAAJw8AAAAAAAAAAAAAuw4AAAAAAAC8DgAAAAAAAAAAAABQDgAAAAAAAFEOAAAAAAAAAAAAAOYNAAAAAAAA5w0AAAAAAAAAAAAAdA0AAAAAAAB1DQAAAAAAAAAAAAAMDQAAAAAAAA0NAAAAAAAAAAAAAKQMAAAAAAAApQwAAAAAAAAAAAAAPAwAAAAAAAA9DAAAAAAAAAAAAADUCwAAAAAAANULAAAAAAAAAAAAAGwLAAAAAAAAbQsAAAAAAAAAAAAA8gkAAAAAAADzCQAAAAAAAAAAAAA5CQAAAAAAADoJAAAAAAAAAAAAAPpiAAAAAAAA+2IAAAAAAAAAAAAAcV8AAAAAAAByXwAAAAAAAAAAAADMWAAAAAAAAM1YAAAAAAAAAAAAADRYAAAAAAAANVgAAAAAAAAAAAAARFIAAAAAAABFUgAAAAAAAAAAAADuTwAAAAAAAO9PAAAAAAAAAAAAALVPAAAAAAAAtk8AAAAAAAAAAAAA6S4AAAAAAADqLgAAAAAAAAAAAAB9LgAAAAAAAH4uAAAAAAAAAAAAAH8rAAAAAAAAgCsAAAAAAAAAAAAAYioAAAAAAABjKgAAAAAAAAAAAAAcKQAAAAAAAB0pAAAAAAAAAAAAAGkWAAAAAAAAahYAAAAAAAAAAAAA8BQAAAAAAADxFAAAAAAAAAAAAAAnFAAAAAAAACgUAAAAAAAAAAAAAG8TAAAAAAAAcBMAAAAAAAAAAAAA3BIAAAAAAADdEgAAAAAAAAAAAABvEgAAAAAAAHASAAAAAAAAAAAAAOgRAAAAAAAA6REAAAAAAAAAAAAAUhEAAAAAAABTEQAAAAAAAAAAAADlEAAAAAAAAOYQAAAAAAAAAAAAAHgQAAAAAAAAeRAAAAAAAAAAAAAACxAAAAAAAAAMEAAAAAAAAAAAAACeDwAAAAAAAJ8PAAAAAAAAAAAAADIPAAAAAAAAMw8AAAAAAAAAAAAAxg4AAAAAAADHDgAAAAAAAAAAAABaDgAAAAAAAFsOAAAAAAAAAAAAAO8NAAAAAAAA8A0AAAAAAAAAAAAAfA0AAAAAAAB9DQAAAAAAAAAAAAATDQAAAAAAABQNAAAAAAAAAAAAAKoMAAAAAAAAqwwAAAAAAAAAAAAAQQwAAAAAAABCDAAAAAAAAAAAAADYCwAAAAAAANkLAAAAAAAAAAAAAG8LAAAAAAAAcAsAAAAAAAAAAAAA9AkAAAAAAAD1CQAAAAAAAAAAAAA6CQAAAAAAADsJAAAAAAAAAAAAAB5jAAAAAAAAH2MAAAAAAAAAAAAAlF8AAAAAAACVXwAAAAAAAAAAAADuWAAAAAAAAO9YAAAAAAAAAAAAAFVYAAAAAAAAVlgAAAAAAAAAAAAAZFIAAAAAAABlUgAAAAAAAAAAAAANUAAAAAAAAA5QAAAAAAAAAAAAANNPAAAAAAAA1E8AAAAAAAAAAAAABi8AAAAAAAAHLwAAAAAAAAAAAACZLgAAAAAAAJouAAAAAAAAAAAAAJorAAAAAAAAmysAAAAAAAAAAAAAfCoAAAAAAAB9KgAAAAAAAAAAAAA1KQAAAAAAADYpAAAAAAAAAAAAAIEWAAAAAAAAghYAAAAAAAAAAAAABxUAAAAAAAAIFQAAAAAAAAAAAAA9FAAAAAAAAD4UAAAAAAAAAAAAAIQTAAAAAAAAhRMAAAAAAAAAAAAA8BIAAAAAAADxEgAAAAAAAAAAAACCEgAAAAAAAIMSAAAAAAAAAAAAAPoRAAAAAAAA+xEAAAAAAAAAAAAAYxEAAAAAAABkEQAAAAAAAAAAAAD1EAAAAAAAAPYQAAAAAAAAAAAAAIcQAAAAAAAAiBAAAAAAAAAAAAAAGRAAAAAAAAAaEAAAAAAAAAAAAACrDwAAAAAAAKwPAAAAAAAAAAAAAD4PAAAAAAAAPw8AAAAAAAAAAAAA0Q4AAAAAAADSDgAAAAAAAAAAAABkDgAAAAAAAGUOAAAAAAAAAAAAAPgNAAAAAAAA+Q0AAAAAAAAAAAAAhA0AAAAAAACFDQAAAAAAAAAAAAAaDQAAAAAAABsNAAAAAAAAAAAAALAMAAAAAAAAsQwAAAAAAAAAAAAARgwAAAAAAABHDAAAAAAAAAAAAADcCwAAAAAAAN0LAAAAAAAAAAAAAHILAAAAAAAAcwsAAAAAAAAAAAAA9gkAAAAAAAD3CQAAAAAAAAAAAAA7CQAAAAAAADwJAAAAAAAAAAAAAEJjAAAAAAAAQ2MAAAAAAAAAAAAAt18AAAAAAAC4XwAAAAAAAAAAAAAQWQAAAAAAABFZAAAAAAAAAAAAAHZYAAAAAAAAd1gAAAAAAAAAAAAAhFIAAAAAAACFUgAAAAAAAAAAAAAsUAAAAAAAAC1QAAAAAAAAAAAAAPFPAAAAAAAA8k8AAAAAAAAAAAAAIy8AAAAAAAAkLwAAAAAAAAAAAAC1LgAAAAAAALYuAAAAAAAAAAAAALUrAAAAAAAAtisAAAAAAAAAAAAAlioAAAAAAACXKgAAAAAAAAAAAABOKQAAAAAAAE8pAAAAAAAAAAAAAJkWAAAAAAAAmhYAAAAAAAAAAAAAHhUAAAAAAAAfFQAAAAAAAAAAAABTFAAAAAAAAFQUAAAAAAAAAAAAAJkTAAAAAAAAmhMAAAAAAAAAAAAABBMAAAAAAAAFEwAAAAAAAAAAAACVEgAAAAAAAJYSAAAAAAAAAAAAAAwSAAAAAAAADRIAAAAAAAAAAAAAdBEAAAAAAAB1EQAAAAAAAAAAAAAFEQAAAAAAAAYRAAAAAAAAAAAAAJYQAAAAAAAAlxAAAAAAAAAAAAAAJxAAAAAAAAAoEAAAAAAAAAAAAAC4DwAAAAAAALkPAAAAAAAAAAAAAEoPAAAAAAAASw8AAAAAAAAAAAAA3A4AAAAAAADdDgAAAAAAAAAAAABuDgAAAAAAAG8OAAAAAAAAAAAAAAEOAAAAAAAAAg4AAAAAAAAAAAAAjA0AAAAAAACNDQAAAAAAAAAAAAAhDQAAAAAAACINAAAAAAAAAAAAALYMAAAAAAAAtwwAAAAAAAAAAAAASwwAAAAAAABMDAAAAAAAAAAAAADgCwAAAAAAAOELAAAAAAAAAAAAAHULAAAAAAAAdgsAAAAAAAAAAAAA+AkAAAAAAAD5CQAAAAAAAAAAAAA8CQAAAAAAAD0JAAAAAAAAAAAAAGZjAAAAAAAAZ2MAAAAAAAAAAAAA2l8AAAAAAADbXwAAAAAAAAAAAAAyWQAAAAAAADNZAAAAAAAAAAAAAJdYAAAAAAAAmFgAAAAAAAAAAAAApFIAAAAAAAClUgAAAAAAAAAAAABLUAAAAAAAAExQAAAAAAAAAAAAAA9QAAAAAAAAEFAAAAAAAAAAAAAAQC8AAAAAAABBLwAAAAAAAAAAAADRLgAAAAAAANIuAAAAAAAAAAAAANArAAAAAAAA0SsAAAAAAAAAAAAAsCoAAAAAAACxKgAAAAAAAAAAAABnKQAAAAAAAGgpAAAAAAAAAAAAALEWAAAAAAAAshYAAAAAAAAAAAAANRUAAAAAAAA2FQAAAAAAAAAAAABpFAAAAAAAAGoUAAAAAAAAAAAAAK4TAAAAAAAArxMAAAAAAAAAAAAAGBMAAAAAAAAZEwAAAAAAAAAAAACoEgAAAAAAAKkSAAAAAAAAAAAAAB4SAAAAAAAAHxIAAAAAAAAAAAAAhREAAAAAAACGEQAAAAAAAAAAAAAVEQAAAAAAABYRAAAAAAAAAAAAAKUQAAAAAAAAphAAAAAAAAAAAAAANRAAAAAAAAA2EAAAAAAAAAAAAADFDwAAAAAAAMYPAAAAAAAAAAAAAFYPAAAAAAAAVw8AAAAAAAAAAAAA5w4AAAAAAADoDgAAAAAAAAAAAAB4DgAAAAAAAHkOAAAAAAAAAAAAAAoOAAAAAAAACw4AAAAAAAAAAAAAlA0AAAAAAACVDQAAAAAAAAAAAAAoDQAAAAAAACkNAAAAAAAAAAAAALwMAAAAAAAAvQwAAAAAAAAAAAAAUAwAAAAAAABRDAAAAAAAAAAAAADkCwAAAAAAAOULAAAAAAAAAAAAAHgLAAAAAAAAeQsAAAAAAAAAAAAA+gkAAAAAAAD7CQAAAAAAAAAAAAA9CQAAAAAAAD4JAAAAAAAAAAAAAIpjAAAAAAAAi2MAAAAAAAAAAAAA/V8AAAAAAAD+XwAAAAAAAAAAAABUWQAAAAAAAFVZAAAAAAAAAAAAALhYAAAAAAAAuVgAAAAAAAAAAAAAxFIAAAAAAADFUgAAAAAAAAAAAABqUAAAAAAAAGtQAAAAAAAAAAAAAC1QAAAAAAAALlAAAAAAAAAAAAAAXS8AAAAAAABeLwAAAAAAAAAAAADtLgAAAAAAAO4uAAAAAAAAAAAAAOsrAAAAAAAA7CsAAAAAAAAAAAAAyioAAAAAAADLKgAAAAAAAAAAAACAKQAAAAAAAIEpAAAAAAAAAAAAAMkWAAAAAAAAyhYAAAAAAAAAAAAATBUAAAAAAABNFQAAAAAAAAAAAAB/FAAAAAAAAIAUAAAAAAAAAAAAAMMTAAAAAAAAxBMAAAAAAAAAAAAALBMAAAAAAAAtEwAAAAAAAAAAAAC7EgAAAAAAALwSAAAAAAAAAAAAADASAAAAAAAAMRIAAAAAAAAAAAAAlhEAAAAAAACXEQAAAAAAAAAAAAAlEQAAAAAAACYRAAAAAAAAAAAAALQQAAAAAAAAtRAAAAAAAAAAAAAAQxAAAAAAAABEEAAAAAAAAAAAAADSDwAAAAAAANMPAAAAAAAAAAAAAGIPAAAAAAAAYw8AAAAAAAAAAAAA8g4AAAAAAADzDgAAAAAAAAAAAACCDgAAAAAAAIMOAAAAAAAAAAAAABMOAAAAAAAAFA4AAAAAAAAAAAAAnA0AAAAAAACdDQAAAAAAAAAAAAAvDQAAAAAAADANAAAAAAAAAAAAAMIMAAAAAAAAwwwAAAAAAAAAAAAAVQwAAAAAAABWDAAAAAAAAAAAAADoCwAAAAAAAOkLAAAAAAAAAAAAAHsLAAAAAAAAfAsAAAAAAAAAAAAA/AkAAAAAAAD9CQAAAAAAAAAAAAA+CQAAAAAAAD8JAAAAAAAAAAAAAK5jAAAAAAAAr2MAAAAAAAAAAAAAIGAAAAAAAAAhYAAAAAAAAAAAAAB2WQAAAAAAAHdZAAAAAAAAAAAAANlYAAAAAAAA2lgAAAAAAAAAAAAA5FIAAAAAAADlUgAAAAAAAAAAAACJUAAAAAAAAIpQAAAAAAAAAAAAAEtQAAAAAAAATFAAAAAAAAAAAAAAei8AAAAAAAB7LwAAAAAAAAAAAAAJLwAAAAAAAAovAAAAAAAAAAAAAAYsAAAAAAAABywAAAAAAAAAAAAA5CoAAAAAAADlKgAAAAAAAAAAAACZKQAAAAAAAJopAAAAAAAAAAAAAOEWAAAAAAAA4hYAAAAAAAAAAAAAYxUAAAAAAABkFQAAAAAAAAAAAACVFAAAAAAAAJYUAAAAAAAAAAAAANgTAAAAAAAA2RMAAAAAAAAAAAAAQBMAAAAAAABBEwAAAAAAAAAAAADOEgAAAAAAAM8SAAAAAAAAAAAAAEISAAAAAAAAQxIAAAAAAAAAAAAApxEAAAAAAACoEQAAAAAAAAAAAAA1EQAAAAAAADYRAAAAAAAAAAAAAMMQAAAAAAAAxBAAAAAAAAAAAAAAURAAAAAAAABSEAAAAAAAAAAAAADfDwAAAAAAAOAPAAAAAAAAAAAAAG4PAAAAAAAAbw8AAAAAAAAAAAAA/Q4AAAAAAAD+DgAAAAAAAAAAAACMDgAAAAAAAI0OAAAAAAAAAAAAABwOAAAAAAAAHQ4AAAAAAAAAAAAApA0AAAAAAAClDQAAAAAAAAAAAAA2DQAAAAAAADcNAAAAAAAAAAAAAMgMAAAAAAAAyQwAAAAAAAAAAAAAWgwAAAAAAABbDAAAAAAAAAAAAADsCwAAAAAAAO0LAAAAAAAAAAAAAH4LAAAAAAAAfwsAAAAAAAAAAAAA/gkAAAAAAAD/CQAAAAAAAAAAAAA/CQAAAAAAAEAJAAAAAAAAAAAAANJjAAAAAAAA02MAAAAAAAAAAAAAQ2AAAAAAAABEYAAAAAAAAAAAAACYWQAAAAAAAJlZAAAAAAAAAAAAAPpYAAAAAAAA+1gAAAAAAAAAAAAABFMAAAAAAAAFUwAAAAAAAAAAAACoUAAAAAAAAKlQAAAAAAAAAAAAAGlQAAAAAAAAalAAAAAAAAAAAAAAly8AAAAAAACYLwAAAAAAAAAAAAAlLwAAAAAAACYvAAAAAAAAAAAAACEsAAAAAAAAIiwAAAAAAAAAAAAA/ioAAAAAAAD/KgAAAAAAAAAAAACyKQAAAAAAALMpAAAAAAAAAAAAAPkWAAAAAAAA+hYAAAAAAAAAAAAAehUAAAAAAAB7FQAAAAAAAAAAAACrFAAAAAAAAKwUAAAAAAAAAAAAAO0TAAAAAAAA7hMAAAAAAAAAAAAAVBMAAAAAAABVEwAAAAAAAAAAAADhEgAAAAAAAOISAAAAAAAAAAAAAFQSAAAAAAAAVRIAAAAAAAAAAAAAuBEAAAAAAAC5EQAAAAAAAAAAAABFEQAAAAAAAEYRAAAAAAAAAAAAANIQAAAAAAAA0xAAAAAAAAAAAAAAXxAAAAAAAABgEAAAAAAAAAAAAADsDwAAAAAAAO0PAAAAAAAAAAAAAHoPAAAAAAAAew8AAAAAAAAAAAAACA8AAAAAAAAJDwAAAAAAAAAAAACWDgAAAAAAAJcOAAAAAAAAAAAAACUOAAAAAAAAJg4AAAAAAAAAAAAArA0AAAAAAACtDQAAAAAAAAAAAAA9DQAAAAAAAD4NAAAAAAAAAAAAAM4MAAAAAAAAzwwAAAAAAAAAAAAAXwwAAAAAAABgDAAAAAAAAAAAAADwCwAAAAAAAPELAAAAAAAAAAAAAIELAAAAAAAAggsAAAAAAAAAAAAAAAoAAAAAAAABCgAAAAAAAAAAAABACQAAAAAAAEEJAAAAAAAAAAAAAA",
					"AQAAAAAAAAAkAAAANwkAAAAAAAA3CQAAAAAAAAAAAAAAAPC/7gkAAAAAAADuCQAAAAAAAAAAAAAAAPC/ZgsAAAAAAABmCwAAAAAAAAAAAAAAAPC/zAsAAAAAAADMCwAAAAAAAAAAAAAAAPC/MgwAAAAAAAAyDAAAAAAAAAAAAAAAAPC/mAwAAAAAAACYDAAAAAAAAAAAAAAAAPC//gwAAAAAAAD+DAAAAAAAAAAAAAAAAPC/ZA0AAAAAAABkDQAAAAAAAAAAAAAAAPC/1A0AAAAAAADUDQAAAAAAAAAAAAAAAPC/PA4AAAAAAAA8DgAAAAAAAAAAAAAAAPC/pQ4AAAAAAAClDgAAAAAAAAAAAAAAAPC/Dg8AAAAAAAAODwAAAAAAAAAAAAAAAPC/dw8AAAAAAAB3DwAAAAAAAAAAAAAAAPC/4Q8AAAAAAADhDwAAAAAAAAAAAAAAAPC/SxAAAAAAAABLEAAAAAAAAAAAAAAAAPC/tRAAAAAAAAC1EAAAAAAAAAAAAAAAAPC/HxEAAAAAAAAfEQAAAAAAAAAAAAAAAPC/shEAAAAAAACyEQAAAAAAAAAAAAAAAPC/NhIAAAAAAAA2EgAAAAAAAAAAAAAAAPC/oBIAAAAAAACgEgAAAAAAAAAAAAAAAPC/MBMAAAAAAAAwEwAAAAAAAAAAAAAAAPC/5RMAAAAAAADlEwAAAAAAAAAAAAAAAPC/qxQAAAAAAACrFAAAAAAAAAAAAAAAAPC/IRYAAAAAAAAhFgAAAAAAAAAAAAAAAPC/0SgAAAAAAADRKAAAAAAAAAAAAAAAAPC/FCoAAAAAAAAUKgAAAAAAAAAAAAAAAPC/LisAAAAAAAAuKwAAAAAAAAAAAAAAAPC/KS4AAAAAAAApLgAAAAAAAAAAAAAAAPC/ki4AAAAAAACSLgAAAAAAAAAAAAAAAPC/W08AAAAAAABbTwAAAAAAAAAAAAAAAPC/kU8AAAAAAACRTwAAAAAAAAAAAAAAAPC/5FEAAAAAAADkUQAAAAAAAAAAAAAAAPC/0VcAAAAAAADRVwAAAAAAAAAAAAAAAPC/ZlgAAAAAAABmWAAAAAAAAAAAAAAAAPC/CF8AAAAAAAAIXwAAAAAAAAAAAAAAAPC/jmIAAAAAAACOYgAAAAAAAAAAAAAAAPC/"
				],
				[
					3584,
					1,
					"insert",
					{
						"characters": "."
					},
					"JAAAAPZjAAAAAAAA92MAAAAAAAAAAAAAZmAAAAAAAABnYAAAAAAAAAAAAAC6WQAAAAAAALtZAAAAAAAAAAAAABtZAAAAAAAAHFkAAAAAAAAAAAAAJFMAAAAAAAAlUwAAAAAAAAAAAADHUAAAAAAAAMhQAAAAAAAAAAAAAIdQAAAAAAAAiFAAAAAAAAAAAAAAtC8AAAAAAAC1LwAAAAAAAAAAAABBLwAAAAAAAEIvAAAAAAAAAAAAADwsAAAAAAAAPSwAAAAAAAAAAAAAGCsAAAAAAAAZKwAAAAAAAAAAAADLKQAAAAAAAMwpAAAAAAAAAAAAABEXAAAAAAAAEhcAAAAAAAAAAAAAkRUAAAAAAACSFQAAAAAAAAAAAADBFAAAAAAAAMIUAAAAAAAAAAAAAAIUAAAAAAAAAxQAAAAAAAAAAAAAaBMAAAAAAABpEwAAAAAAAAAAAAD0EgAAAAAAAPUSAAAAAAAAAAAAAGYSAAAAAAAAZxIAAAAAAAAAAAAAyREAAAAAAADKEQAAAAAAAAAAAABVEQAAAAAAAFYRAAAAAAAAAAAAAOEQAAAAAAAA4hAAAAAAAAAAAAAAbRAAAAAAAABuEAAAAAAAAAAAAAD5DwAAAAAAAPoPAAAAAAAAAAAAAIYPAAAAAAAAhw8AAAAAAAAAAAAAEw8AAAAAAAAUDwAAAAAAAAAAAACgDgAAAAAAAKEOAAAAAAAAAAAAAC4OAAAAAAAALw4AAAAAAAAAAAAAtA0AAAAAAAC1DQAAAAAAAAAAAABEDQAAAAAAAEUNAAAAAAAAAAAAANQMAAAAAAAA1QwAAAAAAAAAAAAAZAwAAAAAAABlDAAAAAAAAAAAAAD0CwAAAAAAAPULAAAAAAAAAAAAAIQLAAAAAAAAhQsAAAAAAAAAAAAAAgoAAAAAAAADCgAAAAAAAAAAAABBCQAAAAAAAEIJAAAAAAAAAAAAAA",
					"AQAAAAAAAAAkAAAAQQkAAAAAAABBCQAAAAAAAAAAAAAAAPC/AgoAAAAAAAACCgAAAAAAAAAAAAAAAPC/hAsAAAAAAACECwAAAAAAAAAAAAAAAPC/9AsAAAAAAAD0CwAAAAAAAAAAAAAAAPC/ZAwAAAAAAABkDAAAAAAAAAAAAAAAAPC/1AwAAAAAAADUDAAAAAAAAAAAAAAAAPC/RA0AAAAAAABEDQAAAAAAAAAAAAAAAPC/tA0AAAAAAAC0DQAAAAAAAAAAAAAAAPC/Lg4AAAAAAAAuDgAAAAAAAAAAAAAAAPC/oA4AAAAAAACgDgAAAAAAAAAAAAAAAPC/Ew8AAAAAAAATDwAAAAAAAAAAAAAAAPC/hg8AAAAAAACGDwAAAAAAAAAAAAAAAPC/+Q8AAAAAAAD5DwAAAAAAAAAAAAAAAPC/bRAAAAAAAABtEAAAAAAAAAAAAAAAAPC/4RAAAAAAAADhEAAAAAAAAAAAAAAAAPC/VREAAAAAAABVEQAAAAAAAAAAAAAAAPC/yREAAAAAAADJEQAAAAAAAAAAAAAAAPC/ZhIAAAAAAABmEgAAAAAAAAAAAAAAAPC/9BIAAAAAAAD0EgAAAAAAAAAAAAAAAPC/aBMAAAAAAABoEwAAAAAAAAAAAAAAAPC/AhQAAAAAAAACFAAAAAAAAAAAAAAAAPC/wRQAAAAAAADBFAAAAAAAAAAAAAAAAPC/kRUAAAAAAACRFQAAAAAAAAAAAAAAAPC/ERcAAAAAAAARFwAAAAAAAAAAAAAAAPC/yykAAAAAAADLKQAAAAAAAAAAAAAAAPC/GCsAAAAAAAAYKwAAAAAAAAAAAAAAAPC/PCwAAAAAAAA8LAAAAAAAAAAAAAAAAPC/QS8AAAAAAABBLwAAAAAAAAAAAAAAAPC/tC8AAAAAAAC0LwAAAAAAAAAAAAAAAPC/h1AAAAAAAACHUAAAAAAAAAAAAAAAAPC/x1AAAAAAAADHUAAAAAAAAAAAAAAAAPC/JFMAAAAAAAAkUwAAAAAAAAAAAAAAAPC/G1kAAAAAAAAbWQAAAAAAAAAAAAAAAPC/ulkAAAAAAAC6WQAAAAAAAAAAAAAAAPC/ZmAAAAAAAABmYAAAAAAAAAAAAAAAAPC/9mMAAAAAAAD2YwAAAAAAAAAAAAAAAPC/"
				],
				[
					3642,
					1,
					"left_delete",
					null,
					"JAAAAA9kAAAAAAAAD2QAAAAAAAALAAAAZ2FtZV9zdGF0ZS5+YAAAAAAAAH5gAAAAAAAACwAAAGdhbWVfc3RhdGUu0VkAAAAAAADRWQAAAAAAAAsAAABnYW1lX3N0YXRlLjFZAAAAAAAAMVkAAAAAAAALAAAAZ2FtZV9zdGF0ZS45UwAAAAAAADlTAAAAAAAACwAAAGdhbWVfc3RhdGUu21AAAAAAAADbUAAAAAAAAAsAAABnYW1lX3N0YXRlLppQAAAAAAAAmlAAAAAAAAALAAAAZ2FtZV9zdGF0ZS7GLwAAAAAAAMYvAAAAAAAACwAAAGdhbWVfc3RhdGUuUi8AAAAAAABSLwAAAAAAAAsAAABnYW1lX3N0YXRlLkwsAAAAAAAATCwAAAAAAAALAAAAZ2FtZV9zdGF0ZS4nKwAAAAAAACcrAAAAAAAACwAAAGdhbWVfc3RhdGUu2SkAAAAAAADZKQAAAAAAAAsAAABnYW1lX3N0YXRlLh4XAAAAAAAAHhcAAAAAAAALAAAAZ2FtZV9zdGF0ZS6dFQAAAAAAAJ0VAAAAAAAACwAAAGdhbWVfc3RhdGUuzBQAAAAAAADMFAAAAAAAAAsAAABnYW1lX3N0YXRlLgwUAAAAAAAADBQAAAAAAAALAAAAZ2FtZV9zdGF0ZS5xEwAAAAAAAHETAAAAAAAACwAAAGdhbWVfc3RhdGUu/BIAAAAAAAD8EgAAAAAAAAsAAABnYW1lX3N0YXRlLm0SAAAAAAAAbRIAAAAAAAALAAAAZ2FtZV9zdGF0ZS7PEQAAAAAAAM8RAAAAAAAACwAAAGdhbWVfc3RhdGUuWhEAAAAAAABaEQAAAAAAAAsAAABnYW1lX3N0YXRlLuUQAAAAAAAA5RAAAAAAAAALAAAAZ2FtZV9zdGF0ZS5wEAAAAAAAAHAQAAAAAAAACwAAAGdhbWVfc3RhdGUu+w8AAAAAAAD7DwAAAAAAAAsAAABnYW1lX3N0YXRlLocPAAAAAAAAhw8AAAAAAAALAAAAZ2FtZV9zdGF0ZS4TDwAAAAAAABMPAAAAAAAACwAAAGdhbWVfc3RhdGUunw4AAAAAAACfDgAAAAAAAAsAAABnYW1lX3N0YXRlLiwOAAAAAAAALA4AAAAAAAALAAAAZ2FtZV9zdGF0ZS6xDQAAAAAAALENAAAAAAAACwAAAGdhbWVfc3RhdGUuQA0AAAAAAABADQAAAAAAAAsAAABnYW1lX3N0YXRlLs8MAAAAAAAAzwwAAAAAAAALAAAAZ2FtZV9zdGF0ZS5eDAAAAAAAAF4MAAAAAAAACwAAAGdhbWVfc3RhdGUu7QsAAAAAAADtCwAAAAAAAAsAAABnYW1lX3N0YXRlLnwLAAAAAAAAfAsAAAAAAAALAAAAZ2FtZV9zdGF0ZS75CQAAAAAAAPkJAAAAAAAACwAAAGdhbWVfc3RhdGUuNwkAAAAAAAA3CQAAAAAAAAsAAABnYW1lX3N0YXRlLg",
					"AQAAAAAAAAAkAAAAQgkAAAAAAAA3CQAAAAAAAAAAAAAAAPC/+QkAAAAAAAAECgAAAAAAAAAAAAAAAPC/fAsAAAAAAACHCwAAAAAAAAAAAAAAAPC/7QsAAAAAAAD4CwAAAAAAAAAAAAAAAPC/XgwAAAAAAABpDAAAAAAAAAAAAAAAAPC/zwwAAAAAAADaDAAAAAAAAAAAAAAAAPC/QA0AAAAAAABLDQAAAAAAAAAAAAAAAPC/sQ0AAAAAAAC8DQAAAAAAAAAAAAAAAPC/LA4AAAAAAAA3DgAAAAAAAAAAAAAAAPC/nw4AAAAAAACqDgAAAAAAAAAAAAAAAPC/Ew8AAAAAAAAeDwAAAAAAAAAAAAAAAPC/hw8AAAAAAACSDwAAAAAAAAAAAAAAAPC/+w8AAAAAAAAGEAAAAAAAAAAAAAAAAPC/cBAAAAAAAAB7EAAAAAAAAAAAAAAAAPC/5RAAAAAAAADwEAAAAAAAAAAAAAAAAPC/WhEAAAAAAABlEQAAAAAAAAAAAAAAAPC/zxEAAAAAAADaEQAAAAAAAAAAAAAAAPC/bRIAAAAAAAB4EgAAAAAAAAAAAAAAAPC//BIAAAAAAAAHEwAAAAAAAAAAAAAAAPC/cRMAAAAAAAB8EwAAAAAAAAAAAAAAAPC/DBQAAAAAAAAXFAAAAAAAAAAAAAAAAPC/zBQAAAAAAADXFAAAAAAAAAAAAAAAAPC/nRUAAAAAAACoFQAAAAAAAAAAAAAAAPC/HhcAAAAAAAApFwAAAAAAAAAAAAAAAPC/2SkAAAAAAADkKQAAAAAAAAAAAAAAAPC/JysAAAAAAAAyKwAAAAAAAAAAAAAAAPC/TCwAAAAAAABXLAAAAAAAAAAAAAAAAPC/Ui8AAAAAAABdLwAAAAAAAAAAAAAAAPC/xi8AAAAAAADRLwAAAAAAAAAAAAAAAPC/mlAAAAAAAAClUAAAAAAAAAAAAAAAAPC/21AAAAAAAADmUAAAAAAAAAAAAAAAAPC/OVMAAAAAAABEUwAAAAAAAAAAAAAAAPC/MVkAAAAAAAA8WQAAAAAAAAAAAAAAAPC/0VkAAAAAAADcWQAAAAAAAAAAAAAAAPC/fmAAAAAAAACJYAAAAAAAAAAAAAAAAPC/D2QAAAAAAAAaZAAAAAAAAAAAAAAAAPC/"
				],
				[
					3643,
					1,
					"insert",
					{
						"characters": "gmem."
					},
					"tAAAAI5iAAAAAAAAj2IAAAAAAAAAAAAACF8AAAAAAAAJXwAAAAAAAAAAAABmWAAAAAAAAGdYAAAAAAAAAAAAANFXAAAAAAAA0lcAAAAAAAAAAAAA5FEAAAAAAADlUQAAAAAAAAAAAACRTwAAAAAAAJJPAAAAAAAAAAAAAFtPAAAAAAAAXE8AAAAAAAAAAAAAki4AAAAAAACTLgAAAAAAAAAAAAApLgAAAAAAACouAAAAAAAAAAAAAC4rAAAAAAAALysAAAAAAAAAAAAAFCoAAAAAAAAVKgAAAAAAAAAAAADRKAAAAAAAANIoAAAAAAAAAAAAACEWAAAAAAAAIhYAAAAAAAAAAAAAqxQAAAAAAACsFAAAAAAAAAAAAADlEwAAAAAAAOYTAAAAAAAAAAAAADATAAAAAAAAMRMAAAAAAAAAAAAAoBIAAAAAAAChEgAAAAAAAAAAAAA2EgAAAAAAADcSAAAAAAAAAAAAALIRAAAAAAAAsxEAAAAAAAAAAAAAHxEAAAAAAAAgEQAAAAAAAAAAAAC1EAAAAAAAALYQAAAAAAAAAAAAAEsQAAAAAAAATBAAAAAAAAAAAAAA4Q8AAAAAAADiDwAAAAAAAAAAAAB3DwAAAAAAAHgPAAAAAAAAAAAAAA4PAAAAAAAADw8AAAAAAAAAAAAApQ4AAAAAAACmDgAAAAAAAAAAAAA8DgAAAAAAAD0OAAAAAAAAAAAAANQNAAAAAAAA1Q0AAAAAAAAAAAAAZA0AAAAAAABlDQAAAAAAAAAAAAD+DAAAAAAAAP8MAAAAAAAAAAAAAJgMAAAAAAAAmQwAAAAAAAAAAAAAMgwAAAAAAAAzDAAAAAAAAAAAAADMCwAAAAAAAM0LAAAAAAAAAAAAAGYLAAAAAAAAZwsAAAAAAAAAAAAA7gkAAAAAAADvCQAAAAAAAAAAAAA3CQAAAAAAADgJAAAAAAAAAAAAALJiAAAAAAAAs2IAAAAAAAAAAAAAK18AAAAAAAAsXwAAAAAAAAAAAACIWAAAAAAAAIlYAAAAAAAAAAAAAPJXAAAAAAAA81cAAAAAAAAAAAAABFIAAAAAAAAFUgAAAAAAAAAAAACwTwAAAAAAALFPAAAAAAAAAAAAAHlPAAAAAAAAek8AAAAAAAAAAAAAry4AAAAAAACwLgAAAAAAAAAAAABFLgAAAAAAAEYuAAAAAAAAAAAAAEkrAAAAAAAASisAAAAAAAAAAAAALioAAAAAAAAvKgAAAAAAAAAAAADqKAAAAAAAAOsoAAAAAAAAAAAAADkWAAAAAAAAOhYAAAAAAAAAAAAAwhQAAAAAAADDFAAAAAAAAAAAAAD7EwAAAAAAAPwTAAAAAAAAAAAAAEUTAAAAAAAARhMAAAAAAAAAAAAAtBIAAAAAAAC1EgAAAAAAAAAAAABJEgAAAAAAAEoSAAAAAAAAAAAAAMQRAAAAAAAAxREAAAAAAAAAAAAAMBEAAAAAAAAxEQAAAAAAAAAAAADFEAAAAAAAAMYQAAAAAAAAAAAAAFoQAAAAAAAAWxAAAAAAAAAAAAAA7w8AAAAAAADwDwAAAAAAAAAAAACEDwAAAAAAAIUPAAAAAAAAAAAAABoPAAAAAAAAGw8AAAAAAAAAAAAAsA4AAAAAAACxDgAAAAAAAAAAAABGDgAAAAAAAEcOAAAAAAAAAAAAAN0NAAAAAAAA3g0AAAAAAAAAAAAAbA0AAAAAAABtDQAAAAAAAAAAAAAFDQAAAAAAAAYNAAAAAAAAAAAAAJ4MAAAAAAAAnwwAAAAAAAAAAAAANwwAAAAAAAA4DAAAAAAAAAAAAADQCwAAAAAAANELAAAAAAAAAAAAAGkLAAAAAAAAagsAAAAAAAAAAAAA8AkAAAAAAADxCQAAAAAAAAAAAAA4CQAAAAAAADkJAAAAAAAAAAAAANZiAAAAAAAA12IAAAAAAAAAAAAATl8AAAAAAABPXwAAAAAAAAAAAACqWAAAAAAAAKtYAAAAAAAAAAAAABNYAAAAAAAAFFgAAAAAAAAAAAAAJFIAAAAAAAAlUgAAAAAAAAAAAADPTwAAAAAAANBPAAAAAAAAAAAAAJdPAAAAAAAAmE8AAAAAAAAAAAAAzC4AAAAAAADNLgAAAAAAAAAAAABhLgAAAAAAAGIuAAAAAAAAAAAAAGQrAAAAAAAAZSsAAAAAAAAAAAAASCoAAAAAAABJKgAAAAAAAAAAAAADKQAAAAAAAAQpAAAAAAAAAAAAAFEWAAAAAAAAUhYAAAAAAAAAAAAA2RQAAAAAAADaFAAAAAAAAAAAAAARFAAAAAAAABIUAAAAAAAAAAAAAFoTAAAAAAAAWxMAAAAAAAAAAAAAyBIAAAAAAADJEgAAAAAAAAAAAABcEgAAAAAAAF0SAAAAAAAAAAAAANYRAAAAAAAA1xEAAAAAAAAAAAAAQREAAAAAAABCEQAAAAAAAAAAAADVEAAAAAAAANYQAAAAAAAAAAAAAGkQAAAAAAAAahAAAAAAAAAAAAAA/Q8AAAAAAAD+DwAAAAAAAAAAAACRDwAAAAAAAJIPAAAAAAAAAAAAACYPAAAAAAAAJw8AAAAAAAAAAAAAuw4AAAAAAAC8DgAAAAAAAAAAAABQDgAAAAAAAFEOAAAAAAAAAAAAAOYNAAAAAAAA5w0AAAAAAAAAAAAAdA0AAAAAAAB1DQAAAAAAAAAAAAAMDQAAAAAAAA0NAAAAAAAAAAAAAKQMAAAAAAAApQwAAAAAAAAAAAAAPAwAAAAAAAA9DAAAAAAAAAAAAADUCwAAAAAAANULAAAAAAAAAAAAAGwLAAAAAAAAbQsAAAAAAAAAAAAA8gkAAAAAAADzCQAAAAAAAAAAAAA5CQAAAAAAADoJAAAAAAAAAAAAAPpiAAAAAAAA+2IAAAAAAAAAAAAAcV8AAAAAAAByXwAAAAAAAAAAAADMWAAAAAAAAM1YAAAAAAAAAAAAADRYAAAAAAAANVgAAAAAAAAAAAAARFIAAAAAAABFUgAAAAAAAAAAAADuTwAAAAAAAO9PAAAAAAAAAAAAALVPAAAAAAAAtk8AAAAAAAAAAAAA6S4AAAAAAADqLgAAAAAAAAAAAAB9LgAAAAAAAH4uAAAAAAAAAAAAAH8rAAAAAAAAgCsAAAAAAAAAAAAAYioAAAAAAABjKgAAAAAAAAAAAAAcKQAAAAAAAB0pAAAAAAAAAAAAAGkWAAAAAAAAahYAAAAAAAAAAAAA8BQAAAAAAADxFAAAAAAAAAAAAAAnFAAAAAAAACgUAAAAAAAAAAAAAG8TAAAAAAAAcBMAAAAAAAAAAAAA3BIAAAAAAADdEgAAAAAAAAAAAABvEgAAAAAAAHASAAAAAAAAAAAAAOgRAAAAAAAA6REAAAAAAAAAAAAAUhEAAAAAAABTEQAAAAAAAAAAAADlEAAAAAAAAOYQAAAAAAAAAAAAAHgQAAAAAAAAeRAAAAAAAAAAAAAACxAAAAAAAAAMEAAAAAAAAAAAAACeDwAAAAAAAJ8PAAAAAAAAAAAAADIPAAAAAAAAMw8AAAAAAAAAAAAAxg4AAAAAAADHDgAAAAAAAAAAAABaDgAAAAAAAFsOAAAAAAAAAAAAAO8NAAAAAAAA8A0AAAAAAAAAAAAAfA0AAAAAAAB9DQAAAAAAAAAAAAATDQAAAAAAABQNAAAAAAAAAAAAAKoMAAAAAAAAqwwAAAAAAAAAAAAAQQwAAAAAAABCDAAAAAAAAAAAAADYCwAAAAAAANkLAAAAAAAAAAAAAG8LAAAAAAAAcAsAAAAAAAAAAAAA9AkAAAAAAAD1CQAAAAAAAAAAAAA6CQAAAAAAADsJAAAAAAAAAAAAAB5jAAAAAAAAH2MAAAAAAAAAAAAAlF8AAAAAAACVXwAAAAAAAAAAAADuWAAAAAAAAO9YAAAAAAAAAAAAAFVYAAAAAAAAVlgAAAAAAAAAAAAAZFIAAAAAAABlUgAAAAAAAAAAAAANUAAAAAAAAA5QAAAAAAAAAAAAANNPAAAAAAAA1E8AAAAAAAAAAAAABi8AAAAAAAAHLwAAAAAAAAAAAACZLgAAAAAAAJouAAAAAAAAAAAAAJorAAAAAAAAmysAAAAAAAAAAAAAfCoAAAAAAAB9KgAAAAAAAAAAAAA1KQAAAAAAADYpAAAAAAAAAAAAAIEWAAAAAAAAghYAAAAAAAAAAAAABxUAAAAAAAAIFQAAAAAAAAAAAAA9FAAAAAAAAD4UAAAAAAAAAAAAAIQTAAAAAAAAhRMAAAAAAAAAAAAA8BIAAAAAAADxEgAAAAAAAAAAAACCEgAAAAAAAIMSAAAAAAAAAAAAAPoRAAAAAAAA+xEAAAAAAAAAAAAAYxEAAAAAAABkEQAAAAAAAAAAAAD1EAAAAAAAAPYQAAAAAAAAAAAAAIcQAAAAAAAAiBAAAAAAAAAAAAAAGRAAAAAAAAAaEAAAAAAAAAAAAACrDwAAAAAAAKwPAAAAAAAAAAAAAD4PAAAAAAAAPw8AAAAAAAAAAAAA0Q4AAAAAAADSDgAAAAAAAAAAAABkDgAAAAAAAGUOAAAAAAAAAAAAAPgNAAAAAAAA+Q0AAAAAAAAAAAAAhA0AAAAAAACFDQAAAAAAAAAAAAAaDQAAAAAAABsNAAAAAAAAAAAAALAMAAAAAAAAsQwAAAAAAAAAAAAARgwAAAAAAABHDAAAAAAAAAAAAADcCwAAAAAAAN0LAAAAAAAAAAAAAHILAAAAAAAAcwsAAAAAAAAAAAAA9gkAAAAAAAD3CQAAAAAAAAAAAAA7CQAAAAAAADwJAAAAAAAAAAAAAA",
					"AQAAAAAAAAAkAAAANwkAAAAAAAA3CQAAAAAAAAAAAAAAAPC/7gkAAAAAAADuCQAAAAAAAAAAAAAAAPC/ZgsAAAAAAABmCwAAAAAAAAAAAAAAAPC/zAsAAAAAAADMCwAAAAAAAAAAAAAAAPC/MgwAAAAAAAAyDAAAAAAAAAAAAAAAAPC/mAwAAAAAAACYDAAAAAAAAAAAAAAAAPC//gwAAAAAAAD+DAAAAAAAAAAAAAAAAPC/ZA0AAAAAAABkDQAAAAAAAAAAAAAAAPC/1A0AAAAAAADUDQAAAAAAAAAAAAAAAPC/PA4AAAAAAAA8DgAAAAAAAAAAAAAAAPC/pQ4AAAAAAAClDgAAAAAAAAAAAAAAAPC/Dg8AAAAAAAAODwAAAAAAAAAAAAAAAPC/dw8AAAAAAAB3DwAAAAAAAAAAAAAAAPC/4Q8AAAAAAADhDwAAAAAAAAAAAAAAAPC/SxAAAAAAAABLEAAAAAAAAAAAAAAAAPC/tRAAAAAAAAC1EAAAAAAAAAAAAAAAAPC/HxEAAAAAAAAfEQAAAAAAAAAAAAAAAPC/shEAAAAAAACyEQAAAAAAAAAAAAAAAPC/NhIAAAAAAAA2EgAAAAAAAAAAAAAAAPC/oBIAAAAAAACgEgAAAAAAAAAAAAAAAPC/MBMAAAAAAAAwEwAAAAAAAAAAAAAAAPC/5RMAAAAAAADlEwAAAAAAAAAAAAAAAPC/qxQAAAAAAACrFAAAAAAAAAAAAAAAAPC/IRYAAAAAAAAhFgAAAAAAAAAAAAAAAPC/0SgAAAAAAADRKAAAAAAAAAAAAAAAAPC/FCoAAAAAAAAUKgAAAAAAAAAAAAAAAPC/LisAAAAAAAAuKwAAAAAAAAAAAAAAAPC/KS4AAAAAAAApLgAAAAAAAAAAAAAAAPC/ki4AAAAAAACSLgAAAAAAAAAAAAAAAPC/W08AAAAAAABbTwAAAAAAAAAAAAAAAPC/kU8AAAAAAACRTwAAAAAAAAAAAAAAAPC/5FEAAAAAAADkUQAAAAAAAAAAAAAAAPC/0VcAAAAAAADRVwAAAAAAAAAAAAAAAPC/ZlgAAAAAAABmWAAAAAAAAAAAAAAAAPC/CF8AAAAAAAAIXwAAAAAAAAAAAAAAAPC/jmIAAAAAAACOYgAAAAAAAAAAAAAAAPC/"
				],
				[
					3676,
					1,
					"insert",
					{
						"characters": "gmem."
					},
					"IwAAAEF7AAAAAAAAQnsAAAAAAAAAAAAAXmkAAAAAAABfaQAAAAAAAAAAAADQYgAAAAAAANFiAAAAAAAAAAAAAAtfAAAAAAAADF8AAAAAAAAAAAAABFgAAAAAAAAFWAAAAAAAAAAAAACgUwAAAAAAAKFTAAAAAAAAAAAAAMgtAAAAAAAAyS0AAAAAAAAAAAAASHsAAAAAAABJewAAAAAAAAAAAABkaQAAAAAAAGVpAAAAAAAAAAAAANViAAAAAAAA1mIAAAAAAAAAAAAAD18AAAAAAAAQXwAAAAAAAAAAAAAHWAAAAAAAAAhYAAAAAAAAAAAAAKJTAAAAAAAAo1MAAAAAAAAAAAAAyS0AAAAAAADKLQAAAAAAAAAAAABPewAAAAAAAFB7AAAAAAAAAAAAAGppAAAAAAAAa2kAAAAAAAAAAAAA2mIAAAAAAADbYgAAAAAAAAAAAAATXwAAAAAAABRfAAAAAAAAAAAAAApYAAAAAAAAC1gAAAAAAAAAAAAApFMAAAAAAAClUwAAAAAAAAAAAADKLQAAAAAAAMstAAAAAAAAAAAAAFZ7AAAAAAAAV3sAAAAAAAAAAAAAcGkAAAAAAABxaQAAAAAAAAAAAADfYgAAAAAAAOBiAAAAAAAAAAAAABdfAAAAAAAAGF8AAAAAAAAAAAAADVgAAAAAAAAOWAAAAAAAAAAAAACmUwAAAAAAAKdTAAAAAAAAAAAAAMstAAAAAAAAzC0AAAAAAAAAAAAAXXsAAAAAAABeewAAAAAAAAAAAAB2aQAAAAAAAHdpAAAAAAAAAAAAAORiAAAAAAAA5WIAAAAAAAAAAAAAG18AAAAAAAAcXwAAAAAAAAAAAAAQWAAAAAAAABFYAAAAAAAAAAAAAKhTAAAAAAAAqVMAAAAAAAAAAAAAzC0AAAAAAADNLQAAAAAAAAAAAAA",
					"AQAAAAAAAAAHAAAAyC0AAAAAAADILQAAAAAAAAAAAAAAAPC/oFMAAAAAAACgUwAAAAAAAAAAAAAAAPC/BFgAAAAAAAAEWAAAAAAAAAAAAAAAAPC/C18AAAAAAAALXwAAAAAAAAAAAAAAAPC/0GIAAAAAAADQYgAAAAAAAAAAAAAAAPC/XmkAAAAAAABeaQAAAAAAAAAAAAAAAPC/QXsAAAAAAABBewAAAAAAAAAAAAAAAPC/"
				],
				[
					3682,
					1,
					"insert",
					{
						"characters": "gmem."
					},
					"BQAAAFMLAAAAAAAAVAsAAAAAAAAAAAAAVAsAAAAAAABVCwAAAAAAAAAAAABVCwAAAAAAAFYLAAAAAAAAAAAAAFYLAAAAAAAAVwsAAAAAAAAAAAAAVwsAAAAAAABYCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUwsAAAAAAABTCwAAAAAAAAAAAAAAAPC/"
				],
				[
					3697,
					1,
					"insert",
					{
						"characters": "set_target_to"
					},
					"DQAAAEIUAAAAAAAAQxQAAAAAAAAAAAAAQxQAAAAAAABEFAAAAAAAAAAAAABEFAAAAAAAAEUUAAAAAAAAAAAAAEUUAAAAAAAARhQAAAAAAAAAAAAARhQAAAAAAABHFAAAAAAAAAAAAABHFAAAAAAAAEgUAAAAAAAAAAAAAEgUAAAAAAAASRQAAAAAAAAAAAAASRQAAAAAAABKFAAAAAAAAAAAAABKFAAAAAAAAEsUAAAAAAAAAAAAAEsUAAAAAAAATBQAAAAAAAAAAAAATBQAAAAAAABNFAAAAAAAAAAAAABNFAAAAAAAAE4UAAAAAAAAAAAAAE4UAAAAAAAATxQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQhQAAAAAAABCFAAAAAAAAAAAAAAAAPC/"
				],
				[
					3698,
					1,
					"insert",
					{
						"characters": "_pass_to"
					},
					"CAAAAE8UAAAAAAAAUBQAAAAAAAAAAAAAUBQAAAAAAABRFAAAAAAAAAAAAABRFAAAAAAAAFIUAAAAAAAAAAAAAFIUAAAAAAAAUxQAAAAAAAAAAAAAUxQAAAAAAABUFAAAAAAAAAAAAABUFAAAAAAAAFUUAAAAAAAAAAAAAFUUAAAAAAAAVhQAAAAAAAAAAAAAVhQAAAAAAABXFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATxQAAAAAAABPFAAAAAAAAAAAAAAAAPC/"
				],
				[
					3699,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAFcUAAAAAAAAWRQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVxQAAAAAAABXFAAAAAAAAAAAAAAAAPC/"
				],
				[
					3700,
					1,
					"insert",
					{
						"characters": "h1_h,"
					},
					"BQAAAFgUAAAAAAAAWRQAAAAAAAAAAAAAWRQAAAAAAABaFAAAAAAAAAAAAABaFAAAAAAAAFsUAAAAAAAAAAAAAFsUAAAAAAAAXBQAAAAAAAAAAAAAXBQAAAAAAABdFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWBQAAAAAAABYFAAAAAAAAAAAAAAAAPC/"
				],
				[
					3701,
					1,
					"insert",
					{
						"characters": " e1_h"
					},
					"BQAAAF0UAAAAAAAAXhQAAAAAAAAAAAAAXhQAAAAAAABfFAAAAAAAAAAAAABfFAAAAAAAAGAUAAAAAAAAAAAAAGAUAAAAAAAAYRQAAAAAAAAAAAAAYRQAAAAAAABiFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXRQAAAAAAABdFAAAAAAAAAAAAAAAAPC/"
				],
				[
					3718,
					1,
					"insert",
					{
						"characters": "\n\naim_angle"
					},
					"DAAAALYIAAAAAAAAuAgAAAAAAAAAAAAAuAgAAAAAAAC6CAAAAAAAAAAAAAC3CAAAAAAAALcIAAAAAAAAAQAAAAm5CAAAAAAAALoIAAAAAAAAAAAAALoIAAAAAAAAuwgAAAAAAAAAAAAAuwgAAAAAAAC8CAAAAAAAAAAAAAC8CAAAAAAAAL0IAAAAAAAAAAAAAL0IAAAAAAAAvggAAAAAAAAAAAAAvggAAAAAAAC/CAAAAAAAAAAAAAC/CAAAAAAAAMAIAAAAAAAAAAAAAMAIAAAAAAAAwQgAAAAAAAAAAAAAwQgAAAAAAADCCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtggAAAAAAAC2CAAAAAAAAAAAAAAAAPC/"
				],
				[
					3719,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAAMIIAAAAAAAAwwgAAAAAAAAAAAAAwwgAAAAAAADECAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwggAAAAAAADCCAAAAAAAAAAAAAAAAPC/"
				],
				[
					3720,
					1,
					"insert",
					{
						"characters": " f32,"
					},
					"BQAAAMQIAAAAAAAAxQgAAAAAAAAAAAAAxQgAAAAAAADGCAAAAAAAAAAAAADGCAAAAAAAAMcIAAAAAAAAAAAAAMcIAAAAAAAAyAgAAAAAAAAAAAAAyAgAAAAAAADJCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxAgAAAAAAADECAAAAAAAAAAAAAAAAPC/"
				],
				[
					3723,
					1,
					"left_delete",
					null,
					"AQAAAMkIAAAAAAAAyQgAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAyggAAAAAAADKCAAAAAAAAAAAAAAA4GxA"
				],
				[
					3727,
					1,
					"insert",
					{
						"characters": "\ncreate_lev"
					},
					"CwAAAIcxAAAAAAAAjDEAAAAAAAAAAAAAjDEAAAAAAACNMQAAAAAAAAAAAACNMQAAAAAAAI4xAAAAAAAAAAAAAI4xAAAAAAAAjzEAAAAAAAAAAAAAjzEAAAAAAACQMQAAAAAAAAAAAACQMQAAAAAAAJExAAAAAAAAAAAAAJExAAAAAAAAkjEAAAAAAAAAAAAAkjEAAAAAAACTMQAAAAAAAAAAAACTMQAAAAAAAJQxAAAAAAAAAAAAAJQxAAAAAAAAlTEAAAAAAAAAAAAAlTEAAAAAAACWMQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhzEAAAAAAACHMQAAAAAAAAAAAAAAAPC/"
				],
				[
					3728,
					1,
					"insert",
					{
						"characters": "el_1"
					},
					"BAAAAJYxAAAAAAAAlzEAAAAAAAAAAAAAlzEAAAAAAACYMQAAAAAAAAAAAACYMQAAAAAAAJkxAAAAAAAAAAAAAJkxAAAAAAAAmjEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAljEAAAAAAACWMQAAAAAAAAAAAAAAAPC/"
				],
				[
					3729,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJoxAAAAAAAAnDEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmjEAAAAAAACaMQAAAAAAAAAAAAAAAPC/"
				],
				[
					3732,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AQAAAIwxAAAAAAAAjzEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnDEAAAAAAACcMQAAAAAAAAAAAAAAAPC/"
				],
				[
					3743,
					1,
					"paste",
					null,
					"AQAAAMMXAAAAAAAAzhcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwxcAAAAAAADDFwAAAAAAAAAAAAAAAPC/"
				],
				[
					3744,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAM4XAAAAAAAAzxcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzhcAAAAAAADOFwAAAAAAAAAAAAAAAPC/"
				],
				[
					3745,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAM8XAAAAAAAA0BcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzxcAAAAAAADPFwAAAAAAAAAAAAAAAPC/"
				],
				[
					3761,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AQAAAJkxAAAAAAAAmTEAAAAAAAADAAAALy8g",
					"AQAAAAAAAAABAAAAnDEAAAAAAACoMQAAAAAAAAAAAAAAAPC/"
				],
				[
					3765,
					1,
					"cut",
					null,
					"AQAAADJdAAAAAAAAMl0AAAAAAADUAQAAaWYgLlN3aW5nX0Fyb3VuZF9QYXJlbnQgaW4gZW50aXR5LmJlaGF2aW9ycwogICAgICAgCQkJCXsKICAgICAgIAkJCQkJaWYgZW50aXR5X3B0ci5vcmJpdGluZ19kaXIgPiAwICYmIGVudGl0eV9wdHIub3JiaXRpbmdfYW5nbGUgPj0gZW50aXR5X3B0ci5zd2luZ19hbmdsZV9lbmQKICAgICAgIAkJCQkJewogICAgICAgCQkJCQkJZW50aXR5X3B0ci5vcmJpdGluZ19kaXIgPSAtKGVudGl0eV9wdHIub3JiaXRpbmdfZGlyKQogICAgICAgCQkJCQl9CiAgICAgICAJCQkJCWVsc2UgaWYgZW50aXR5X3B0ci5vcmJpdGluZ19kaXIgPCAwICYmIGVudGl0eV9wdHIub3JiaXRpbmdfYW5nbGUgPD0gZW50aXR5X3B0ci5zd2luZ19hbmdsZV9zdGFydAogICAgICAgCQkJCQl7CiAgICAgICAJCQkJCQllbnRpdHlfcHRyLm9yYml0aW5nX2RpciA9IC0oZW50aXR5X3B0ci5vcmJpdGluZ19kaXIpCiAgICAgICAJCQkJCX0KICAgICAgIAkJCQl9",
					"AQAAAAAAAAABAAAABl8AAAAAAAAyXQAAAAAAAAAAAAAAAPC/"
				],
				[
					3768,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAD5dAAAAAAAASV0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPl0AAAAAAAA+XQAAAAAAAAAAAAAAAPC/"
				],
				[
					3769,
					1,
					"paste",
					null,
					"AQAAAEldAAAAAAAAHV8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASV0AAAAAAABJXQAAAAAAAAAAAAAAAPC/"
				],
				[
					3772,
					1,
					"unindent",
					null,
					"CgAAAHVdAAAAAAAAdV0AAAAAAAAEAAAAICAgIH5dAAAAAAAAfl0AAAAAAAAEAAAAICAgIOBdAAAAAAAA4F0AAAAAAAAEAAAAICAgIOpdAAAAAAAA6l0AAAAAAAAEAAAAICAgICheAAAAAAAAKF4AAAAAAAAEAAAAICAgIDJeAAAAAAAAMl4AAAAAAAAEAAAAICAgIJteAAAAAAAAm14AAAAAAAAEAAAAICAgIKVeAAAAAAAApV4AAAAAAAAEAAAAICAgIONeAAAAAAAA414AAAAAAAAEAAAAICAgIO1eAAAAAAAA7V4AAAAAAAAEAAAAICAgIA",
					"AQAAAAAAAAABAAAAHV8AAAAAAACAXQAAAAAAAAAAAAAAAPC/"
				],
				[
					3775,
					1,
					"left_delete",
					null,
					"AQAAACVdAAAAAAAAJV0AAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAJl0AAAAAAAAmXQAAAAAAAAAAAAAAAPC/"
				],
				[
					3777,
					8,
					"left_delete",
					null,
					"CAAAADBdAAAAAAAAMF0AAAAAAAABAAAACS9dAAAAAAAAL10AAAAAAAABAAAACS5dAAAAAAAALl0AAAAAAAABAAAACS1dAAAAAAAALV0AAAAAAAABAAAACSxdAAAAAAAALF0AAAAAAAABAAAAICtdAAAAAAAAK10AAAAAAAABAAAAICpdAAAAAAAAKl0AAAAAAAABAAAAICldAAAAAAAAKV0AAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAMV0AAAAAAAAxXQAAAAAAAAAAAAAAQG5A"
				],
				[
					3778,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAACZdAAAAAAAAJl0AAAAAAAADAAAAICAg",
					"AQAAAAAAAAABAAAAKV0AAAAAAAApXQAAAAAAAAAAAAAAAPC/"
				],
				[
					3779,
					1,
					"left_delete",
					null,
					"AQAAACVdAAAAAAAAJV0AAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAJl0AAAAAAAAmXQAAAAAAAAAAAAAAAPC/"
				],
				[
					3783,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAANcFAAAAAAAA2QUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1wUAAAAAAADXBQAAAAAAAAAAAAAAAPC/"
				],
				[
					3784,
					1,
					"insert",
					{
						"characters": "Shoot_"
					},
					"BgAAANkFAAAAAAAA2gUAAAAAAAAAAAAA2gUAAAAAAADbBQAAAAAAAAAAAADbBQAAAAAAANwFAAAAAAAAAAAAANwFAAAAAAAA3QUAAAAAAAAAAAAA3QUAAAAAAADeBQAAAAAAAAAAAADeBQAAAAAAAN8FAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2QUAAAAAAADZBQAAAAAAAAAAAAAAAPC/"
				],
				[
					3785,
					1,
					"insert",
					{
						"characters": "In_Direction"
					},
					"DAAAAN8FAAAAAAAA4AUAAAAAAAAAAAAA4AUAAAAAAADhBQAAAAAAAAAAAADhBQAAAAAAAOIFAAAAAAAAAAAAAOIFAAAAAAAA4wUAAAAAAAAAAAAA4wUAAAAAAADkBQAAAAAAAAAAAADkBQAAAAAAAOUFAAAAAAAAAAAAAOUFAAAAAAAA5gUAAAAAAAAAAAAA5gUAAAAAAADnBQAAAAAAAAAAAADnBQAAAAAAAOgFAAAAAAAAAAAAAOgFAAAAAAAA6QUAAAAAAAAAAAAA6QUAAAAAAADqBQAAAAAAAAAAAADqBQAAAAAAAOsFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3wUAAAAAAADfBQAAAAAAAAAAAAAAAPC/"
				],
				[
					3786,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAOsFAAAAAAAA7AUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6wUAAAAAAADrBQAAAAAAAAAAAAAAAPC/"
				],
				[
					3791,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AQAAAPMOAAAAAAAA9g4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXw8AAAAAAABfDwAAAAAAAAAAAAAAAPC/"
				],
				[
					3792,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAGIPAAAAAAAAZA8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYg8AAAAAAABiDwAAAAAAAAAAAAAAAPC/"
				],
				[
					3793,
					1,
					"paste",
					null,
					"AQAAAGMPAAAAAAAA0Q8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZA8AAAAAAABkDwAAAAAAAAAAAAAAAPC/"
				],
				[
					3794,
					2,
					"left_delete",
					null,
					"AgAAANEPAAAAAAAA0Q8AAAAAAAABAAAACdAPAAAAAAAA0A8AAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAA0g8AAAAAAADSDwAAAAAAAAAAAAAAAPC/"
				],
				[
					3799,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAM0PAAAAAAAAzg8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzQ8AAAAAAADNDwAAAAAAAAAAAAAAAPC/"
				],
				[
					3800,
					1,
					"insert",
					{
						"characters": " .Shoot_"
					},
					"CAAAAM4PAAAAAAAAzw8AAAAAAAAAAAAAzw8AAAAAAADQDwAAAAAAAAAAAADQDwAAAAAAANEPAAAAAAAAAAAAANEPAAAAAAAA0g8AAAAAAAAAAAAA0g8AAAAAAADTDwAAAAAAAAAAAADTDwAAAAAAANQPAAAAAAAAAAAAANQPAAAAAAAA1Q8AAAAAAAAAAAAA1Q8AAAAAAADWDwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzg8AAAAAAADODwAAAAAAAAAAAAAAAPC/"
				],
				[
					3801,
					1,
					"insert",
					{
						"characters": "In_Direction"
					},
					"DAAAANYPAAAAAAAA1w8AAAAAAAAAAAAA1w8AAAAAAADYDwAAAAAAAAAAAADYDwAAAAAAANkPAAAAAAAAAAAAANkPAAAAAAAA2g8AAAAAAAAAAAAA2g8AAAAAAADbDwAAAAAAAAAAAADbDwAAAAAAANwPAAAAAAAAAAAAANwPAAAAAAAA3Q8AAAAAAAAAAAAA3Q8AAAAAAADeDwAAAAAAAAAAAADeDwAAAAAAAN8PAAAAAAAAAAAAAN8PAAAAAAAA4A8AAAAAAAAAAAAA4A8AAAAAAADhDwAAAAAAAAAAAADhDwAAAAAAAOIPAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1g8AAAAAAADWDwAAAAAAAAAAAAAAAPC/"
				],
				[
					3804,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAOIPAAAAAAAA4w8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4g8AAAAAAADiDwAAAAAAAAAAAAAAAPC/"
				],
				[
					3805,
					1,
					"insert",
					{
						"characters": " shoot"
					},
					"BgAAAOMPAAAAAAAA5A8AAAAAAAAAAAAA5A8AAAAAAADlDwAAAAAAAAAAAADlDwAAAAAAAOYPAAAAAAAAAAAAAOYPAAAAAAAA5w8AAAAAAAAAAAAA5w8AAAAAAADoDwAAAAAAAAAAAADoDwAAAAAAAOkPAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4w8AAAAAAADjDwAAAAAAAAAAAAAAAPC/"
				],
				[
					3806,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAOQPAAAAAAAA5A8AAAAAAAAFAAAAc2hvb3Q",
					"AQAAAAAAAAABAAAA6Q8AAAAAAADpDwAAAAAAAAAAAAAAAPC/"
				],
				[
					3807,
					1,
					"insert",
					{
						"characters": "aim"
					},
					"AwAAAOQPAAAAAAAA5Q8AAAAAAAAAAAAA5Q8AAAAAAADmDwAAAAAAAAAAAADmDwAAAAAAAOcPAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5A8AAAAAAADkDwAAAAAAAAAAAAAAAPC/"
				],
				[
					3808,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":0,\"session_name\":\"odin\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "aim_angle"
					},
					"AgAAAOQPAAAAAAAA5A8AAAAAAAADAAAAYWlt5A8AAAAAAADtDwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5w8AAAAAAADnDwAAAAAAAAAAAAAAAPC/"
				],
				[
					3809,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAO0PAAAAAAAA7g8AAAAAAAAAAAAA7g8AAAAAAADvDwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7Q8AAAAAAADtDwAAAAAAAAAAAAAAAPC/"
				],
				[
					3810,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAO8PAAAAAAAA8A8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7w8AAAAAAADvDwAAAAAAAAAAAAAAAPC/"
				],
				[
					3811,
					1,
					"insert",
					{
						"characters": "270"
					},
					"AwAAAPAPAAAAAAAA8Q8AAAAAAAAAAAAA8Q8AAAAAAADyDwAAAAAAAAAAAADyDwAAAAAAAPMPAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8A8AAAAAAADwDwAAAAAAAAAAAAAAAPC/"
				],
				[
					3817,
					1,
					"insert",
					{
						"characters": "\nbytes_png"
					},
					"CgAAAJkCAAAAAAAAmgIAAAAAAAAAAAAAmgIAAAAAAACbAgAAAAAAAAAAAACbAgAAAAAAAJwCAAAAAAAAAAAAAJwCAAAAAAAAnQIAAAAAAAAAAAAAnQIAAAAAAACeAgAAAAAAAAAAAACeAgAAAAAAAJ8CAAAAAAAAAAAAAJ8CAAAAAAAAoAIAAAAAAAAAAAAAoAIAAAAAAAChAgAAAAAAAAAAAAChAgAAAAAAAKICAAAAAAAAAAAAAKICAAAAAAAAowIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmQIAAAAAAACZAgAAAAAAAAAAAAAAAPC/"
				],
				[
					3818,
					1,
					"insert",
					{
						"characters": "_reticle"
					},
					"CAAAAKMCAAAAAAAApAIAAAAAAAAAAAAApAIAAAAAAAClAgAAAAAAAAAAAAClAgAAAAAAAKYCAAAAAAAAAAAAAKYCAAAAAAAApwIAAAAAAAAAAAAApwIAAAAAAACoAgAAAAAAAAAAAACoAgAAAAAAAKkCAAAAAAAAAAAAAKkCAAAAAAAAqgIAAAAAAAAAAAAAqgIAAAAAAACrAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAowIAAAAAAACjAgAAAAAAAAAAAAAAAPC/"
				],
				[
					3819,
					1,
					"insert",
					{
						"characters": " :="
					},
					"AwAAAKsCAAAAAAAArAIAAAAAAAAAAAAArAIAAAAAAACtAgAAAAAAAAAAAACtAgAAAAAAAK4CAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqwIAAAAAAACrAgAAAAAAAAAAAAAAAPC/"
				],
				[
					3820,
					1,
					"insert",
					{
						"characters": " #load"
					},
					"BgAAAK4CAAAAAAAArwIAAAAAAAAAAAAArwIAAAAAAACwAgAAAAAAAAAAAACwAgAAAAAAALECAAAAAAAAAAAAALECAAAAAAAAsgIAAAAAAAAAAAAAsgIAAAAAAACzAgAAAAAAAAAAAACzAgAAAAAAALQCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArgIAAAAAAACuAgAAAAAAAAAAAAAAAPC/"
				],
				[
					3821,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAALQCAAAAAAAAtgIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtAIAAAAAAAC0AgAAAAAAAAAAAAAAAPC/"
				],
				[
					3822,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAALUCAAAAAAAAtwIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtQIAAAAAAAC1AgAAAAAAAAAAAAAAAPC/"
				],
				[
					3823,
					1,
					"insert",
					{
						"characters": "../assets/"
					},
					"CgAAALYCAAAAAAAAtwIAAAAAAAAAAAAAtwIAAAAAAAC4AgAAAAAAAAAAAAC4AgAAAAAAALkCAAAAAAAAAAAAALkCAAAAAAAAugIAAAAAAAAAAAAAugIAAAAAAAC7AgAAAAAAAAAAAAC7AgAAAAAAALwCAAAAAAAAAAAAALwCAAAAAAAAvQIAAAAAAAAAAAAAvQIAAAAAAAC+AgAAAAAAAAAAAAC+AgAAAAAAAL8CAAAAAAAAAAAAAL8CAAAAAAAAwAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtgIAAAAAAAC2AgAAAAAAAAAAAAAAAPC/"
				],
				[
					3850,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAABKAAAAAAAAAHYAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEoAAAAAAAAASgAAAAAAAAAAAAAAAAPC/"
				],
				[
					3851,
					1,
					"paste",
					null,
					"AQAAABOAAAAAAAAAboAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHYAAAAAAAAAdgAAAAAAAAAAAAAAAAPC/"
				],
				[
					3856,
					4,
					"left_delete",
					null,
					"BQAAACyAAAAAAAAALIAAAAAAAAABAAAAZW2AAAAAAAAAbYAAAAAAAAAKAAAAICAgICAJCQkJCSuAAAAAAAAAK4AAAAAAAAABAAAAbiqAAAAAAAAAKoAAAAAAAAABAAAAaSmAAAAAAAAAKYAAAAAAAAABAAAAbA",
					"AQAAAAAAAAABAAAALYAAAAAAAAAtgAAAAAAAAAAAAAAAAPC/"
				],
				[
					3857,
					1,
					"insert",
					{
						"characters": "arrow"
					},
					"BQAAACmAAAAAAAAAKoAAAAAAAAAAAAAAKoAAAAAAAAArgAAAAAAAAAAAAAArgAAAAAAAACyAAAAAAAAAAAAAACyAAAAAAAAALYAAAAAAAAAAAAAALYAAAAAAAAAugAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKYAAAAAAAAApgAAAAAAAAAAAAAAAAPC/"
				],
				[
					3859,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AQAAAMJ/AAAAAAAAxX8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA038AAAAAAADTfwAAAAAAAAAAAAAAkH1A"
				],
				[
					3871,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AQAAACCAAAAAAAAAI4AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANoAAAAAAAAA2gAAAAAAAAAAAAAAAAPC/"
				],
				[
					3873,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AQAAAMJ/AAAAAAAAwn8AAAAAAAADAAAALy8g",
					"AQAAAAAAAAABAAAA238AAAAAAADbfwAAAAAAAAAAAAAAsIFA"
				],
				[
					3883,
					2,
					"delete_word",
					{
						"forward": false
					},
					"AgAAAPkPAAAAAAAA+Q8AAAAAAAASAAAAU2hvb3RfSW5fRGlyZWN0aW9u+A8AAAAAAAD4DwAAAAAAAAEAAAAu",
					"AQAAAAAAAAABAAAACxAAAAAAAAALEAAAAAAAAAAAAAAAAPC/"
				],
				[
					3884,
					2,
					"left_delete",
					null,
					"AgAAAPcPAAAAAAAA9w8AAAAAAAABAAAAIPYPAAAAAAAA9g8AAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAA+A8AAAAAAAD4DwAAAAAAAAAAAAAAAPC/"
				],
				[
					3888,
					1,
					"insert",
					{
						"characters": "}"
					},
					"AQAAAPYPAAAAAAAA9w8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9g8AAAAAAAD2DwAAAAAAAAAAAAAAAPC/"
				],
				[
					3890,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAPYPAAAAAAAA9w8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9g8AAAAAAAD2DwAAAAAAAAAAAAAAAPC/"
				],
				[
					3891,
					1,
					"insert",
					{
						"characters": " .Shoot_"
					},
					"CAAAAPcPAAAAAAAA+A8AAAAAAAAAAAAA+A8AAAAAAAD5DwAAAAAAAAAAAAD5DwAAAAAAAPoPAAAAAAAAAAAAAPoPAAAAAAAA+w8AAAAAAAAAAAAA+w8AAAAAAAD8DwAAAAAAAAAAAAD8DwAAAAAAAP0PAAAAAAAAAAAAAP0PAAAAAAAA/g8AAAAAAAAAAAAA/g8AAAAAAAD/DwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9w8AAAAAAAD3DwAAAAAAAAAAAAAAAPC/"
				],
				[
					3892,
					1,
					"insert",
					{
						"characters": "In_Direction"
					},
					"DAAAAP8PAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAABEAAAAAAAAAAAAAABEAAAAAAAAAIQAAAAAAAAAAAAAAIQAAAAAAAAAxAAAAAAAAAAAAAAAxAAAAAAAAAEEAAAAAAAAAAAAAAEEAAAAAAAAAUQAAAAAAAAAAAAAAUQAAAAAAAABhAAAAAAAAAAAAAABhAAAAAAAAAHEAAAAAAAAAAAAAAHEAAAAAAAAAgQAAAAAAAAAAAAAAgQAAAAAAAACRAAAAAAAAAAAAAACRAAAAAAAAAKEAAAAAAAAAAAAAAKEAAAAAAAAAsQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/w8AAAAAAAD/DwAAAAAAAAAAAAAAAPC/"
				],
				[
					3896,
					1,
					"left_delete",
					null,
					"AQAAAB4QAAAAAAAAHhAAAAAAAAABAAAAfQ",
					"AQAAAAAAAAABAAAAHxAAAAAAAAAfEAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "source/examples/biscuit_toss_example.odin",
			"settings":
			{
				"buffer_size": 21125,
				"encoding": "UTF-8",
				"line_ending": "Windows",
				"name": "package game"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAAdlIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAJYAAAAAAAAAlwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlgAAAAAAAACWAAAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": "../"
					},
					"AwAAAL0AAAAAAAAAvgAAAAAAAAAAAAAAvgAAAAAAAAC/AAAAAAAAAAAAAAC/AAAAAAAAAMAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvQAAAAAAAAC9AAAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"left_delete",
					null,
					"AQAAAL8AAAAAAAAAvwAAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAAwAAAAAAAAADAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "/"
					},
					"AQAAAL0AAAAAAAAAvgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvQAAAAAAAAC9AAAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "example"
					},
					"BwAAAAgAAAAAAAAACQAAAAAAAAAEAAAAZ2FtZQkAAAAAAAAACgAAAAAAAAAAAAAACgAAAAAAAAALAAAAAAAAAAAAAAALAAAAAAAAAAwAAAAAAAAAAAAAAAwAAAAAAAAADQAAAAAAAAAAAAAADQAAAAAAAAAOAAAAAAAAAAAAAAAOAAAAAAAAAA8AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACAAAAAAAAAAMAAAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAIgAAAAAAAAAiQAAAAAAAAAAAAAAiQAAAAAAAACKAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiAAAAAAAAACIAAAAAAAAAAAAAAAAoGRA"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": "import"
					},
					"BgAAAIkAAAAAAAAAigAAAAAAAAAAAAAAigAAAAAAAACLAAAAAAAAAAAAAACLAAAAAAAAAIwAAAAAAAAAAAAAAIwAAAAAAAAAjQAAAAAAAAAAAAAAjQAAAAAAAACOAAAAAAAAAAAAAACOAAAAAAAAAI8AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiQAAAAAAAACJAAAAAAAAAAAAAAAAAAAA"
				],
				[
					30,
					2,
					"left_delete",
					null,
					"AgAAAI4AAAAAAAAAjgAAAAAAAAABAAAAdI0AAAAAAAAAjQAAAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAAjwAAAAAAAACPAAAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": "rt"
					},
					"AgAAAI0AAAAAAAAAjgAAAAAAAAAAAAAAjgAAAAAAAACPAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjQAAAAAAAACNAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "source/handle_array.odin",
			"settings":
			{
				"buffer_size": 2690,
				"encoding": "UTF-8",
				"line_ending": "Windows",
				"name": "package game"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAAcgoAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": "package"
					},
					"BwAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAAAAAACAAAAAAAAAAMAAAAAAAAAAAAAAAMAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAFAAAAAAAAAAAAAAAFAAAAAAAAAAYAAAAAAAAAAAAAAAYAAAAAAAAABwAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": " game"
					},
					"BQAAAAcAAAAAAAAACAAAAAAAAAAAAAAACAAAAAAAAAAJAAAAAAAAAAAAAAAJAAAAAAAAAAoAAAAAAAAAAAAAAAoAAAAAAAAACwAAAAAAAAAAAAAACwAAAAAAAAAMAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAcAAAAAAAAABwAAAAAAAAAAAAAAAADwvw"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAAwAAAAAAAAADQAAAAAAAAAAAAAADQAAAAAAAAAOAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAwAAAAAAAAADAAAAAAAAAAAAAAAAADwvw"
				],
				[
					4,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAFQAAAAAAAAAVQAAAAAAAAAAAAAAVQAAAAAAAABWAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVAAAAAAAAABUAAAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "Root_Handle"
					},
					"CwAAAFUAAAAAAAAAVgAAAAAAAAAAAAAAVgAAAAAAAABXAAAAAAAAAAAAAABXAAAAAAAAAFgAAAAAAAAAAAAAAFgAAAAAAAAAWQAAAAAAAAAAAAAAWQAAAAAAAABaAAAAAAAAAAAAAABaAAAAAAAAAFsAAAAAAAAAAAAAAFsAAAAAAAAAXAAAAAAAAAAAAAAAXAAAAAAAAABdAAAAAAAAAAAAAABdAAAAAAAAAF4AAAAAAAAAAAAAAF4AAAAAAAAAXwAAAAAAAAAAAAAAXwAAAAAAAABgAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVQAAAAAAAABVAAAAAAAAAAAAAAAAAAAA"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": " ::"
					},
					"AwAAAGAAAAAAAAAAYQAAAAAAAAAAAAAAYQAAAAAAAABiAAAAAAAAAAAAAABiAAAAAAAAAGMAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYAAAAAAAAABgAAAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": " Handle"
					},
					"BwAAAGMAAAAAAAAAZAAAAAAAAAAAAAAAZAAAAAAAAABlAAAAAAAAAAAAAABlAAAAAAAAAGYAAAAAAAAAAAAAAGYAAAAAAAAAZwAAAAAAAAAAAAAAZwAAAAAAAABoAAAAAAAAAAAAAABoAAAAAAAAAGkAAAAAAAAAAAAAAGkAAAAAAAAAagAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYwAAAAAAAABjAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAGoAAAAAAAAAbAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAagAAAAAAAABqAAAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "idx"
					},
					"AwAAAGsAAAAAAAAAbAAAAAAAAAAAAAAAbAAAAAAAAABtAAAAAAAAAAAAAABtAAAAAAAAAG4AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAawAAAAAAAABrAAAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAG4AAAAAAAAAbwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbgAAAAAAAABuAAAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"left_delete",
					null,
					"AQAAAG4AAAAAAAAAbgAAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAbwAAAAAAAABvAAAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAG4AAAAAAAAAbwAAAAAAAAAAAAAAbwAAAAAAAABwAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbgAAAAAAAABuAAAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": " 0,"
					},
					"AwAAAHAAAAAAAAAAcQAAAAAAAAAAAAAAcQAAAAAAAAByAAAAAAAAAAAAAAByAAAAAAAAAHMAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcAAAAAAAAABwAAAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": " gen"
					},
					"BAAAAHMAAAAAAAAAdAAAAAAAAAAAAAAAdAAAAAAAAAB1AAAAAAAAAAAAAAB1AAAAAAAAAHYAAAAAAAAAAAAAAHYAAAAAAAAAdwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcwAAAAAAAABzAAAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAHcAAAAAAAAAeAAAAAAAAAAAAAAAeAAAAAAAAAB5AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdwAAAAAAAAB3AAAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": " 0"
					},
					"AgAAAHkAAAAAAAAAegAAAAAAAAAAAAAAegAAAAAAAAB7AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeQAAAAAAAAB5AAAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"left_delete",
					null,
					"AQAAAFUAAAAAAAAAVQAAAAAAAAAoAAAAUm9vdF9IYW5kbGUgOjogSGFuZGxle2lkeCA9IDAsIGdlbiA9IDB9Cg",
					"AQAAAAAAAAABAAAAVQAAAAAAAAB9AAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "/C/odin-windows-amd64-dev-2025-03/vendor/raylib/raylib.odin",
			"settings":
			{
				"buffer_size": 139997,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "Searching 825 files for \"src\"\n\nC:\\Users\\johnb\\source\\repos\\odin-base\\build_default.bat:\n    1  echo Building game.exe\n    2  \n    3: odin build  src/main_default -debug -out:game.exe -vet-shadowing\n\nC:\\Users\\johnb\\source\\repos\\odin-base\\build_hot_reload.bat:\n   51  :: monitors this file and does the hot reload when it changes.\n   52  echo Building %name%.dll\n   53: :: odin build src -vet-unused -vet-unused-variables -vet-unused-imports -vet-shadowing -debug -define:RAYLIB_SHARED=true -build-mode:dll -out:%OUT_DIR%/%name%.dll -pdb-name:%GAME_PDBS_DIR%\\%name%_%PDB_NUMBER%.pdb > nul\n   54: odin build src -debug -define:RAYLIB_SHARED=true -build-mode:dll -out:%OUT_DIR%/%name%.dll -pdb-name:%GAME_PDBS_DIR%\\%name%_%PDB_NUMBER%.pdb > nul\n   55  IF %ERRORLEVEL% NEQ 0 exit /b 1\n   56  \n   ..\n   62  :: Build game.exe, which starts the program and loads game.dll och does the logic for hot reloading.\n   63  echo Building %EXE%\n   64: odin build src\\main_hot_reload -debug -out:%OUT_DIR%\\%EXE% -pdb-name:%OUT_DIR%\\main_hot_reload.pdb\n   65  IF %ERRORLEVEL% NEQ 0 exit /b 1\n   66  \n\nC:\\Users\\johnb\\source\\repos\\odin-base\\build_web.bat:\n   17  ::\n   18  :: Note that there is a rayGUI equivalent: -define:RAYGUI_WASM_LIB=env.o\n   19: odin build src\\main_web -target:js_wasm32 -build-mode:obj -define:RAYLIB_WASM_LIB=env.o -define:RAYGUI_WASM_LIB=env.o  -out:%OUT_DIR%\\game.o\n   20  IF %ERRORLEVEL% NEQ 0 exit /b 1\n   21  \n   ..\n   30  :: index_template.html contains the javascript code that calls the procedures in\n   31  :: source/main_web/main_web.odin\n   32: set flags=-sUSE_GLFW=3 -sWASM_BIGINT -sASYNCIFY -g -sALLOW_MEMORY_GROWTH=1 -sINITIAL_HEAP=16777216 -sSTACK_SIZE=65536  -sWARN_ON_UNDEFINED_SYMBOLS=0 -sASSERTIONS --shell-file src\\main_web\\index_template.html\n   33  \n   34  :: For debugging: Add `-g` to `emcc` (gives better error callstack in chrome)\n\nC:\\Users\\johnb\\source\\repos\\odin-base\\source\\game.odin:\n  466  \t\trl.ClearBackground(rl.BLACK)\n  467  \n  468: \t\tsrc := rl.Rectangle{ 0, 0, f32(gmem.game_render_target.texture.width), f32(-gmem.game_render_target.texture.height) }\n  469  \t\t\n  470  \t\tscale := min(screen_width/global_game_view_pixels_width, screen_height/global_game_view_pixels_height)\n  ...\n  474  \n  475  \t\tdst := rl.Rectangle{(screen_width - window_scaled_width)/2, (screen_height - window_scaled_height)/2, window_scaled_width, window_scaled_height}\n  476: \t\trl.DrawTexturePro(gmem.game_render_target.texture, src, dst, [2]f32{0,0}, 0, rl.WHITE)\n  477  \n  478  \t\trl.EndDrawing()\n\nC:\\Users\\johnb\\source\\repos\\odin-base\\source\\main_web\\index_template.html:\n   29  <body>\n   30  \t<canvas class=\"game_canvas\" id=\"canvas\" oncontextmenu=\"event.preventDefault()\" tabindex=\"-1\" onmousedown=\"event.target.focus()\" onkeydown=\"event.preventDefault()\"></canvas>\n   31: \t<script type=\"text/javascript\" src=\"odin.js\"></script>\n   32  \t<script>\n   33  \t\tvar odinMemoryInterface = new odin.WasmMemoryInterface();\n\nC:\\Users\\johnb\\source\\repos\\odin-base\\source\\rlgrid\\grid.odin:\n   84  \n   85  \n   86: draw_sprite_sheet_clip_on_grid :: proc(sprite_sheet: rl.Texture2D, src_grid_pos, dst_grid_pos: [2]f32, src_cell_size, dst_cell_size, rotation: f32) \n   87  {\n   88: \tsrc_rect := get_grid_cell_rectangle(src_grid_pos, src_cell_size)\n   89  \tdst_rect := get_grid_cell_rectangle(dst_grid_pos, dst_cell_size)\n   90  \tdst_midpoint := [2]f32{dst_rect.width / 2, dst_rect.height / 2}\n   91  \tdst_rect.x += dst_midpoint.x\n   92  \tdst_rect.y += dst_midpoint.y\n   93: \trl.DrawTexturePro(sprite_sheet, src_rect, dst_rect, [2]f32{dst_midpoint.x, dst_midpoint.y}, rotation, rl.WHITE)\n   94  }\n   95  \n   ..\n  104   * inputs:\n  105   * - tex: Source Texture to take a clip out of\n  106:  * - src_rectangle: The clip dimensions in grid coordinates of the source texture's grid\n  107:  * - src_grid_cell_size: The cell size of the source texture's grid. For example, maybe the sprites each take up 16 x 16 pixels. In this case, src_grid_cell_size will be 16\n  108:  * - dst_rectangle: The destination that the clip should be drawn at on wherever the render target is pointing to. If the dst_rectangle is smaller than the src_rectangle, the sprite will be shrunk. If the dst_rectangle is larger than the src_rectangle, then it will be stretched larger. \n  109   * - dst_grid_cell_size: The cell size of the render target's grid. So if we are rendering to a grid where each cell is 32 x 32 pixels, the value will be 32\n  110   * - rotation: the rotation in degrees to rotate the sprite on the render target\n  111   * \n  112   * **/\n  113: draw_grid_texture_clip_on_grid :: proc(tex: rl.Texture2D, src_rectangle: rl.Rectangle, src_grid_cell_size: f32, dst_rectangle: rl.Rectangle, dst_grid_cell_size, rotation: f32, flip_x : bool = false, flip_y: bool = false) \n  114  {\n  115: \tsrc_rect := get_rectangle_on_grid(src_rectangle, src_grid_cell_size)\n  116  \tif flip_x\n  117  \t{\n  118: \t\tsrc_rect.width = -src_rect.width\n  119  \t}\n  120  \telse if flip_y\n  121  \t{\n  122: \t\tsrc_rect.height = -src_rect.height\n  123  \t}\n  124  \n  ...\n  131  \n  132  \t// rl.DrawCircleV(rotation_origin, 5, rl.RED)\n  133: \trl.DrawTexturePro(tex, src_rect, dst_rect, rotation_origin, rotation, rl.WHITE)\n  134  \t// rl.DrawCircleV([2]f32{dst_rect.x, dst_rect.y}, 5, rl.RED)\n  135  \t// rl.DrawLineV(rotation_origin, [2]f32{dst_rect.x, dst_rect.y}, rl.WHITE)\n\nC:\\odin-windows-amd64-dev-2025-03\\vendor\\raylib\\raylib.odin:\n   51  \t*       [rmodels] tinyobj_loader_c (Syoyo Fujita) for models loading (OBJ, MTL)\n   52  \t*       [rmodels] cgltf (Johannes Kuhlmann) for models loading (glTF)\n   53: \t*       [rmodels] m3d (bzt) for models loading (M3D, https://bztsrc.gitlab.io/model3d)\n   54  \t*       [rmodels] vox_loader (Johann Nadalutti) for models loading (VOX)\n   55  \t*       [raudio] dr_wav (David Reid) for WAV audio file loading\n   ..\n  831  \tSUBTRACT_COLORS,                  // Blend textures subtracting colors (alternative)\n  832  \tALPHA_PREMULTIPLY,                // Blend premultiplied textures considering alpha\n  833: \tCUSTOM,                           // Blend textures using custom src/dst factors (use rlSetBlendFactors())\n  834: \tCUSTOM_SEPARATE,                  // Blend textures using custom rgb/alpha separate src/dst factors (use rlSetBlendFactorsSeparate())\n  835  }\n  836  \n  ...\n 1389  \tImageDrawTriangleFan    :: proc(dst: ^Image, points: [^]Vector2, pointCount: c.int, color: Color) ---                                    // Draw a triangle fan defined by points within an image (first vertex is the center)\n 1390  \tImageDrawTriangleStrip  :: proc(dst: ^Image, points: [^]Vector2, pointCount: c.int, color: Color) ---                                    // Draw a triangle strip defined by points within an image\n 1391: \tImageDraw               :: proc(dst: ^Image, src: Image, srcRec, dstRec: Rectangle, tint: Color) ---                                     // Draw a source image within a destination image (tint applied to source)\n 1392  \tImageDrawText           :: proc(dst: ^Image, text: cstring, posX, posY: c.int, fontSize: c.int, color: Color) ---                        // Draw text (using default font) within an image (destination)\n 1393  \tImageDrawTextEx         :: proc(dst: ^Image, font: Font, text: cstring, position: Vector2, fontSize: f32, spacing: f32, tint: Color) --- // Draw text (custom sprite font) within an image (destination)\n ....\n 1435  \tColorContrast       :: proc(color: Color, contrast: f32) -> Color ---               // Get color with contrast correction, contrast values between -1.0f and 1.0f\n 1436  \tColorAlpha          :: proc(color: Color, alpha: f32) -> Color ---                  // Get color with alpha applied, alpha goes from 0.0f to 1.0f\n 1437: \tColorAlphaBlend     :: proc(dst, src, tint: Color) -> Color ---                     // Get src alpha-blended into dst color with tint\n 1438  \tColorLerp           :: proc(color1, color2: Color, factor: f32) -> Color ---        // Get color lerp interpolation between two colors, factor [0.0f..1.0f]\n 1439  \tGetColor            :: proc(hexValue: c.uint) -> Color ---                          // Get Color structure from hexadecimal value\n 1440: \tGetPixelColor       :: proc(srcPtr: rawptr, format: PixelFormat) -> Color ---       // Get Color from a source pixel pointer of certain format\n 1441  \tSetPixelColor       :: proc(dstPtr: rawptr, color: Color, format: PixelFormat) ---  // Set color formatted into destination pixel pointer\n 1442  \tGetPixelDataSize    :: proc(width, height: c.int, format: PixelFormat) -> c.int --- // Get pixel data size in bytes for certain format\n ....\n 1496  \t// NOTE: Some strings allocate memory internally for returned strings, just be careful!\n 1497  \n 1498: \tTextCopy      :: proc(dst: [^]byte, src: cstring) -> c.int ---                               // Copy one string to another, returns bytes copied\n 1499  \tTextIsEqual   :: proc(text1, text2: cstring) -> bool ---                                     // Check if two text string are equal\n 1500  \tTextLength    :: proc(text: cstring) -> c.uint ---                                           // Get text length, checks for '\\0' ending\n\nC:\\odin-windows-amd64-dev-2025-03\\vendor\\raylib\\README.md:\n    1: <img align=\"left\" src=\"https://github.com/raysan5/raylib/blob/master/logo/raylib_logo_animation.gif\" width=\"288px\">\n    2  \n    3  **raylib is a simple and easy-to-use library to enjoy videogames programming.**\n    .\n   37  features\n   38  --------\n   39:   - **NO external dependencies**, all required libraries are [bundled into raylib](https://github.com/raysan5/raylib/tree/master/src/external)\n   40    - Multiple platforms supported: **Windows, Linux, MacOS, RPI, Android, HTML5... and more!**\n   41    - Written in plain C code (C99) using PascalCase/camelCase notation\n   42    - Hardware accelerated with OpenGL (**1.1, 2.1, 3.3, 4.3, ES 2.0 or ES 3.0**)\n   43:   - **Unique OpenGL abstraction layer** (usable as standalone module): [rlgl](https://github.com/raysan5/raylib/blob/master/src/rlgl.h)\n   44    - Multiple **Fonts** formats supported (TTF, Image fonts, AngelCode fonts)\n   45    - Multiple texture formats supported, including **compressed formats** (DXT, ETC, ASTC)\n   ..\n   48    - **Animated 3D models** supported (skeletal bones animation) (IQM)\n   49    - Shaders support, including model and **postprocessing** shaders.\n   50:   - **Powerful math module** for Vector, Matrix and Quaternion operations: [raymath](https://github.com/raysan5/raylib/blob/master/src/raymath.h)\n   51    - Audio loading and playing with streaming support (WAV, OGG, MP3, FLAC, XM, MOD)\n   52    - **VR stereo rendering** support with configurable HMD device parameters\n   ..\n  141  raylib is licensed under an unmodified zlib/libpng license, which is an OSI-certified, BSD-like license that allows static linking with closed source software. Check [LICENSE](LICENSE) for further details.\n  142  \n  143: raylib uses internally some libraries for window/graphics/inputs management and also to support different file formats loading, all those libraries are embedded with and are available in [src/external](https://github.com/raysan5/raylib/tree/master/src/external) directory. Check [raylib dependencies LICENSES](https://github.com/raysan5/raylib/wiki/raylib-dependencies) on raylib Wiki for details.\n  144  \n\nC:\\odin-windows-amd64-dev-2025-03\\vendor\\raylib\\linux\\libraylib.so.5.5.0:\n    <binary>\n\nC:\\odin-windows-amd64-dev-2025-03\\vendor\\raylib\\linux\\libraylib.so.550:\n    <binary>\n\nC:\\odin-windows-amd64-dev-2025-03\\vendor\\raylib\\rlgl\\rlgl.odin:\n  243  ZERO                                 :: 0           // GL_ZERO\n  244  ONE                                  :: 1           // GL_ONE\n  245: SRC_COLOR                            :: 0x0300      // GL_SRC_COLOR\n  246: ONE_MINUS_SRC_COLOR                  :: 0x0301      // GL_ONE_MINUS_SRC_COLOR\n  247: SRC_ALPHA                            :: 0x0302      // GL_SRC_ALPHA\n  248: ONE_MINUS_SRC_ALPHA                  :: 0x0303      // GL_ONE_MINUS_SRC_ALPHA\n  249  DST_ALPHA                            :: 0x0304      // GL_DST_ALPHA\n  250  ONE_MINUS_DST_ALPHA                  :: 0x0305      // GL_ONE_MINUS_DST_ALPHA\n  251  DST_COLOR                            :: 0x0306      // GL_DST_COLOR\n  252  ONE_MINUS_DST_COLOR                  :: 0x0307      // GL_ONE_MINUS_DST_COLOR\n  253: SRC_ALPHA_SATURATE                   :: 0x0308      // GL_SRC_ALPHA_SATURATE\n  254  CONSTANT_COLOR                       :: 0x8001      // GL_CONSTANT_COLOR\n  255  ONE_MINUS_CONSTANT_COLOR             :: 0x8002      // GL_ONE_MINUS_CONSTANT_COLOR\n  ...\n  267  BLEND_EQUATION_ALPHA                 :: 0x883D      // GL_BLEND_EQUATION_ALPHA\n  268  BLEND_DST_RGB                        :: 0x80C8      // GL_BLEND_DST_RGB\n  269: BLEND_SRC_RGB                        :: 0x80C9      // GL_BLEND_SRC_RGB\n  270  BLEND_DST_ALPHA                      :: 0x80CA      // GL_BLEND_DST_ALPHA\n  271: BLEND_SRC_ALPHA                      :: 0x80CB      // GL_BLEND_SRC_ALPHA\n  272  BLEND_COLOR                          :: 0x8005      // GL_BLEND_COLOR\n  273  \n  ...\n  439  \tDisableFramebuffer :: proc() ---                                            // Disable render texture (fbo), return to default framebuffer\n  440  \tActiveDrawBuffers  :: proc(count: c.int) ---                                // Activate multiple draw color buffers\n  441: \tBlitFramebuffer\t :: proc(srcX, srcY, srcWidth, srcHeight, dstX, dstY, dstWidth, dstHeight, bufferMask: c.int) --- // Blit active framebuffer to main framebuffer\n  442  \n  443  \t// General render state\n  ...\n  470  \tCheckErrors             :: proc() ---                                                                      // Check and log OpenGL error codes\n  471  \tSetBlendMode            :: proc(mode: c.int) ---                                                           // Set blending mode\n  472: \tSetBlendFactors         :: proc(glSrcFactor, glDstFactor, glEquation: c.int) ---                           // Set blending mode factor and equation (using OpenGL factors)\n  473: \tSetBlendFactorsSeparate :: proc(glSrcRGB, glDstRGB, glSrcAlpha, glDstAlpha, glEqRGB, glEqAlpha: c.int) --- // Set blending mode factors and equations separately (using OpenGL factors)\n  474  \n  475  \t//------------------------------------------------------------------------------------\n  ...\n  563  \tBindShaderBuffer    :: proc(id: c.uint, index: c.uint) ---                                           // Bind SSBO buffer\n  564  \tReadShaderBuffer    :: proc(id: c.uint, dest: rawptr, count: c.uint, offset: c.uint) ---             // Read SSBO buffer data (GPU->CPU)\n  565: \tCopyShaderBuffer    :: proc(destId, srcId: c.uint, destOffset, srcOffset: c.uint, count: c.uint) --- // Copy SSBO data between buffers\n  566  \tGetShaderBufferSize :: proc(id: c.uint) -> c.uint ---                                                // Get SSBO buffer size\n  567  \n\nC:\\odin-windows-amd64-dev-2025-03\\core\\c\\libc\\stdarg.odin:\n   12  \t@(link_name=\"llvm.va_start\") _va_start :: proc(arglist: ^i8) ---\n   13  \t@(link_name=\"llvm.va_end\")   _va_end   :: proc(arglist: ^i8) ---\n   14: \t@(link_name=\"llvm.va_copy\")  _va_copy  :: proc(dst, src: ^i8) ---\n   15  }\n   16  \n   ..\n   25  }\n   26  \n   27: va_copy :: #force_inline proc(dst, src: ^va_list) {\n   28: \t_va_copy(cast(^i8)dst, cast(^i8)src)\n   29  }\n   30  \n\nC:\\odin-windows-amd64-dev-2025-03\\core\\c\\libc\\wchar.odin:\n   68  \twcscspn   :: proc(s1, s2: [^]wchar_t) -> size_t ---\n   69  \twcspbrk   :: proc(s1, s2: [^]wchar_t) -> [^]wchar_t ---\n   70: \twcsrchr   :: proc(s: [^]wchar_t, c: wchar_t) -> [^]wchar_t ---\n   71  \twcsspn    :: proc(s1, s2: [^]wchar_t) -> size_t ---\n   72  \twcsstr    :: proc(s1, s2: [^]wchar_t) -> [^]wchar_t ---\n   ..\n   94  \n   95  \t// 7.29.6.4 Restartable multibyte/wide string conversion functions\n   96: \tmbsrtowcs :: proc(dst: [^]wchar_t, src: ^cstring, len: size_t, ps: ^mbstate_t) -> size_t ---\n   97: \twcsrtombs :: proc(dst: ^char, src: ^[^]wchar_t, len: size_t, ps: ^mbstate_t) -> size_t ---\n   98  }\n   99  \n\nC:\\odin-windows-amd64-dev-2025-03\\core\\crypto\\_aes\\ct64\\api.odin:\n   20  }\n   21  \n   22: // encrypt_block sets `dst` to `AES-ECB-Encrypt(src)`.\n   23: encrypt_block :: proc(ctx: ^Context, dst, src: []byte) {\n   24  \tq: [8]u64\n   25: \tload_blockx1(&q, src)\n   26  \t_encrypt(&q, ctx._sk_exp[:], ctx._num_rounds)\n   27  \tstore_blockx1(dst, &q)\n   28  }\n   29  \n   30: // encrypt_block sets `dst` to `AES-ECB-Decrypt(src)`.\n   31: decrypt_block :: proc(ctx: ^Context, dst, src: []byte) {\n   32  \tq: [8]u64\n   33: \tload_blockx1(&q, src)\n   34  \t_decrypt(&q, ctx._sk_exp[:], ctx._num_rounds)\n   35  \tstore_blockx1(dst, &q)\n   36  }\n   37  \n   38: // encrypt_blocks sets `dst` to `AES-ECB-Encrypt(src[0], .. src[n])`.\n   39: encrypt_blocks :: proc(ctx: ^Context, dst, src: [][]byte) {\n   40  \tq: [8]u64 = ---\n   41: \tsrc, dst := src, dst\n   42  \n   43: \tn := len(src)\n   44  \tfor n > 4 {\n   45: \t\tload_blocks(&q, src[0:4])\n   46  \t\t_encrypt(&q, ctx._sk_exp[:], ctx._num_rounds)\n   47  \t\tstore_blocks(dst[0:4], &q)\n   48  \n   49: \t\tsrc = src[4:]\n   50  \t\tdst = dst[4:]\n   51  \t\tn -= 4\n   52  \t}\n   53  \tif n > 0 {\n   54: \t\tload_blocks(&q, src)\n   55  \t\t_encrypt(&q, ctx._sk_exp[:], ctx._num_rounds)\n   56  \t\tstore_blocks(dst, &q)\n   ..\n   58  }\n   59  \n   60: // decrypt_blocks sets dst to `AES-ECB-Decrypt(src[0], .. src[n])`.\n   61: decrypt_blocks :: proc(ctx: ^Context, dst, src: [][]byte) {\n   62  \tq: [8]u64 = ---\n   63: \tsrc, dst := src, dst\n   64  \n   65: \tn := len(src)\n   66  \tfor n > 4 {\n   67: \t\tload_blocks(&q, src[0:4])\n   68  \t\t_decrypt(&q, ctx._sk_exp[:], ctx._num_rounds)\n   69  \t\tstore_blocks(dst[0:4], &q)\n   70  \n   71: \t\tsrc = src[4:]\n   72  \t\tdst = dst[4:]\n   73  \t\tn -= 4\n   74  \t}\n   75  \tif n > 0 {\n   76: \t\tload_blocks(&q, src)\n   77  \t\t_decrypt(&q, ctx._sk_exp[:], ctx._num_rounds)\n   78  \t\tstore_blocks(dst, &q)\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\crypto\\_aes\\ct64\\ghash.odin:\n   82  \n   83  \tfor l > 0 {\n   84: \t\tsrc: []byte = ---\n   85  \t\tif l >= _aes.GHASH_BLOCK_SIZE {\n   86: \t\t\tsrc = buf\n   87  \t\t\tbuf = buf[_aes.GHASH_BLOCK_SIZE:]\n   88  \t\t\tl -= _aes.GHASH_BLOCK_SIZE\n   ..\n   90  \t\t\ttmp: [_aes.GHASH_BLOCK_SIZE]byte\n   91  \t\t\tcopy(tmp[:], buf)\n   92: \t\t\tsrc = tmp[:]\n   93  \t\t\tl = 0\n   94  \t\t}\n   95: \t\ty1 ~= endian.unchecked_get_u64be(src)\n   96: \t\ty0 ~= endian.unchecked_get_u64be(src[8:])\n   97  \n   98  \t\ty0r := rev64(y0)\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\crypto\\_aes\\ct64\\helpers.odin:\n    5  import \"core:encoding/endian\"\n    6  \n    7: load_blockx1 :: proc \"contextless\" (q: ^[8]u64, src: []byte) {\n    8: \tif len(src) != _aes.BLOCK_SIZE {\n    9  \t\tintrinsics.trap()\n   10  \t}\n   11  \n   12  \tw: [4]u32 = ---\n   13: \tw[0] = endian.unchecked_get_u32le(src[0:])\n   14: \tw[1] = endian.unchecked_get_u32le(src[4:])\n   15: \tw[2] = endian.unchecked_get_u32le(src[8:])\n   16: \tw[3] = endian.unchecked_get_u32le(src[12:])\n   17  \tq[0], q[4] = interleave_in(w[:])\n   18  \torthogonalize(q)\n   ..\n   32  }\n   33  \n   34: load_blocks :: proc \"contextless\" (q: ^[8]u64, src: [][]byte) {\n   35: \tif n := len(src); n > STRIDE || n == 0 {\n   36  \t\tintrinsics.trap()\n   37  \t}\n   38  \n   39  \tw: [4]u32 = ---\n   40: \tfor s, i in src {\n   41  \t\tif len(s) != _aes.BLOCK_SIZE {\n   42  \t\t\tintrinsics.trap()\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\crypto\\_aes\\hw_intel\\ghash.odin:\n  242  \t// Process 1 block at a time\n  243  \tfor l > 0 {\n  244: \t\tsrc: []byte = ---\n  245  \t\tif l >= _aes.GHASH_BLOCK_SIZE {\n  246: \t\t\tsrc = buf\n  247  \t\t\tbuf = buf[_aes.GHASH_BLOCK_SIZE:]\n  248  \t\t\tl -= _aes.GHASH_BLOCK_SIZE\n  ...\n  250  \t\t\ttmp: [_aes.GHASH_BLOCK_SIZE]byte\n  251  \t\t\tcopy(tmp[:], buf)\n  252: \t\t\tsrc = tmp[:]\n  253  \t\t\tl = 0\n  254  \t\t}\n  255  \n  256: \t\taw := intrinsics.unaligned_load((^x86.__m128i)(raw_data(src)))\n  257  \t\taw = byteswap(aw)\n  258  \n\nC:\\odin-windows-amd64-dev-2025-03\\core\\crypto\\_chacha20\\ref\\chacha20_ref.odin:\n    5  import \"core:math/bits\"\n    6  \n    7: stream_blocks :: proc(ctx: ^_chacha20.Context, dst, src: []byte, nr_blocks: int) {\n    8  \t// Enforce the maximum consumed keystream per IV.\n    9  \t_chacha20.check_counter_limit(ctx, nr_blocks)\n   10  \n   11: \tdst, src := dst, src\n   12  \tx := &ctx._s\n   13  \tfor n := 0; n < nr_blocks; n = n + 1 {\n   ..\n  151  \t\tx15 += x[15]\n  152  \n  153: \t\t// - The caller(s) ensure that src/dst are valid.\n  154  \t\t// - The compiler knows if the target is picky about alignment.\n  155  \n  156  \t\t#no_bounds_check {\n  157: \t\t\tif src != nil {\n  158: \t\t\t\tendian.unchecked_put_u32le(dst[0:4], endian.unchecked_get_u32le(src[0:4]) ~ x0)\n  159: \t\t\t\tendian.unchecked_put_u32le(dst[4:8], endian.unchecked_get_u32le(src[4:8]) ~ x1)\n  160: \t\t\t\tendian.unchecked_put_u32le(dst[8:12], endian.unchecked_get_u32le(src[8:12]) ~ x2)\n  161: \t\t\t\tendian.unchecked_put_u32le(dst[12:16], endian.unchecked_get_u32le(src[12:16]) ~ x3)\n  162: \t\t\t\tendian.unchecked_put_u32le(dst[16:20], endian.unchecked_get_u32le(src[16:20]) ~ x4)\n  163: \t\t\t\tendian.unchecked_put_u32le(dst[20:24], endian.unchecked_get_u32le(src[20:24]) ~ x5)\n  164: \t\t\t\tendian.unchecked_put_u32le(dst[24:28], endian.unchecked_get_u32le(src[24:28]) ~ x6)\n  165: \t\t\t\tendian.unchecked_put_u32le(dst[28:32], endian.unchecked_get_u32le(src[28:32]) ~ x7)\n  166: \t\t\t\tendian.unchecked_put_u32le(dst[32:36], endian.unchecked_get_u32le(src[32:36]) ~ x8)\n  167: \t\t\t\tendian.unchecked_put_u32le(dst[36:40], endian.unchecked_get_u32le(src[36:40]) ~ x9)\n  168  \t\t\t\tendian.unchecked_put_u32le(\n  169  \t\t\t\t\tdst[40:44],\n  170: \t\t\t\t\tendian.unchecked_get_u32le(src[40:44]) ~ x10,\n  171  \t\t\t\t)\n  172  \t\t\t\tendian.unchecked_put_u32le(\n  173  \t\t\t\t\tdst[44:48],\n  174: \t\t\t\t\tendian.unchecked_get_u32le(src[44:48]) ~ x11,\n  175  \t\t\t\t)\n  176  \t\t\t\tendian.unchecked_put_u32le(\n  177  \t\t\t\t\tdst[48:52],\n  178: \t\t\t\t\tendian.unchecked_get_u32le(src[48:52]) ~ x12,\n  179  \t\t\t\t)\n  180  \t\t\t\tendian.unchecked_put_u32le(\n  181  \t\t\t\t\tdst[52:56],\n  182: \t\t\t\t\tendian.unchecked_get_u32le(src[52:56]) ~ x13,\n  183  \t\t\t\t)\n  184  \t\t\t\tendian.unchecked_put_u32le(\n  185  \t\t\t\t\tdst[56:60],\n  186: \t\t\t\t\tendian.unchecked_get_u32le(src[56:60]) ~ x14,\n  187  \t\t\t\t)\n  188  \t\t\t\tendian.unchecked_put_u32le(\n  189  \t\t\t\t\tdst[60:64],\n  190: \t\t\t\t\tendian.unchecked_get_u32le(src[60:64]) ~ x15,\n  191  \t\t\t\t)\n  192: \t\t\t\tsrc = src[_chacha20.BLOCK_SIZE:]\n  193  \t\t\t} else {\n  194  \t\t\t\tendian.unchecked_put_u32le(dst[0:4], x0)\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\crypto\\_chacha20\\simd128\\chacha20_simd128.odin:\n  174  @(private = \"file\")\n  175  _xor_simd128 :: #force_inline proc \"contextless\" (\n  176: \tsrc: [^]simd.u32x4,\n  177  \tv0, v1, v2, v3: simd.u32x4,\n  178  ) -> (\n  ...\n  184  \tv0, v1, v2, v3 := v0, v1, v2, v3\n  185  \n  186: \tv0 = simd.bit_xor(v0, intrinsics.unaligned_load((^simd.u32x4)(src[0:])))\n  187: \tv1 = simd.bit_xor(v1, intrinsics.unaligned_load((^simd.u32x4)(src[1:])))\n  188: \tv2 = simd.bit_xor(v2, intrinsics.unaligned_load((^simd.u32x4)(src[2:])))\n  189: \tv3 = simd.bit_xor(v3, intrinsics.unaligned_load((^simd.u32x4)(src[3:])))\n  190  \n  191  \treturn v0, v1, v2, v3\n  ...\n  227  \n  228  @(enable_target_feature = TARGET_SIMD_FEATURES)\n  229: stream_blocks :: proc(ctx: ^_chacha20.Context, dst, src: []byte, nr_blocks: int) {\n  230  \t// Enforce the maximum consumed keystream per IV.\n  231  \t_chacha20.check_counter_limit(ctx, nr_blocks)\n  232  \n  233  \tdst_v := ([^]simd.u32x4)(raw_data(dst))\n  234: \tsrc_v := ([^]simd.u32x4)(raw_data(src))\n  235  \n  236  \tx := &ctx._s\n  ...\n  321  \n  322  \t\t\t#no_bounds_check {\n  323: \t\t\t\tif src != nil {\n  324: \t\t\t\t\tv0, v1, v2, v3 = _xor_simd128(src_v, v0, v1, v2, v3)\n  325: \t\t\t\t\tv4, v5, v6, v7 = _xor_simd128(src_v[4:], v4, v5, v6, v7)\n  326: \t\t\t\t\tv8, v9, v10, v11 = _xor_simd128(src_v[8:], v8, v9, v10, v11)\n  327: \t\t\t\t\tv12, v13, v14, v15 = _xor_simd128(src_v[12:], v12, v13, v14, v15)\n  328: \t\t\t\t\tv16, v17, v18, v19 = _xor_simd128(src_v[16:], v16, v17, v18, v19)\n  329: \t\t\t\t\tv20, v21, v22, v23 = _xor_simd128(src_v[20:], v20, v21, v22, v23)\n  330: \t\t\t\t\tv24, v25, v26, v27 = _xor_simd128(src_v[24:], v24, v25, v26, v27)\n  331: \t\t\t\t\tv28, v29, v30, v31 = _xor_simd128(src_v[28:], v28, v29, v30, v31)\n  332: \t\t\t\t\tsrc_v = src_v[32:]\n  333  \t\t\t\t}\n  334  \n  ...\n  395  \n  396  \t\t\t#no_bounds_check {\n  397: \t\t\t\tif src != nil {\n  398: \t\t\t\t\tv0, v1, v2, v3 = _xor_simd128(src_v, v0, v1, v2, v3)\n  399: \t\t\t\t\tv4, v5, v6, v7 = _xor_simd128(src_v[4:], v4, v5, v6, v7)\n  400: \t\t\t\t\tv8, v9, v10, v11 = _xor_simd128(src_v[8:], v8, v9, v10, v11)\n  401: \t\t\t\t\tv12, v13, v14, v15 = _xor_simd128(src_v[12:], v12, v13, v14, v15)\n  402: \t\t\t\t\tsrc_v = src_v[16:]\n  403  \t\t\t\t}\n  404  \n  ...\n  429  \n  430  \t\t#no_bounds_check {\n  431: \t\t\tif src != nil {\n  432: \t\t\t\tv0, v1, v2, v3 = _xor_simd128(src_v, v0, v1, v2, v3)\n  433: \t\t\t\tsrc_v = src_v[4:]\n  434  \t\t\t}\n  435  \n\nC:\\odin-windows-amd64-dev-2025-03\\core\\crypto\\_chacha20\\simd256\\chacha20_simd256.odin:\n  143  @(private = \"file\")\n  144  _xor_simd256 :: #force_inline proc \"contextless\" (\n  145: \tsrc: [^]simd.u32x8,\n  146  \tv0, v1, v2, v3: simd.u32x8,\n  147  ) -> (\n  ...\n  153  \tv0, v1, v2, v3 := v0, v1, v2, v3\n  154  \n  155: \tv0 = simd.bit_xor(v0, intrinsics.unaligned_load((^simd.u32x8)(src[0:])))\n  156: \tv1 = simd.bit_xor(v1, intrinsics.unaligned_load((^simd.u32x8)(src[1:])))\n  157: \tv2 = simd.bit_xor(v2, intrinsics.unaligned_load((^simd.u32x8)(src[2:])))\n  158: \tv3 = simd.bit_xor(v3, intrinsics.unaligned_load((^simd.u32x8)(src[3:])))\n  159  \n  160  \treturn v0, v1, v2, v3\n  ...\n  163  @(private = \"file\")\n  164  _xor_simd256_x1 :: #force_inline proc \"contextless\" (\n  165: \tsrc: [^]simd.u32x8,\n  166  \tv0, v1: simd.u32x8,\n  167  ) -> (\n  ...\n  171  \tv0, v1 := v0, v1\n  172  \n  173: \tv0 = simd.bit_xor(v0, intrinsics.unaligned_load((^simd.u32x8)(src[0:])))\n  174: \tv1 = simd.bit_xor(v1, intrinsics.unaligned_load((^simd.u32x8)(src[1:])))\n  175  \n  176  \treturn v0, v1\n  ...\n  198  \n  199  @(enable_target_feature = \"sse2,ssse3,avx,avx2\")\n  200: stream_blocks :: proc(ctx: ^_chacha20.Context, dst, src: []byte, nr_blocks: int) {\n  201  \t// Enforce the maximum consumed keystream per IV.\n  202  \t_chacha20.check_counter_limit(ctx, nr_blocks)\n  203  \n  204  \tdst_v := ([^]simd.u32x8)(raw_data(dst))\n  205: \tsrc_v := ([^]simd.u32x8)(raw_data(src))\n  206  \n  207  \tx := &ctx._s\n  ...\n  250  \n  251  \t\t#no_bounds_check {\n  252: \t\t\tif src != nil {\n  253: \t\t\t\tv0, v1, v2, v3 = _xor_simd256(src_v, v0, v1, v2, v3)\n  254: \t\t\t\tv4, v5, v6, v7 = _xor_simd256(src_v[4:], v4, v5, v6, v7)\n  255: \t\t\t\tv8, v9, v10, v11 = _xor_simd256(src_v[8:], v8, v9, v10, v11)\n  256: \t\t\t\tv12, v13, v14, v15 = _xor_simd256(src_v[12:], v12, v13, v14, v15)\n  257: \t\t\t\tsrc_v = src_v[16:]\n  258  \t\t\t}\n  259  \n  ...\n  279  \n  280  \t\tif n == 1 {\n  281: \t\t\t// Note: No need to advance src_v, dst_v, or increment the counter\n  282  \t\t\t// since this is guaranteed to be the final block.\n  283  \t\t\t#no_bounds_check {\n  284: \t\t\t\tif src != nil {\n  285: \t\t\t\t\tv0, v1 = _xor_simd256_x1(src_v, v0, v1)\n  286  \t\t\t\t}\n  287  \n  ...\n  292  \n  293  \t\t#no_bounds_check {\n  294: \t\t\tif src != nil {\n  295: \t\t\t\tv0, v1, v2, v3 = _xor_simd256(src_v, v0, v1, v2, v3)\n  296: \t\t\t\tsrc_v = src_v[4:]\n  297  \t\t\t}\n  298  \n\nC:\\odin-windows-amd64-dev-2025-03\\core\\crypto\\_chacha20\\simd256\\chacha20_simd256_stub.odin:\n    9  }\n   10  \n   11: stream_blocks :: proc(ctx: ^_chacha20.Context, dst, src: []byte, nr_blocks: int) {\n   12  \tpanic(\"crypto/chacha20: simd256 implementation unsupported\")\n   13  }\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\crypto\\aes\\aes_ctr.odin:\n   33  }\n   34  \n   35: // xor_bytes_ctr XORs each byte in src with bytes taken from the AES-CTR\n   36: // keystream, and writes the resulting output to dst.  dst and src MUST\n   37  // alias exactly or not at all.\n   38: xor_bytes_ctr :: proc(ctx: ^Context_CTR, dst, src: []byte) {\n   39  \tassert(ctx._is_initialized)\n   40  \n   41: \tsrc, dst := src, dst\n   42: \tif dst_len := len(dst); dst_len < len(src) {\n   43: \t\tsrc = src[:dst_len]\n   44  \t}\n   45  \n   46: \tif bytes.alias_inexactly(dst, src) {\n   47: \t\tpanic(\"crypto/aes: dst and src alias inexactly\")\n   48  \t}\n   49  \n   50: \t#no_bounds_check for remaining := len(src); remaining > 0; {\n   51  \t\t// Process multiple blocks at once\n   52  \t\tif ctx._off == BLOCK_SIZE {\n   53  \t\t\tif nr_blocks := remaining / BLOCK_SIZE; nr_blocks > 0 {\n   54  \t\t\t\tdirect_bytes := nr_blocks * BLOCK_SIZE\n   55: \t\t\t\tctr_blocks(ctx, dst, src, nr_blocks)\n   56  \t\t\t\tremaining -= direct_bytes\n   57  \t\t\t\tif remaining == 0 {\n   ..\n   59  \t\t\t\t}\n   60  \t\t\t\tdst = dst[direct_bytes:]\n   61: \t\t\t\tsrc = src[direct_bytes:]\n   62  \t\t\t}\n   63  \n   ..\n   72  \t\tbuffered_keystream := ctx._buffer[ctx._off:]\n   73  \t\tfor i := 0; i < to_xor; i = i + 1 {\n   74: \t\t\tdst[i] = buffered_keystream[i] ~ src[i]\n   75  \t\t}\n   76  \t\tctx._off += to_xor\n   77  \t\tdst = dst[to_xor:]\n   78: \t\tsrc = src[to_xor:]\n   79  \t\tremaining -= to_xor\n   80  \t}\n   ..\n  127  \n  128  @(private = \"file\")\n  129: ctr_blocks :: proc(ctx: ^Context_CTR, dst, src: []byte, nr_blocks: int) #no_bounds_check {\n  130  \t// Use the optimized hardware implementation if available.\n  131  \tif _, is_hw := ctx._impl.(Context_Impl_Hardware); is_hw {\n  132: \t\tctr_blocks_hw(ctx, dst, src, nr_blocks)\n  133  \t\treturn\n  134  \t}\n  ...\n  147  \n  148  \timpl := &ctx._impl.(ct64.Context)\n  149: \tsrc, dst := src, dst\n  150  \tnr_blocks := nr_blocks\n  151  \tctr_hi, ctr_lo := ctx._ctr_hi, ctx._ctr_lo\n  ...\n  165  \t\tct64.encrypt_blocks(impl, blocks, blocks)\n  166  \n  167: \t\txor_blocks(dst, src, blocks)\n  168  \n  169: \t\tif src != nil {\n  170: \t\t\tsrc = src[n * BLOCK_SIZE:]\n  171  \t\t}\n  172  \t\tdst = dst[n * BLOCK_SIZE:]\n  ...\n  181  \n  182  @(private)\n  183: xor_blocks :: #force_inline proc \"contextless\" (dst, src: []byte, blocks: [][]byte) {\n  184  \t// Note: This would be faster `core:simd` was used, however if\n  185  \t// performance of this implementation matters to where that\n  ...\n  187  \t// CPU that isn't e-waste.\n  188  \t#no_bounds_check {\n  189: \t\tif src != nil {\n  190  \t\t\t\tfor i in 0 ..< len(blocks) {\n  191  \t\t\t\t\toff := i * BLOCK_SIZE\n  192  \t\t\t\t\tfor j in 0 ..< BLOCK_SIZE {\n  193: \t\t\t\t\t\tblocks[i][j] ~= src[off + j]\n  194  \t\t\t\t\t}\n  195  \t\t\t\t}\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\crypto\\aes\\aes_ctr_hw_intel.odin:\n   14  \n   15  @(private, enable_target_feature = \"sse2,aes\")\n   16: ctr_blocks_hw :: proc(ctx: ^Context_CTR, dst, src: []byte, nr_blocks: int) #no_bounds_check {\n   17  \thw_ctx := ctx._impl.(Context_Impl_Hardware)\n   18  \n   ..\n   44  \t// should be \"adequate\" across most CPUs.\n   45  \n   46: \tsrc, dst := src, dst\n   47  \tnr_blocks := nr_blocks\n   48  \tctr_hi, ctr_lo := ctx._ctr_hi, ctx._ctr_lo\n   ..\n   87  \t\t}\n   88  \n   89: \t\txor_blocks_hw(dst, src, blks[:])\n   90  \n   91: \t\tif src != nil {\n   92: \t\t\tsrc = src[CTR_STRIDE_BYTES_HW:]\n   93  \t\t}\n   94  \t\tdst = dst[CTR_STRIDE_BYTES_HW:]\n   ..\n  119  \t\t}\n  120  \n  121: \t\txor_blocks_hw(dst, src, blks[:1])\n  122  \n  123: \t\tif src != nil {\n  124: \t\t\tsrc = src[BLOCK_SIZE:]\n  125  \t\t}\n  126  \t\tdst = dst[BLOCK_SIZE:]\n  ...\n  136  \n  137  @(private, enable_target_feature = \"sse2\")\n  138: xor_blocks_hw :: proc(dst, src: []byte, blocks: []x86.__m128i) {\n  139  \t#no_bounds_check {\n  140: \t\tif src != nil {\n  141  \t\t\t\tfor i in 0 ..< len(blocks) {\n  142  \t\t\t\t\toff := i * BLOCK_SIZE\n  143: \t\t\t\t\ttmp := intrinsics.unaligned_load((^x86.__m128i)(raw_data(src[off:])))\n  144  \t\t\t\t\tblocks[i] = x86._mm_xor_si128(blocks[i], tmp)\n  145  \t\t\t\t}\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\crypto\\aes\\aes_ecb.odin:\n   18  }\n   19  \n   20: // encrypt_ecb encrypts the BLOCK_SIZE buffer src, and writes the result to dst.\n   21: encrypt_ecb :: proc(ctx: ^Context_ECB, dst, src: []byte) {\n   22  \tassert(ctx._is_initialized)\n   23  \n   24: \tif len(dst) != BLOCK_SIZE || len(src) != BLOCK_SIZE {\n   25  \t\tpanic(\"crypto/aes: invalid buffer size(s)\")\n   26  \t}\n   ..\n   28  \tswitch &impl in ctx._impl {\n   29  \tcase ct64.Context:\n   30: \t\tct64.encrypt_block(&impl, dst, src)\n   31  \tcase Context_Impl_Hardware:\n   32: \t\tencrypt_block_hw(&impl, dst, src)\n   33  \t}\n   34  }\n   35  \n   36: // decrypt_ecb decrypts the BLOCK_SIZE buffer src, and writes the result to dst.\n   37: decrypt_ecb :: proc(ctx: ^Context_ECB, dst, src: []byte) {\n   38  \tassert(ctx._is_initialized)\n   39  \n   40: \tif len(dst) != BLOCK_SIZE || len(src) != BLOCK_SIZE {\n   41  \t\tpanic(\"crypto/aes: invalid buffer size(s)\")\n   42  \t}\n   ..\n   44  \tswitch &impl in ctx._impl {\n   45  \tcase ct64.Context:\n   46: \t\tct64.decrypt_block(&impl, dst, src)\n   47  \tcase Context_Impl_Hardware:\n   48: \t\tdecrypt_block_hw(&impl, dst, src)\n   49  \t}\n   50  }\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\crypto\\aes\\aes_ecb_hw_intel.odin:\n    7  \n    8  @(private, enable_target_feature = \"sse2,aes\")\n    9: encrypt_block_hw :: proc(ctx: ^Context_Impl_Hardware, dst, src: []byte) {\n   10: \tblk := intrinsics.unaligned_load((^x86.__m128i)(raw_data(src)))\n   11  \n   12  \tblk = x86._mm_xor_si128(blk, intrinsics.unaligned_load((^x86.__m128i)(&ctx._sk_exp_enc[0])))\n   ..\n   33  \n   34  @(private, enable_target_feature = \"sse2,aes\")\n   35: decrypt_block_hw :: proc(ctx: ^Context_Impl_Hardware, dst, src: []byte) {\n   36: \tblk := intrinsics.unaligned_load((^x86.__m128i)(raw_data(src)))\n   37  \n   38  \tblk = x86._mm_xor_si128(blk, intrinsics.unaligned_load((^x86.__m128i)(&ctx._sk_exp_dec[0])))\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\crypto\\aes\\aes_gcm.odin:\n  136  \t}\n  137  \tif text_len := u64(len(text)); text_len > GCM_P_MAX {\n  138: \t\tpanic(\"crypto/aes: oversized GCM src data\")\n  139  \t}\n  140  }\n  ...\n  197  \tdst: []byte,\n  198  \ts: ^[_aes.GHASH_BLOCK_SIZE]byte,\n  199: \tsrc: []byte,\n  200  \th: ^[_aes.GHASH_KEY_SIZE]byte,\n  201  \tiv: ^[_aes.GHASH_BLOCK_SIZE]byte,\n  ...\n  221  \n  222  \timpl := &ctx._impl.(ct64.Context)\n  223: \tsrc, dst := src, dst\n  224  \n  225: \tnr_blocks := len(src) / BLOCK_SIZE\n  226  \tfor nr_blocks > 0 {\n  227  \t\tn := min(ct64.STRIDE, nr_blocks)\n  ...\n  229  \n  230  \t\tif !is_seal {\n  231: \t\t\tct64.ghash(s[:], h[:], src[:l])\n  232  \t\t}\n  233  \n  ...\n  239  \t\tct64.encrypt_blocks(impl, blks[:n], ctrs[:n])\n  240  \n  241: \t\txor_blocks(dst, src, blks[:n])\n  242  \n  243  \t\tif is_seal {\n  ...\n  245  \t\t}\n  246  \n  247: \t\tsrc = src[l:]\n  248  \t\tdst = dst[l:]\n  249  \t\tnr_blocks -= n\n  250  \t}\n  251: \tif l := len(src); l > 0 {\n  252  \t\tif !is_seal {\n  253: \t\t\tct64.ghash(s[:], h[:], src[:l])\n  254  \t\t}\n  255  \n  ...\n  258  \n  259  \t\tfor i in 0 ..< l {\n  260: \t\t\tdst[i] = src[i] ~ ctrs[0][i]\n  261  \t\t}\n  262  \n\nC:\\odin-windows-amd64-dev-2025-03\\core\\crypto\\aes\\aes_gcm_hw_intel.odin:\n  108  \tdst: []byte,\n  109  \ts: ^[_aes.GHASH_BLOCK_SIZE]byte,\n  110: \tsrc: []byte,\n  111  \th: ^[_aes.GHASH_KEY_SIZE]byte,\n  112  \tiv: ^[_aes.GHASH_BLOCK_SIZE]byte,\n  ...\n  122  \tctr := endian.unchecked_get_u32be(iv[GCM_IV_SIZE:]) + 1\n  123  \n  124: \tsrc, dst := src, dst\n  125  \n  126  \t// Note: Instead of doing GHASH and CTR separately, it is more\n  ...\n  130  \n  131  \tblks: [CTR_STRIDE_HW]x86.__m128i = ---\n  132: \tnr_blocks := len(src) / BLOCK_SIZE\n  133  \tfor nr_blocks >= CTR_STRIDE_HW {\n  134  \t\tif !is_seal {\n  135: \t\t\thw_intel.ghash(s[:], h[:], src[:CTR_STRIDE_BYTES_HW])\n  136  \t\t}\n  137  \n  ...\n  173  \t\t}\n  174  \n  175: \t\txor_blocks_hw(dst, src, blks[:])\n  176  \n  177  \t\tif is_seal {\n  ...\n  179  \t\t}\n  180  \n  181: \t\tsrc = src[CTR_STRIDE_BYTES_HW:]\n  182  \t\tdst = dst[CTR_STRIDE_BYTES_HW:]\n  183  \t\tnr_blocks -= CTR_STRIDE_HW\n  ...\n  185  \n  186  \t// Handle the remainder.\n  187: \tfor n := len(src); n > 0; {\n  188  \t\tl := min(n, BLOCK_SIZE)\n  189  \t\tif !is_seal {\n  190: \t\t\thw_intel.ghash(s[:], h[:], src[:l])\n  191  \t\t}\n  192  \n  ...\n  213  \n  214  \t\tif l == BLOCK_SIZE {\n  215: \t\t\txor_blocks_hw(dst, src, blks[:1])\n  216  \t\t} else {\n  217  \t\t\tblk: [BLOCK_SIZE]byte\n  218: \t\t\tcopy(blk[:], src)\n  219  \t\t\txor_blocks_hw(blk[:], blk[:], blks[:1])\n  220  \t\t\tcopy(dst, blk[:l])\n  ...\n  225  \n  226  \t\tdst = dst[l:]\n  227: \t\tsrc = src[l:]\n  228  \t\tn -= l\n  229  \t}\n  ...\n  236  // the compiler.\n  237  //\n  238: // src/check_expr.cpp(7892): Assertion Failure: `c->curr_proc_decl->entity`\n  239  @(private = \"file\", enable_target_feature = \"sse4.1\")\n  240: hw_inc_ctr32 :: #force_inline proc \"contextless\" (src: ^x86.__m128i, ctr: u32) -> (x86.__m128i, u32) {\n  241: \tret := x86._mm_insert_epi32(src^, i32(intrinsics.byte_swap(ctr)), 3)\n  242  \treturn ret, ctr + 1\n  243  }\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\crypto\\aes\\aes_impl_hw_gen.odin:\n   20  \n   21  @(private)\n   22: encrypt_block_hw :: proc(ctx: ^Context_Impl_Hardware, dst, src: []byte) {\n   23  \tpanic(ERR_HW_NOT_SUPPORTED)\n   24  }\n   25  \n   26  @(private)\n   27: decrypt_block_hw :: proc(ctx: ^Context_Impl_Hardware, dst, src: []byte) {\n   28  \tpanic(ERR_HW_NOT_SUPPORTED)\n   29  }\n   30  \n   31  @(private)\n   32: ctr_blocks_hw :: proc(ctx: ^Context_CTR, dst, src: []byte, nr_blocks: int) {\n   33  \tpanic(ERR_HW_NOT_SUPPORTED)\n   34  }\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\crypto\\chacha20\\chacha20.odin:\n   64  }\n   65  \n   66: // xor_bytes XORs each byte in src with bytes taken from the (X)ChaCha20\n   67: // keystream, and writes the resulting output to dst.  Dst and src MUST\n   68  // alias exactly or not at all.\n   69: xor_bytes :: proc(ctx: ^Context, dst, src: []byte) {\n   70  \tassert(ctx._state._is_initialized)\n   71  \n   72: \tsrc, dst := src, dst\n   73: \tif dst_len := len(dst); dst_len < len(src) {\n   74: \t\tsrc = src[:dst_len]\n   75  \t}\n   76  \n   77: \tif bytes.alias_inexactly(dst, src) {\n   78: \t\tpanic(\"crypto/chacha20: dst and src alias inexactly\")\n   79  \t}\n   80  \n   81  \tst := &ctx._state\n   82: \t#no_bounds_check for remaining := len(src); remaining > 0; {\n   83  \t\t// Process multiple blocks at once\n   84  \t\tif st._off == _chacha20.BLOCK_SIZE {\n   85  \t\t\tif nr_blocks := remaining / _chacha20.BLOCK_SIZE; nr_blocks > 0 {\n   86  \t\t\t\tdirect_bytes := nr_blocks * _chacha20.BLOCK_SIZE\n   87: \t\t\t\tstream_blocks(ctx, dst, src, nr_blocks)\n   88  \t\t\t\tremaining -= direct_bytes\n   89  \t\t\t\tif remaining == 0 {\n   ..\n   91  \t\t\t\t}\n   92  \t\t\t\tdst = dst[direct_bytes:]\n   93: \t\t\t\tsrc = src[direct_bytes:]\n   94  \t\t\t}\n   95  \n   ..\n  104  \t\tbuffered_keystream := st._buffer[st._off:]\n  105  \t\tfor i := 0; i < to_xor; i = i + 1 {\n  106: \t\t\tdst[i] = buffered_keystream[i] ~ src[i]\n  107  \t\t}\n  108  \t\tst._off += to_xor\n  109  \t\tdst = dst[to_xor:]\n  110: \t\tsrc = src[to_xor:]\n  111  \t\tremaining -= to_xor\n  112  \t}\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\crypto\\chacha20\\chacha20_impl.odin:\n   33  \n   34  @(private)\n   35: stream_blocks :: proc(ctx: ^Context, dst, src: []byte, nr_blocks: int) {\n   36  \tswitch ctx._impl {\n   37  \tcase .Simd256:\n   38: \t\tsimd256.stream_blocks(&ctx._state, dst, src, nr_blocks)\n   39  \tcase .Simd128:\n   40: \t\tsimd128.stream_blocks(&ctx._state, dst, src, nr_blocks)\n   41  \tcase .Portable:\n   42: \t\tref.stream_blocks(&ctx._state, dst, src, nr_blocks)\n   43  \t}\n   44  }\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\crypto\\chacha20poly1305\\chacha20poly1305.odin:\n   47  \t\t// for reasons that should be obvious.\n   48  \t\tif text_len := len(text); text_len > _P_MAX {\n   49: \t\t\tpanic(\"crypto/chacha20poly1305: oversized src data\")\n   50  \t\t}\n   51  \t}\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\crypto\\ed25519\\ed25519.odin:\n  183  \t}\n  184  \n  185: \tsrc := &priv_key._pub_key\n  186: \tcopy(pub_key._b[:], src._b[:])\n  187: \tgrp.ge_set(&pub_key._neg_A, &src._neg_A)\n  188: \tpub_key._is_valid = src._is_valid\n  189: \tpub_key._is_initialized = src._is_initialized\n  190  }\n  191  \n\nC:\\odin-windows-amd64-dev-2025-03\\core\\crypto\\hash\\low_level.odin:\n  284  \t\treflect.union_variant_typeid(other._impl),\n  285  \t)\n  286: \tswitch &src_impl in other._impl {\n  287  \tcase blake2b.Context:\n  288: \t\tblake2b.clone(&ctx._impl.(blake2b.Context), &src_impl)\n  289  \tcase blake2s.Context:\n  290: \t\tblake2s.clone(&ctx._impl.(blake2s.Context), &src_impl)\n  291  \tcase sha2.Context_256:\n  292: \t\tsha2.clone(&ctx._impl.(sha2.Context_256), &src_impl)\n  293  \tcase sha2.Context_512:\n  294: \t\tsha2.clone(&ctx._impl.(sha2.Context_512), &src_impl)\n  295  \tcase sha3.Context:\n  296: \t\tsha3.clone(&ctx._impl.(sha3.Context), &src_impl)\n  297  \tcase sm3.Context:\n  298: \t\tsm3.clone(&ctx._impl.(sm3.Context), &src_impl)\n  299  \tcase keccak.Context:\n  300: \t\tkeccak.clone(&ctx._impl.(keccak.Context), &src_impl)\n  301  \tcase md5.Context:\n  302: \t\tmd5.clone(&ctx._impl.(md5.Context), &src_impl)\n  303  \tcase sha1.Context:\n  304: \t\tsha1.clone(&ctx._impl.(sha1.Context), &src_impl)\n  305  \tcase:\n  306  \t\tpanic(\"crypto/hash: uninitialized algorithm\")\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\debug\\pe\\pe.odin:\n  211  \tEXCEPTION             = 5,  // A copy of .pdata section.\n  212  \tFIXUP                 = 6,  // Reserved.\n  213: \tOMAP_TO_SRC           = 7,  // The mapping from an RVA in image to an RVA in source image.\n  214: \tOMAP_FROM_SRC         = 8,  // The mapping from an RVA in source image to an RVA in image.\n  215  \tBORLAND               = 9,  // Reserved for Borland.\n  216  \tRESERVED10            = 10, // Reserved.\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\encoding\\entity\\entity.odin:\n   48  \tw:           int,\n   49  \n   50: \tsrc:         string,\n   51  \toffset:      int,\n   52  \tread_offset: int,\n   ..\n   89  \tdefer strings.builder_destroy(&builder)\n   90  \n   91: \tt := Tokenizer{src=input}\n   92  \tin_data := false\n   93  \n   ..\n  120  \t\t\t// If we're unboxing _and_ decoding CDATA, we'll have to check for the end tag.\n  121  \t\t\tif in_data {\n  122: \t\t\t\tif t.read_offset + len(CDATA_END) < len(t.src) {\n  123: \t\t\t\t\tif string(t.src[t.offset:][:len(CDATA_END)]) == CDATA_END {\n  124  \t\t\t\t\t\tin_data = false\n  125  \t\t\t\t\t\tt.read_offset += len(CDATA_END) - 1\n  ...\n  191  \tif t == nil { return .Tokenizer_Is_Nil }\n  192  \t#no_bounds_check {\n  193: \t\tif t.read_offset < len(t.src) {\n  194  \t\t\tt.offset = t.read_offset\n  195: \t\t\tt.r, t.w   = rune(t.src[t.read_offset]), 1\n  196  \t\t\tswitch {\n  197  \t\t\tcase t.r == 0:\n  198  \t\t\t\treturn .Illegal_NUL_Character\n  199  \t\t\tcase t.r >= utf8.RUNE_SELF:\n  200: \t\t\t\tt.r, t.w = utf8.decode_rune_in_string(t.src[t.read_offset:])\n  201  \t\t\t\tif t.r == utf8.RUNE_ERROR && t.w == 1 {\n  202  \t\t\t\t\treturn .Illegal_UTF_Encoding\n  ...\n  208  \t\t\treturn .None\n  209  \t\t} else {\n  210: \t\t\tt.offset = len(t.src)\n  211  \t\t\tt.r = -1\n  212  \t\t\treturn\n  ...\n  272  \t// Even if one is not, it doesn't matter. All characters we need to compare to extract are.\n  273  \n  274: \tlength := len(t.src)\n  275  \tfound  := false\n  276  \n  277  \t#no_bounds_check {\n  278  \t\tfor t.read_offset < length {\n  279: \t\t\tif t.src[t.read_offset] == ';' {\n  280  \t\t\t\tt.read_offset += 1\n  281  \t\t\t\tfound = true\n  ...\n  287  \n  288  \tif found {\n  289: \t\treturn string(t.src[t.offset + 1 : t.read_offset - 1]), .None\n  290  \t}\n  291: \treturn string(t.src[t.offset : t.read_offset]), .Invalid_Entity_Encoding\n  292  }\n  293  \n  ...\n  296  _handle_xml_special :: proc(t: ^Tokenizer, builder: ^strings.Builder, options: XML_Decode_Options) -> (in_data: bool, err: Error) {\n  297  \tassert(t != nil && t.r == '<')\n  298: \tif t.read_offset + len(CDATA_START) >= len(t.src) { return false, .None }\n  299  \n  300: \tif string(t.src[t.offset:][:len(CDATA_START)]) == CDATA_START {\n  301  \t\tt.read_offset += len(CDATA_START) - 1\n  302  \n  ...\n  314  \t\t\tif t.r < 0 { return true, .CDATA_Not_Terminated }\n  315  \n  316: \t\t\tif t.read_offset + len(CDATA_END) < len(t.src) {\n  317: \t\t\t\tif string(t.src[t.offset:][:len(CDATA_END)]) == CDATA_END {\n  318  \t\t\t\t\tt.read_offset += len(CDATA_END) - 1\n  319  \n  320: \t\t\t\t\tcdata := string(t.src[offset : t.read_offset])\n  321  \t\n  322  \t\t\t\t\tif .Unbox_CDATA in options {\n  ...\n  331  \t\t}\n  332  \n  333: \t} else if string(t.src[t.offset:][:len(COMMENT_START)]) == COMMENT_START {\n  334  \t\tt.read_offset += len(COMMENT_START)\n  335  \t\t// Comment is passed through by default.\n  ...\n  341  \t\t\tif t.r < 0 { return true, .Comment_Not_Terminated }\n  342  \n  343: \t\t\tif t.read_offset + len(COMMENT_END) < len(t.src) {\n  344: \t\t\t\tif string(t.src[t.offset:][:len(COMMENT_END)]) == COMMENT_END {\n  345  \t\t\t\t\tt.read_offset += len(COMMENT_END) - 1\n  346  \n  347  \t\t\t\t\tif .Comment_Strip not_in options {\n  348: \t\t\t\t\t\tcomment := string(t.src[offset : t.read_offset])\n  349  \t\t\t\t\t\twrite_string(builder, comment)\n  350  \t\t\t\t\t}\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\encoding\\hex\\hex.odin:\n    4  import \"core:strings\"\n    5  \n    6: encode :: proc(src: []byte, allocator := context.allocator, loc := #caller_location) -> []byte #no_bounds_check {\n    7: \tdst := make([]byte, len(src) * 2, allocator, loc)\n    8: \tfor i, j := 0, 0; i < len(src); i += 1 {\n    9: \t\tv := src[i]\n   10  \t\tdst[j]   = HEXTABLE[v>>4]\n   11  \t\tdst[j+1] = HEXTABLE[v&0x0f]\n   ..\n   16  }\n   17  \n   18: encode_into_writer :: proc(dst: io.Writer, src: []byte) -> io.Error {\n   19: \tfor v in src {\n   20  \t\tio.write(dst, {HEXTABLE[v>>4], HEXTABLE[v&0x0f]}) or_return\n   21  \t}\n   ..\n   23  }\n   24  \n   25: decode :: proc(src: []byte, allocator := context.allocator, loc := #caller_location) -> (dst: []byte, ok: bool) #no_bounds_check {\n   26: \tif len(src) % 2 == 1 {\n   27  \t\treturn\n   28  \t}\n   29  \n   30: \tdst = make([]byte, len(src) / 2, allocator, loc)\n   31: \tfor i, j := 0, 1; j < len(src); j += 2 {\n   32: \t\tp := src[j-1]\n   33: \t\tq := src[j]\n   34  \n   35  \t\ta := hex_digit(p) or_return\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\encoding\\ini\\ini.odin:\n   22  Iterator :: struct {\n   23  \tsection: string,\n   24: \t_src:    string,\n   25  \toptions: Options,\n   26  }\n   27  \n   28: iterator_from_string :: proc(src: string, options := DEFAULT_OPTIONS) -> Iterator {\n   29  \treturn {\n   30  \t\tsection = \"\",\n   31  \t\toptions = options,\n   32: \t\t_src = src,\n   33  \t}\n   34  }\n   ..\n   38  // They key and value may be quoted, which may require the use of `strconv.unquote_string`.\n   39  iterate :: proc(it: ^Iterator) -> (key, value: string, ok: bool) {\n   40: \tfor line_ in strings.split_lines_iterator(&it._src) {\n   41  \t\tline := strings.trim_space(line_)\n   42  \n   ..\n   81  Map :: distinct map[string]map[string]string\n   82  \n   83: load_map_from_string :: proc(src: string, allocator: runtime.Allocator, options := DEFAULT_OPTIONS) -> (m: Map, err: runtime.Allocator_Error) {\n   84  \tunquote :: proc(val: string) -> (string, runtime.Allocator_Error) {\n   85  \t\tif len(val) > 0 && (val[0] == '\"' || val[0] == '\\'') {\n   ..\n   98  \tcontext.allocator = allocator\n   99  \n  100: \tit := iterator_from_string(src, options)\n  101  \n  102  \tfor key, value in iterate(&it) {\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\encoding\\xml\\tokenizer.odin:\n   69  \t// Immutable data\n   70  \tpath: string,\n   71: \tsrc:  string,\n   72  \terr:  Error_Handler,\n   73  \n   ..\n   83  }\n   84  \n   85: init :: proc(t: ^Tokenizer, src: string, path: string, err: Error_Handler = default_error_handler) {\n   86: \tt.src = src\n   87  \tt.err = err\n   88  \tt.ch = ' '\n   ..\n   90  \tt.read_offset = 0\n   91  \tt.line_offset = 0\n   92: \tt.line_count = len(src) > 0 ? 1 : 0\n   93  \tt.error_count = 0\n   94  \tt.path = path\n   ..\n  133  \t\t\tAlready bounds-checked here.\n  134  \t\t*/\n  135: \t\tif t.read_offset < len(t.src) {\n  136  \t\t\tt.offset = t.read_offset\n  137  \t\t\tif t.ch == '\\n' {\n  ...\n  139  \t\t\t\tt.line_count += 1\n  140  \t\t\t}\n  141: \t\t\tr, w := rune(t.src[t.read_offset]), 1\n  142  \t\t\tswitch {\n  143  \t\t\tcase r == 0:\n  144  \t\t\t\terror(t, t.offset, \"illegal character NUL\")\n  145  \t\t\tcase r >= utf8.RUNE_SELF:\n  146: \t\t\t\tr, w = #force_inline utf8.decode_rune_in_string(t.src[t.read_offset:])\n  147  \t\t\t\tif r == utf8.RUNE_ERROR && w == 1 {\n  148  \t\t\t\t\terror(t, t.offset, \"illegal UTF-8 encoding\")\n  ...\n  154  \t\t\tt.ch = r\n  155  \t\t} else {\n  156: \t\t\tt.offset = len(t.src)\n  157  \t\t\tif t.ch == '\\n' {\n  158  \t\t\t\tt.line_offset = t.offset\n  ...\n  165  \n  166  peek_byte :: proc(t: ^Tokenizer, offset := 0) -> byte {\n  167: \tif t.read_offset+offset < len(t.src) {\n  168: \t\t#no_bounds_check return t.src[t.read_offset+offset]\n  169  \t}\n  170  \treturn 0\n  ...\n  226  \t\t}\n  227  \t}\n  228: \treturn string(t.src[offset : t.offset])\n  229  }\n  230  \n  ...\n  251  \t\t}\n  252  \n  253: \t\tif string(t.src[t.offset - 1:][:2]) == \"--\" {\n  254  \t\t\tif peek_byte(t) == '>' {\n  255  \t\t\t\tbreak\n  ...\n  264  \texpect(t, .Gt)\n  265  \n  266: \treturn string(t.src[offset : t.offset - 1]), .None\n  267  }\n  268  \n  269  // Skip CDATA\n  270  skip_cdata :: proc(t: ^Tokenizer) -> (err: Error) {\n  271: \tif t.read_offset + len(CDATA_START) >= len(t.src) {\n  272  \t\t// Can't be the start of a CDATA tag.\n  273  \t\treturn .None\n  274  \t}\n  275  \n  276: \tif string(t.src[t.offset:][:len(CDATA_START)]) == CDATA_START {\n  277  \t\tt.read_offset += len(CDATA_START)\n  278  \t\toffset := t.offset\n  ...\n  286  \n  287  \t\t\t// Scan until the end of a CDATA tag.\n  288: \t\t\tif t.read_offset + len(CDATA_END) < len(t.src) {\n  289: \t\t\t\tif string(t.src[t.offset:][:len(CDATA_END)]) == CDATA_END {\n  290  \t\t\t\t\tt.read_offset += len(CDATA_END)\n  291  \t\t\t\t\tbreak cdata_scan\n  ...\n  323  \t\tcase '\\n':\n  324  \t\t\tif !multiline {\n  325: \t\t\t\terror(t, offset, string(t.src[offset : t.offset]))\n  326  \t\t\t\terror(t, offset, \"[scan_string] Not terminated\\n\")\n  327  \t\t\t\terr = .Invalid_Tag_Value\n  ...\n  338  \n  339  \t// Strip trailing whitespace.\n  340: \tlit := string(t.src[offset : t.offset])\n  341  \n  342  \tend := len(lit)\n  ...\n  412  \n  413  \tif kind != .String && lit == \"\" {\n  414: \t\tlit = string(t.src[offset : t.offset])\n  415  \t}\n  416  \treturn Token{kind, lit, pos}\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\encoding\\xml\\xml_reader.odin:\n  588  \n  589  \t// \t-1 because the current offset is that of the closing tag, so the rest of the DOCTYPE tag ends just before it.\n  590: \tdoc.doctype.rest = string(t.src[offset : t.offset - 1])\n  591  \treturn .None\n  592  }\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\hash\\hash.odin:\n  177  }\n  178  \n  179: // See https://github.com/aappleby/smhasher/blob/master/src/MurmurHash2.cpp#L96\n  180  @(optimization_mode=\"favor_size\")\n  181  murmur64a :: proc \"contextless\" (data: []byte, seed := u64(0x9747b28c)) -> u64 {\n  ...\n  218  }\n  219  \n  220: // See https://github.com/aappleby/smhasher/blob/master/src/MurmurHash2.cpp#L140\n  221  @(optimization_mode=\"favor_size\")\n  222  murmur64b :: proc \"contextless\" (data: []byte, seed := u64(0x9747b28c)) -> u64 {\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\hash\\xxhash\\streaming.odin:\n  104  }\n  105  \n  106: XXH3_128_hash_from_canonical :: proc(src: ^XXH128_canonical) -> (hash: u128) {\n  107  \th := XXH128_hash_t{}\n  108  \n  109: \thigh := (^u64be)(&src.digest[0])^\n  110: \tlow  := (^u64be)(&src.digest[8])^\n  111  \n  112  \th.high = u64(high)\n  ...\n  135  }\n  136  \n  137: XXH3_copy_state :: proc(dest, src: ^XXH3_state) {\n  138: \tassert(dest != nil && src != nil)\n  139: \tmem_copy(dest, src, size_of(XXH3_state))\n  140  }\n  141  \n\nC:\\odin-windows-amd64-dev-2025-03\\core\\hash\\xxhash\\xxhash_32.odin:\n  208  }\n  209  \n  210: XXH32_copy_state :: proc(dest, src: ^XXH32_state) {\n  211: \tassert(dest != nil && src != nil)\n  212: \tmem_copy(dest, src, size_of(XXH32_state))\n  213  }\n  214  \n\nC:\\odin-windows-amd64-dev-2025-03\\core\\hash\\xxhash\\xxhash_64.odin:\n  174  }\n  175  \n  176: XXH64_copy_state :: proc(dest, src: ^XXH64_state) {\n  177: \tassert(dest != nil && src != nil)\n  178: \tmem_copy(dest, src, size_of(XXH64_state))\n  179  }\n  180  \n\nC:\\odin-windows-amd64-dev-2025-03\\core\\image\\png\\png.odin:\n  213  }\n  214  \n  215: copy_chunk :: proc(src: image.PNG_Chunk, allocator := context.allocator) -> (dest: image.PNG_Chunk, err: Error) {\n  216: \tif int(src.header.length) != len(src.data) {\n  217  \t\treturn {}, .Invalid_Chunk_Length\n  218  \t}\n  219  \n  220: \tdest.header = src.header\n  221: \tdest.crc    = src.crc\n  222  \tdest.data   = make([]u8, dest.header.length, allocator) or_return\n  223  \n  224: \tcopy(dest.data[:], src.data[:])\n  225  \treturn\n  226  }\n  227  \n  228: append_chunk :: proc(list: ^[dynamic]image.PNG_Chunk, src: image.PNG_Chunk, allocator := context.allocator) -> (err: Error) {\n  229: \tif int(src.header.length) != len(src.data) {\n  230  \t\treturn .Invalid_Chunk_Length\n  231  \t}\n  232  \n  233: \tc := copy_chunk(src, allocator) or_return\n  234  \tlength := len(list)\n  235  \tappend(list, c)\n  ...\n 1202  \n 1203  Filter_Params :: struct #packed {\n 1204: \tsrc:      []u8,\n 1205  \tdest:     []u8,\n 1206  \twidth:    int,\n ....\n 1230  \t\tnk := row_stride - channels\n 1231  \n 1232: \t\tfilter := Row_Filter(src[0]); src = src[1:]\n 1233  \t\tswitch filter {\n 1234  \t\tcase .None:\n 1235: \t\t\tcopy(dest, src[:row_stride])\n 1236  \t\tcase .Sub:\n 1237  \t\t\tfor i := 0; i < channels; i += 1 {\n 1238: \t\t\t\tdest[i] = src[i]\n 1239  \t\t\t}\n 1240  \t\t\tfor k := 0; k < nk; k += 1 {\n 1241: \t\t\t\tdest[channels+k] = (src[channels+k] + dest[k]) & 255\n 1242  \t\t\t}\n 1243  \t\tcase .Up:\n 1244  \t\t\tfor k := 0; k < row_stride; k += 1 {\n 1245: \t\t\t\tdest[k] = (src[k] + up[k]) & 255\n 1246  \t\t\t}\n 1247  \t\tcase .Average:\n 1248  \t\t\tfor i := 0; i < channels; i += 1 {\n 1249  \t\t\t\tavg := up[i] >> 1\n 1250: \t\t\t\tdest[i] = (src[i] + avg) & 255\n 1251  \t\t\t}\n 1252  \t\t\tfor k := 0; k < nk; k += 1 {\n 1253  \t\t\t\tavg := u8((u16(up[channels+k]) + u16(dest[k])) >> 1)\n 1254: \t\t\t\tdest[channels+k] = (src[channels+k] + avg) & 255\n 1255  \t\t\t}\n 1256  \t\tcase .Paeth:\n 1257  \t\t\tfor i := 0; i < channels; i += 1 {\n 1258  \t\t\t\tpaeth := filter_paeth(0, up[i], 0)\n 1259: \t\t\t\tdest[i] = (src[i] + paeth) & 255\n 1260  \t\t\t}\n 1261  \t\t\tfor k := 0; k < nk; k += 1 {\n 1262  \t\t\t\tpaeth := filter_paeth(dest[k], up[channels+k], up[k])\n 1263: \t\t\t\tdest[channels+k] = (src[channels+k] + paeth) & 255\n 1264  \t\t\t}\n 1265  \t\tcase:\n ....\n 1267  \t\t}\n 1268  \n 1269: \t\tsrc     = src[row_stride:]\n 1270  \t\tup      = dest\n 1271  \t\tdest    = dest[row_stride:]\n ....\n 1299  \t\tdest = dest[row_offset:]\n 1300  \n 1301: \t\tfilter := Row_Filter(src[0]); src = src[1:]\n 1302  \t\tswitch filter {\n 1303  \t\tcase .None:\n 1304: \t\t\tcopy(dest, src[:row_stride_in])\n 1305  \t\tcase .Sub:\n 1306  \t\t\tfor i in 0..=channels {\n 1307: \t\t\t\tdest[i] = src[i]\n 1308  \t\t\t}\n 1309  \t\t\tfor k in 0..=nk {\n 1310: \t\t\t\tdest[channels+k] = (src[channels+k] + dest[k]) & 255\n 1311  \t\t\t}\n 1312  \t\tcase .Up:\n 1313  \t\t\tfor k in 0..=row_stride_in {\n 1314: \t\t\t\tdest[k] = (src[k] + up[k]) & 255\n 1315  \t\t\t}\n 1316  \t\tcase .Average:\n 1317  \t\t\tfor i in 0..=channels {\n 1318  \t\t\t\tavg := up[i] >> 1\n 1319: \t\t\t\tdest[i] = (src[i] + avg) & 255\n 1320  \t\t\t}\n 1321  \t\t\tfor k in 0..=nk {\n 1322  \t\t\t\tavg := u8((u16(up[channels+k]) + u16(dest[k])) >> 1)\n 1323: \t\t\t\tdest[channels+k] = (src[channels+k] + avg) & 255\n 1324  \t\t\t}\n 1325  \t\tcase .Paeth:\n 1326  \t\t\tfor i in 0..=channels {\n 1327  \t\t\t\tpaeth := filter_paeth(0, up[i], 0)\n 1328: \t\t\t\tdest[i] = (src[i] + paeth) & 255\n 1329  \t\t\t}\n 1330  \t\t\tfor k in 0..=nk {\n 1331  \t\t\t\tpaeth := filter_paeth(dest[k], up[channels+k], up[k])\n 1332: \t\t\t\tdest[channels+k] = (src[channels+k] + paeth) & 255\n 1333  \t\t\t}\n 1334  \t\tcase:\n ....\n 1336  \t\t}\n 1337  \n 1338: \t\tsrc  = src[row_stride_in:]\n 1339  \t\tup   = dest\n 1340  \t\tdest = dest[row_stride_in:]\n ....\n 1355  \n 1356  \tfor j := 0; j < height; j += 1 {\n 1357: \t\tsrc = dest[row_offset:]\n 1358  \n 1359  \t\tswitch depth {\n ....\n 1361  \t\t\tk := row_stride_out\n 1362  \t\t\tfor ; k >= 2; k -= 2 {\n 1363: \t\t\t\tc := src[0]\n 1364  \t\t\t\tdest[0] = scale * (c >> 4)\n 1365  \t\t\t\tdest[1] = scale * (c & 15)\n 1366: \t\t\t\tdest = dest[2:]; src = src[1:]\n 1367  \t\t\t}\n 1368  \t\t\tif k > 0 {\n 1369: \t\t\t\tc := src[0]\n 1370  \t\t\t\tdest[0] = scale * (c >> 4)\n 1371  \t\t\t\tdest = dest[1:]\n ....\n 1374  \t\t\tk := row_stride_out\n 1375  \t\t\tfor ; k >= 4; k -= 4 {\n 1376: \t\t\t\tc := src[0]\n 1377  \t\t\t\tdest[0] = scale * ((c >> 6)    )\n 1378  \t\t\t\tdest[1] = scale * ((c >> 4) & 3)\n 1379  \t\t\t\tdest[2] = scale * ((c >> 2) & 3)\n 1380  \t\t\t\tdest[3] = scale * ((c     ) & 3)\n 1381: \t\t\t\tdest = dest[4:]; src = src[1:]\n 1382  \t\t\t}\n 1383  \t\t\tif k > 0 {\n 1384: \t\t\t\tc := src[0]\n 1385  \t\t\t\tdest[0] = scale * ((c >> 6)    )\n 1386  \t\t\t\tif k > 1 {\n ....\n 1395  \t\t\tk := row_stride_out\n 1396  \t\t\tfor ; k >= 8; k -= 8 {\n 1397: \t\t\t\tc := src[0]\n 1398  \t\t\t\tdest[0] = scale * ((c >> 7)    )\n 1399  \t\t\t\tdest[1] = scale * ((c >> 6) & 1)\n ....\n 1404  \t\t\t\tdest[6] = scale * ((c >> 1) & 1)\n 1405  \t\t\t\tdest[7] = scale * ((c     ) & 1)\n 1406: \t\t\t\tdest = dest[8:]; src = src[1:]\n 1407  \t\t\t}\n 1408  \t\t\tif k > 0 {\n 1409: \t\t\t\tc := src[0]\n 1410  \t\t\t\tdest[0] = scale * ((c >> 7)    )\n 1411  \t\t\t\tif k > 1 {\n ....\n 1453  \t\tnk := row_stride - stride\n 1454  \n 1455: \t\tfilter := Row_Filter(src[0]); src = src[1:]\n 1456  \t\tswitch filter {\n 1457  \t\tcase .None:\n 1458: \t\t\tcopy(dest, src[:row_stride])\n 1459  \t\tcase .Sub:\n 1460  \t\t\tfor i := 0; i < stride; i += 1 {\n 1461: \t\t\t\tdest[i] = src[i]\n 1462  \t\t\t}\n 1463  \t\t\tfor k := 0; k < nk; k += 1 {\n 1464: \t\t\t\tdest[stride+k] = (src[stride+k] + dest[k]) & 255\n 1465  \t\t\t}\n 1466  \t\tcase .Up:\n 1467  \t\t\tfor k := 0; k < row_stride; k += 1 {\n 1468: \t\t\t\tdest[k] = (src[k] + up[k]) & 255\n 1469  \t\t\t}\n 1470  \t\tcase .Average:\n 1471  \t\t\tfor i := 0; i < stride; i += 1 {\n 1472  \t\t\t\tavg := up[i] >> 1\n 1473: \t\t\t\tdest[i] = (src[i] + avg) & 255\n 1474  \t\t\t}\n 1475  \t\t\tfor k := 0; k < nk; k += 1 {\n 1476  \t\t\t\tavg := u8((u16(up[stride+k]) + u16(dest[k])) >> 1)\n 1477: \t\t\t\tdest[stride+k] = (src[stride+k] + avg) & 255\n 1478  \t\t\t}\n 1479  \t\tcase .Paeth:\n 1480  \t\t\tfor i := 0; i < stride; i += 1 {\n 1481  \t\t\t\tpaeth := filter_paeth(0, up[i], 0)\n 1482: \t\t\t\tdest[i] = (src[i] + paeth) & 255\n 1483  \t\t\t}\n 1484  \t\t\tfor k := 0; k < nk; k += 1 {\n 1485  \t\t\t\tpaeth := filter_paeth(dest[k], up[stride+k], up[k])\n 1486: \t\t\t\tdest[stride+k] = (src[stride+k] + paeth) & 255\n 1487  \t\t\t}\n 1488  \t\tcase:\n ....\n 1490  \t\t}\n 1491  \n 1492: \t\tsrc     = src[row_stride:]\n 1493  \t\tup      = dest\n 1494  \t\tdest    = dest[row_stride:]\n ....\n 1517  \tif header.interlace_method != .Adam7 {\n 1518  \t\tparams := Filter_Params{\n 1519: \t\t\tsrc      = input,\n 1520  \t\t\twidth    = width,\n 1521  \t\t\theight   = height,\n ....\n 1556  \n 1557  \t\t\t\tparams := Filter_Params{\n 1558: \t\t\t\t\tsrc      = input,\n 1559  \t\t\t\t\twidth    = x,\n 1560  \t\t\t\t\theight   = y,\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\image\\tga\\tga.odin:\n  142  \tcolor_mapped  := false\n  143  \tblack_white   := false\n  144: \tsrc_channels  := 0\n  145  \tdest_depth    := header.bits_per_pixel\n  146  \tdest_channels := 0\n  ...\n  183  \tswitch dest_depth {\n  184  \tcase 15: // B5G5R5\n  185: \t\tsrc_channels  = 2\n  186  \t\tdest_channels = 3\n  187  \t\tif color_mapped {\n  188: \t\t\tsrc_channels = 1\n  189  \t\t}\n  190  \tcase 16: // B5G5R5A1\n  191: \t\tsrc_channels  = 2\n  192  \t\tdest_channels = 3 // Alpha bit is dodgy in TGA, so we ignore it.\n  193  \t\tif color_mapped {\n  194: \t\t\tsrc_channels = 1\n  195  \t\t}\n  196  \tcase 24: // RGB8\n  197: \t\tsrc_channels  = 1 if (color_mapped || black_white) else 3\n  198  \t\tdest_channels = 3\n  199  \tcase 32: // RGBA8\n  200: \t\tsrc_channels  = 4 if !color_mapped else 1\n  201  \t\tdest_channels = 4\n  202  \n  ...\n  329  \t\t\t// Read pixel\n  330  \t\t\tif read_pixel {\n  331: \t\t\t\tsrc, src_err := compress.read_slice(ctx, src_channels)\n  332: \t\t\t\tif src_err != .None {\n  333  \t\t\t\t\treturn img, .Corrupt\n  334  \t\t\t\t}\n  335: \t\t\t\tswitch src_channels {\n  336  \t\t\t\tcase 1:\n  337  \t\t\t\t\t// Color-mapped or Black & White\n  338  \t\t\t\t\tif black_white {\n  339: \t\t\t\t\t\tpixel = {src[0], src[0], src[0], 255}\n  340  \t\t\t\t\t} else if header.color_map_depth == 24 {\n  341: \t\t\t\t\t\tpixel = color_map[src[0]].bgra\n  342  \t\t\t\t\t} else if header.color_map_depth == 16 {\n  343: \t\t\t\t\t\tlut := color_map[src[0]]\n  344  \t\t\t\t\t\tv := u16(lut.r) | u16(lut.g) << 8\n  345  \t\t\t\t\t\tb := u8( v        & 31) << 3\n  ...\n  350  \n  351  \t\t\t\tcase 2:\n  352: \t\t\t\t\tv := u16(src[0]) | u16(src[1]) << 8\n  353  \t\t\t\t\tb := u8( v        & 31) << 3\n  354  \t\t\t\t\tg := u8((v >>  5) & 31) << 3\n  ...\n  357  \n  358  \t\t\t\tcase 3:\n  359: \t\t\t\t\tpixel = {src[2], src[1], src[0], 255}\n  360  \t\t\t\tcase 4:\n  361: \t\t\t\t\tpixel = {src[2], src[1], src[0], src[3]}\n  362  \t\t\t\tcase:\n  363  \t\t\t\t\treturn img, .Corrupt\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\io\\io.odin:\n  379  }\n  380  \n  381: // copy copies from src to dst till either EOF is reached on src or an error occurs\n  382  // It returns the number of bytes copied and the first error that occurred whilst copying, if any.\n  383: copy :: proc(dst: Writer, src: Reader) -> (written: i64, err: Error) {\n  384: \treturn _copy_buffer(dst, src, nil)\n  385  }\n  386  \n  ...\n  388  // rather than allocating a temporary one on the stack through `intrinsics.alloca`\n  389  // If buf is `nil`, it is allocate through `intrinsics.alloca`; otherwise if it has zero length, it will panic\n  390: copy_buffer :: proc(dst: Writer, src: Reader, buf: []byte) -> (written: i64, err: Error) {\n  391  \tif buf != nil && len(buf) == 0 {\n  392  \t\tpanic(\"empty buffer in io.copy_buffer\")\n  393  \t}\n  394: \treturn _copy_buffer(dst, src, buf)\n  395  }\n  396  \n  397  \n  398  \n  399: // copy_n copies n bytes (or till an error) from src to dst.\n  400  // It returns the number of bytes copied and the first error that occurred whilst copying, if any.\n  401  // On return, written == n IFF err == nil\n  402: copy_n :: proc(dst: Writer, src: Reader, n: i64) -> (written: i64, err: Error) {\n  403: \tnsrc := limited_reader_init(&Limited_Reader{}, src, n)\n  404: \twritten, err = copy(dst, nsrc)\n  405  \tif written == n {\n  406  \t\treturn n, nil\n  407  \t}\n  408  \tif written < n && err == nil {\n  409: \t\t// src stopped early and must have been an EOF\n  410  \t\terr = .EOF\n  411  \t}\n  ...\n  415  \n  416  @(private)\n  417: _copy_buffer :: proc(dst: Writer, src: Reader, buf: []byte) -> (written: i64, err: Error) {\n  418: \tif dst.procedure == nil || src.procedure == nil {\n  419  \t\treturn 0, .Empty\n  420  \t}\n  ...\n  423  \t\tDEFAULT_SIZE :: 4 * 1024\n  424  \t\tsize := DEFAULT_SIZE\n  425: \t\tif src.procedure == _limited_reader_proc {\n  426: \t\t\tl := (^Limited_Reader)(src.data)\n  427  \t\t\tif i64(size) > l.n {\n  428  \t\t\t\tif l.n < 1 {\n  ...\n  437  \t}\n  438  \tfor {\n  439: \t\tnr, er := read(src, buf)\n  440  \t\tif nr > 0 {\n  441  \t\t\tnw, ew := write(dst, buf[0:nr])\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\math\\math.odin:\n  655  @(require_results)\n  656  round_f16 :: proc \"contextless\" (x: f16) -> f16 {\n  657: \t// origin: Go /src/math/floor.go\n  658  \t//\n  659  \t// Copyright (c) 2009 The Go Authors. All rights reserved.\n  ...\n  712  @(require_results)\n  713  round_f32 :: proc \"contextless\" (x: f32) -> f32 {\n  714: \t// origin: Go /src/math/floor.go\n  715  \t//\n  716  \t// Copyright (c) 2009 The Go Authors. All rights reserved.\n  ...\n  769  @(require_results)\n  770  round_f64 :: proc \"contextless\" (x: f64) -> f64 {\n  771: \t// origin: Go /src/math/floor.go\n  772  \t//\n  773  \t// Copyright (c) 2009 The Go Authors. All rights reserved.\n  ...\n 1622  \n 1623  @(require_results)\n 1624: cumsum :: proc \"contextless\" (dst, src: $T/[]$E) -> T\n 1625  \twhere intrinsics.type_is_numeric(E) {\n 1626: \tN := min(len(dst), len(src))\n 1627  \tif N > 0 {\n 1628: \t\tdst[0] = src[0]\n 1629  \t\tfor i in 1..<N {\n 1630: \t\t\tdst[i] = dst[i-1] + src[i]\n 1631  \t\t}\n 1632  \t}\n ....\n 1801  @(require_results)\n 1802  asin_f64 :: proc \"contextless\" (x: f64) -> f64 {\n 1803: \t/* origin: FreeBSD /usr/src/lib/msun/src/e_asin.c */\n 1804  \t/*\n 1805  \t * ====================================================\n ....\n 1914  @(require_results)\n 1915  acos_f64 :: proc \"contextless\" (x: f64) -> f64 {\n 1916: \t/* origin: FreeBSD /usr/src/lib/msun/src/e_acos.c */\n 1917  \t/*\n 1918  \t * ====================================================\n ....\n 2075  asinh :: proc \"contextless\" (y: $T) -> T where intrinsics.type_is_float(T) {\n 2076  \t// The original C code, the long comment, and the constants\n 2077: \t// below are from FreeBSD's /usr/src/lib/msun/src/s_asinh.c\n 2078  \t// and came with this notice. \n 2079  \t//\n ....\n 2122  acosh :: proc \"contextless\" (y: $T) -> T where intrinsics.type_is_float(T) {\n 2123  \t// The original C code, the long comment, and the constants\n 2124: \t// below are from FreeBSD's /usr/src/lib/msun/src/e_acosh.c\n 2125  \t// and came with this notice. \n 2126  \t//\n ....\n 2154  atanh :: proc \"contextless\" (y: $T) -> T where intrinsics.type_is_float(T) {\n 2155  \t// The original C code, the long comment, and the constants\n 2156: \t// below are from FreeBSD's /usr/src/lib/msun/src/e_atanh.c\n 2157  \t// and came with this notice. \n 2158  \t//\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\math\\math_basic.odin:\n  126  ln_f64 :: proc \"contextless\" (x: f64) -> f64 {\n  127  \t// The original C code, the long comment, and the constants\n  128: \t// below are from FreeBSD's /usr/src/lib/msun/src/e_log.c\n  129  \t// and came with this notice.\n  130  \t//\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\math\\math_erf.odin:\n    2  \n    3  // The original C code and the long comment below are\n    4: // from FreeBSD's /usr/src/lib/msun/src/s_erf.c and\n    5  // came with this notice. \n    6  //\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\math\\math_lgamma.odin:\n    2  \n    3  // The original C code and the long comment below are\n    4: // from FreeBSD's /usr/src/lib/msun/src/e_lgamma_r.c and\n    5  // came with this notice. \n    6  //\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\math\\math_log1p.odin:\n    2  \n    3  // The original C code, the long comment, and the constants\n    4: // below are from FreeBSD's /usr/src/lib/msun/src/s_log1p.c\n    5  // and came with this notice. The go code is a simplified\n    6  // version of the original C.\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\math\\big\\helpers.odin:\n   29  \tHelpers to set an `Int` to a specific value.\n   30  */\n   31: int_set_from_integer :: proc(dest: ^Int, src: $T, minimize := false, allocator := context.allocator) -> (err: Error)\n   32  \twhere intrinsics.type_is_integer(T) {\n   33  \tcontext.allocator = allocator\n   34: \tsrc := src\n   35  \n   36  \t/*\n   37: \t\tCheck that `src` is usable and `dest` isn't immutable.\n   38  \t*/\n   39  \tassert_if_nil(dest)\n   40  \t#force_inline internal_error_if_immutable(dest) or_return\n   41  \n   42: \treturn #force_inline internal_int_set_from_integer(dest, src, minimize)\n   43  }\n   44  \n   ..\n   61  \tCopy one `Int` to another.\n   62  */\n   63: int_copy :: proc(dest, src: ^Int, minimize := false, allocator := context.allocator) -> (err: Error) {\n   64  \t/*\n   65: \t\tIf dest == src, do nothing\n   66  \t*/\n   67: \tif (dest == src) { return nil }\n   68  \n   69  \t/*\n   70: \t\tCheck that `src` is usable and `dest` isn't immutable.\n   71  \t*/\n   72: \tassert_if_nil(dest, src)\n   73  \tcontext.allocator = allocator\n   74  \n   75: \t#force_inline internal_clear_if_uninitialized(src) or_return\n   76  \t#force_inline internal_error_if_immutable(dest)    or_return\n   77  \n   78: \treturn #force_inline internal_int_copy(dest, src, minimize)\n   79  }\n   80  copy :: proc { \n   ..\n   95  \n   96  /*\n   97: \tSet `dest` to |`src`|.\n   98  */\n   99: int_abs :: proc(dest, src: ^Int, allocator := context.allocator) -> (err: Error) {\n  100  \t/*\n  101: \t\tCheck that `src` is usable and `dest` isn't immutable.\n  102  \t*/\n  103: \tassert_if_nil(dest, src)\n  104  \tcontext.allocator = allocator\n  105  \n  106: \t#force_inline internal_clear_if_uninitialized(src) or_return\n  107  \t#force_inline internal_error_if_immutable(dest)    or_return\n  108  \n  109: \treturn #force_inline internal_int_abs(dest, src)\n  110  }\n  111  \n  ...\n  116  \n  117  /*\n  118: \tSet `dest` to `-src`.\n  119  */\n  120: int_neg :: proc(dest, src: ^Int, allocator := context.allocator) -> (err: Error) {\n  121  \t/*\n  122: \t\tCheck that `src` is usable and `dest` isn't immutable.\n  123  \t*/\n  124: \tassert_if_nil(dest, src)\n  125  \tcontext.allocator = allocator\n  126  \n  127: \t#force_inline internal_clear_if_uninitialized(src) or_return\n  128  \t#force_inline internal_error_if_immutable(dest)    or_return\n  129  \n  130: \treturn #force_inline internal_int_neg(dest, src)\n  131  }\n  132  neg :: proc { int_neg, rat_neg }\n  ...\n  444  init_multi :: proc { int_init_multi, }\n  445  \n  446: copy_digits :: proc(dest, src: ^Int, digits: int, offset := int(0), allocator := context.allocator) -> (err: Error) {\n  447  \tcontext.allocator = allocator\n  448  \n  449  \t/*\n  450: \t\tCheck that `src` is usable and `dest` isn't immutable.\n  451  \t*/\n  452: \tassert_if_nil(dest, src)\n  453: \t#force_inline internal_clear_if_uninitialized(src) or_return\n  454  \n  455: \treturn #force_inline internal_copy_digits(dest, src, digits, offset)\n  456  }\n  457  \n\nC:\\odin-windows-amd64-dev-2025-03\\core\\math\\big\\internal.odin:\n  467  \n  468  /*\n  469: \tdest = src  / 2\n  470: \tdest = src >> 1\n  471  \n  472: \tAssumes `dest` and `src` not to be `nil` and have been initialized.\n  473  \tWe make no allocations here.\n  474  */\n  475: internal_int_shr1 :: proc(dest, src: ^Int) -> (err: Error) {\n  476: \told_used  := dest.used; dest.used = src.used\n  477  \t/*\n  478  \t\tCarry\n  ...\n  484  \t\t\tGet the carry for the next iteration.\n  485  \t\t*/\n  486: \t\tsrc_digit := src.digit[x]\n  487: \t\tcarry     := src_digit & 1\n  488  \t\t/*\n  489  \t\t\tShift the current digit, add in carry and store.\n  490  \t\t*/\n  491: \t\tdest.digit[x] = (src_digit >> 1) | (fwd_carry << (_DIGIT_BITS - 1))\n  492  \t\t/*\n  493  \t\t\tForward carry to next iteration.\n  ...\n  504  \t\tAdjust dest.used based on leading zeroes.\n  505  \t*/\n  506: \tdest.sign = src.sign\n  507  \treturn internal_clamp(dest)\t\n  508  }\n  509  \n  510  /*\n  511: \tdest = src  * 2\n  512: \tdest = src << 1\n  513  */\n  514: internal_int_shl1 :: proc(dest, src: ^Int, allocator := context.allocator) -> (err: Error) {\n  515  \tcontext.allocator = allocator\n  516  \n  517: \tinternal_copy(dest, src) or_return\n  518  \t/*\n  519  \t\tGrow `dest` to accommodate the additional bits.\n  ...\n  564  \tMultiply by a DIGIT.\n  565  */\n  566: internal_int_mul_digit :: proc(dest, src: ^Int, multiplier: DIGIT, allocator := context.allocator) -> (err: Error) {\n  567  \tcontext.allocator = allocator\n  568: \tassert_if_nil(dest, src)\n  569  \n  570  \tif multiplier == 0 {\n  ...\n  572  \t}\n  573  \tif multiplier == 1 {\n  574: \t\treturn internal_copy(dest, src)\n  575  \t}\n  576  \n  ...\n  579  \t*/\n  580  \tif multiplier == 2 {\n  581: \t\treturn #force_inline internal_int_shl1(dest, src)\n  582  \t}\n  583  \tif #force_inline platform_int_is_power_of_two(int(multiplier)) {\n  584  \t\tix := internal_log(multiplier, 2) or_return\n  585: \t\treturn internal_shl(dest, src, ix)\n  586  \t}\n  587  \n  588  \t/*\n  589: \t\tEnsure `dest` is big enough to hold `src` * `multiplier`.\n  590  \t*/\n  591: \tgrow(dest, max(src.used + 1, _DEFAULT_DIGIT_COUNT)) or_return\n  592  \n  593  \t/*\n  ...\n  598  \t\tSet the sign.\n  599  \t*/\n  600: \tdest.sign = src.sign\n  601  \t/*\n  602  \t\tSet up carry.\n  ...\n  607  \t*/\n  608  \tix := 0\n  609: \t#no_bounds_check for ; ix < src.used; ix += 1 {\n  610  \t\t/*\n  611  \t\t\tCompute product and carry sum for this term\n  612  \t\t*/\n  613: \t\tproduct := carry + _WORD(src.digit[ix]) * _WORD(multiplier)\n  614  \t\t/*\n  615  \t\t\tMask off higher bits to get a single DIGIT.\n  ...\n  626  \t*/\n  627  \tdest.digit[ix] = DIGIT(carry)\n  628: \tdest.used = src.used + 1\n  629  \n  630  \t/*\n  ...\n  639  \tHigh level multiplication (handles sign).\n  640  */\n  641: internal_int_mul :: proc(dest, src, multiplier: ^Int, allocator := context.allocator) -> (err: Error) {\n  642  \tcontext.allocator = allocator\n  643  \t/*\n  644  \t\tEarly out for `multiplier` is zero; Set `dest` to zero.\n  645  \t*/\n  646: \tif multiplier.used == 0 || src.used == 0 { return internal_zero(dest) }\n  647  \n  648: \tneg := src.sign != multiplier.sign\n  649  \n  650: \tif src == multiplier {\n  651  \t\t/*\n  652  \t\t\tDo we need to square?\n  653  \t\t*/\n  654: \t\tif src.used >= SQR_TOOM_CUTOFF {\n  655  \t\t\t/*\n  656  \t\t\t\tUse Toom-Cook?\n  657  \t\t\t*/\n  658: \t\t\terr = #force_inline _private_int_sqr_toom(dest, src)\n  659: \t\t} else if src.used >= SQR_KARATSUBA_CUTOFF {\n  660  \t\t\t/*\n  661  \t\t\t\tKaratsuba?\n  662  \t\t\t*/\n  663: \t\t\terr = #force_inline _private_int_sqr_karatsuba(dest, src)\n  664: \t\t} else if ((src.used * 2) + 1) < _WARRAY && src.used < (_MAX_COMBA / 2) {\n  665  \t\t\t/*\n  666  \t\t\t\tFast comba?\n  667  \t\t\t*/\n  668: \t\t\terr = #force_inline _private_int_sqr_comba(dest, src)\n  669  \t\t} else {\n  670: \t\t\terr = #force_inline _private_int_sqr(dest, src)\n  671  \t\t}\n  672  \t} else {\n  ...\n  680  \t\t*/\n  681  \n  682: \t\tmin_used := min(src.used, multiplier.used)\n  683: \t\tmax_used := max(src.used, multiplier.used)\n  684: \t\tdigits   := src.used + multiplier.used + 1\n  685  \n  686  \t\tif min_used >= MUL_KARATSUBA_CUTOFF && (max_used / 2) >= MUL_KARATSUBA_CUTOFF && max_used >= (2 * min_used) {\n  ...\n  688  \t\t\t\tNot much effect was observed below a ratio of 1:2, but again: YMMV.\n  689  \t\t\t*/\n  690: \t\t\terr = _private_int_mul_balance(dest, src, multiplier)\n  691  \t\t} else if min_used >= MUL_TOOM_CUTOFF {\n  692  \t\t\t/*\n  ...\n  694  \t\t\t\tas reveaved in the long test.\n  695  \t\t\t*/\n  696: \t\t\terr = #force_inline _private_int_mul_toom(dest, src, multiplier)\n  697  \t\t} else if min_used >= MUL_KARATSUBA_CUTOFF {\n  698: \t\t\terr = #force_inline _private_int_mul_karatsuba(dest, src, multiplier)\n  699  \t\t} else if digits < _WARRAY && min_used <= _MAX_COMBA {\n  700  \t\t\t/*\n  ...\n  704  \t\t\t\t* digits won't affect carry propagation\n  705  \t\t\t*/\n  706: \t\t\terr = #force_inline _private_int_mul_comba(dest, src, multiplier, digits)\n  707  \t\t} else {\n  708: \t\t\terr = #force_inline _private_int_mul(dest, src, multiplier, digits)\n  709  \t\t}\n  710  \t}\n  ...\n  716  internal_mul :: proc { internal_int_mul, internal_int_mul_digit, internal_int_mul_integer }\n  717  \n  718: internal_sqr :: proc (dest, src: ^Int, allocator := context.allocator) -> (res: Error) {\n  719  \t/*\n  720  \t\tWe call `internal_mul` and not e.g. `_private_int_sqr` because the former\n  721  \t\twill dispatch to the optimal implementation depending on the source.\n  722  \t*/\n  723: \treturn #force_inline internal_mul(dest, src, src, allocator)\n  724  }\n  725  \n  ...\n 1625  /*\n 1626  \tThis function is less generic than `root_n`, simpler and faster.\n 1627: \tAssumes `dest` and `src` not to be `nil` and to have been initialized.\n 1628  */\n 1629: internal_int_sqrt :: proc(dest, src: ^Int, allocator := context.allocator) -> (err: Error) {\n 1630  \tcontext.allocator = allocator\n 1631  \n ....\n 1633  \t\tMust be positive.\n 1634  \t*/\n 1635: \tif #force_inline internal_is_negative(src)  { return .Invalid_Argument }\n 1636  \n 1637  \t/*\n 1638: \t\tEasy out. If src is zero, so is dest.\n 1639  \t*/\n 1640: \tif #force_inline internal_is_zero(src)      { return internal_zero(dest) }\n 1641  \n 1642  \t/*\n ....\n 1646  \tdefer internal_destroy(x, y, t1, t2)\n 1647  \n 1648: \tcount := #force_inline internal_count_bits(src)\n 1649  \n 1650  \ta, b := count >> 1, count & 1\n ....\n 1655  \t\t\ty = (x + n // x) // 2\n 1656  \t\t*/\n 1657: \t\tinternal_div(t1, src, x) or_return\n 1658  \t\tinternal_add(t2, t1, x)  or_return\n 1659  \t\tinternal_shr(y, t2, 1)   or_return\n ....\n 1674  /*\n 1675  \tFind the nth root of an Integer.\n 1676: \tResult found such that `(dest)**n <= src` and `(dest+1)**n > src`\n 1677  \n 1678  \tThis algorithm uses Newton's approximation `x[i+1] = x[i] - f(x[i])/f'(x[i])`,\n 1679  \twhich will find the root in `log(n)` time where each step involves a fair bit.\n 1680  \n 1681: \tAssumes `dest` and `src` not to be `nil` and have been initialized.\n 1682  */\n 1683: internal_int_root_n :: proc(dest, src: ^Int, n: int, allocator := context.allocator) -> (err: Error) {\n 1684  \tcontext.allocator = allocator\n 1685  \n ....\n 1687  \t\tFast path for n == 2\n 1688  \t*/\n 1689: \tif n == 2 { return #force_inline internal_sqrt(dest, src) }\n 1690  \n 1691  \tif n < 0 || n > int(_DIGIT_MAX) { return .Invalid_Argument }\n 1692  \n 1693: \tif n & 1 == 0 && #force_inline internal_is_negative(src) { return .Invalid_Argument }\n 1694  \n 1695  \t/*\n ....\n 1700  \n 1701  \t/*\n 1702: \t\tIf `src` is negative fudge the sign but keep track.\n 1703  \t*/\n 1704  \ta.sign  = .Zero_or_Positive\n 1705: \ta.used  = src.used\n 1706: \ta.digit = src.digit\n 1707  \n 1708  \t/*\n 1709  \t\tIf \"n\" is larger than INT_MAX it is also larger than\n 1710: \t\tlog_2(src) because the bit-length of the \"src\" is measured\n 1711  \t\twith an int and hence the root is always < 2 (two).\n 1712  \t*/\n ....\n 1718  \n 1719  \t/*\n 1720: \t\tCompute seed: 2^(log_2(src)/n + 2)\n 1721  \t*/\n 1722: \tilog2 := internal_count_bits(src)\n 1723  \n 1724  \t/*\n 1725: \t\t\"src\" is smaller than max(int), we can cast safely.\n 1726  \t*/\n 1727  \tif ilog2 < n {\n ....\n 1831  \t\tSet the sign of the result.\n 1832  \t*/\n 1833: \tdest.sign = src.sign\n 1834  \n 1835  \treturn err\n ....\n 1864  \tHelpers to set an `Int` to a specific value.\n 1865  */\n 1866: internal_int_set_from_integer :: proc(dest: ^Int, src: $T, minimize := false, allocator := context.allocator) -> (err: Error)\n 1867  \twhere intrinsics.type_is_integer(T) {\n 1868  \tcontext.allocator = allocator\n ....\n 1878  \n 1879  \tdest.used  = 0\n 1880: \tdest.sign = .Negative if src < 0 else .Zero_or_Positive\n 1881  \n 1882: \ttemp := src\n 1883  \n 1884: \tis_maximally_negative := src == min(T)\n 1885  \tif is_maximally_negative {\n 1886  \t\t/*\n ....\n 1906  internal_set :: proc { internal_int_set_from_integer, internal_int_copy, int_atoi }\n 1907  \n 1908: internal_copy_digits :: #force_inline proc(dest, src: ^Int, digits: int, offset := int(0)) -> (err: Error) {\n 1909  \t#force_inline internal_error_if_immutable(dest) or_return\n 1910  \n 1911  \t/*\n 1912: \t\tIf dest == src, do nothing\n 1913  \t*/\n 1914: \treturn #force_inline _private_copy_digits(dest, src, digits, offset)\n 1915  }\n 1916  \n ....\n 1918  \tCopy one `Int` to another.\n 1919  */\n 1920: internal_int_copy :: proc(dest, src: ^Int, minimize := false, allocator := context.allocator) -> (err: Error) {\n 1921  \tcontext.allocator = allocator\n 1922  \n 1923  \t/*\n 1924: \t\tIf dest == src, do nothing\n 1925  \t*/\n 1926: \tif (dest == src) { return nil }\n 1927  \n 1928  \tinternal_error_if_immutable(dest) or_return\n 1929  \n 1930  \t/*\n 1931: \t\tGrow `dest` to fit `src`.\n 1932  \t\tIf `dest` is not yet initialized, it will be using `allocator`.\n 1933  \t*/\n 1934: \tneeded := src.used if minimize else max(src.used, _DEFAULT_DIGIT_COUNT)\n 1935  \n 1936  \tinternal_grow(dest, needed, minimize) or_return\n ....\n 1939  \t\tCopy everything over and zero high digits.\n 1940  \t*/\n 1941: \tinternal_copy_digits(dest, src, src.used)\n 1942  \n 1943: \tdest.used  = src.used\n 1944: \tdest.sign  = src.sign\n 1945: \tdest.flags = src.flags &~ {.Immutable}\n 1946  \n 1947  \tinternal_zero_unused(dest)\n ....\n 1966  \n 1967  /*\n 1968: \tSet `dest` to |`src`|.\n 1969  */\n 1970: internal_int_abs :: proc(dest, src: ^Int, allocator := context.allocator) -> (err: Error) {\n 1971  \tcontext.allocator = allocator\n 1972  \n 1973  \t/*\n 1974: \t\tIf `dest == src`, just fix `dest`'s sign.\n 1975  \t*/\n 1976: \tif (dest == src) {\n 1977  \t\tdest.sign = .Zero_or_Positive\n 1978  \t\treturn nil\n ....\n 1980  \n 1981  \t/*\n 1982: \t\tCopy `src` to `dest`\n 1983  \t*/\n 1984: \tinternal_copy(dest, src) or_return\n 1985  \n 1986  \t/*\n ....\n 1997  \n 1998  /*\n 1999: \tSet `dest` to `-src`.\n 2000  */\n 2001: internal_int_neg :: proc(dest, src: ^Int, allocator := context.allocator) -> (err: Error) {\n 2002  \tcontext.allocator = allocator\n 2003  \n 2004  \t/*\n 2005: \t\tIf `dest == src`, just fix `dest`'s sign.\n 2006  \t*/\n 2007  \tsign := Sign.Negative\n 2008: \tif #force_inline internal_is_zero(src) || #force_inline internal_is_negative(src) {\n 2009  \t\tsign = .Zero_or_Positive\n 2010  \t}\n 2011: \tif dest == src {\n 2012  \t\tdest.sign = sign\n 2013  \t\treturn nil\n 2014  \t}\n 2015  \t/*\n 2016: \t\tCopy `src` to `dest`\n 2017  \t*/\n 2018: \tinternal_copy(dest, src) or_return\n 2019  \n 2020  \t/*\n ....\n 2593  \n 2594  /*\n 2595: \tdest = ~src\n 2596  */\n 2597: internal_int_complement :: proc(dest, src: ^Int, allocator := context.allocator) -> (err: Error) {\n 2598  \tcontext.allocator = allocator\n 2599  \n ....\n 2601  \t\tTemporarily fix sign.\n 2602  \t*/\n 2603: \told_sign := src.sign\n 2604  \n 2605: \tneg := #force_inline internal_is_zero(src) || #force_inline internal_is_positive(src)\n 2606  \n 2607: \tsrc.sign = .Negative if neg else .Zero_or_Positive\n 2608  \n 2609: \terr = #force_inline internal_sub(dest, src, 1)\n 2610  \t/*\n 2611  \t\tRestore sign.\n 2612  \t*/\n 2613: \tsrc.sign = old_sign\n 2614  \n 2615  \treturn err\n ....\n 2683  \tShift right by a certain bit count with sign extension.\n 2684  */\n 2685: internal_int_shr_signed :: proc(dest, src: ^Int, bits: int, allocator := context.allocator) -> (err: Error) {\n 2686  \tcontext.allocator = allocator\n 2687  \n 2688: \tif src.sign == .Zero_or_Positive {\n 2689: \t\treturn internal_shr(dest, src, bits)\n 2690  \t}\n 2691: \tinternal_int_add_digit(dest, src, DIGIT(1)) or_return\n 2692  \tinternal_shr(dest, dest, bits) or_return\n 2693: \treturn internal_sub(dest, src, DIGIT(1))\n 2694  }\n 2695  \n ....\n 2699  \tShift left by a certain bit count.\n 2700  */\n 2701: internal_int_shl :: proc(dest, src: ^Int, bits: int, allocator := context.allocator) -> (err: Error) {\n 2702  \tcontext.allocator = allocator\n 2703  \n ....\n 2706  \tif bits < 0 { return .Invalid_Argument }\n 2707  \n 2708: \tinternal_copy(dest, src) or_return\n 2709  \n 2710  \t/*\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\math\\big\\logical.odin:\n   57  \n   58  /*\n   59: \tdest = ~src\n   60  */\n   61: int_bit_complement :: proc(dest, src: ^Int, allocator := context.allocator) -> (err: Error) {\n   62  \t/*\n   63: \t\tCheck that `src` and `dest` are usable.\n   64  \t*/\n   65: \tassert_if_nil(dest, src)\n   66  \tcontext.allocator = allocator\n   67  \n   68: \tinternal_clear_if_uninitialized(dest, src) or_return\n   69: \treturn #force_inline internal_int_complement(dest, src)\n   70  }\n   71  bit_complement :: proc { int_bit_complement, }\n   ..\n   92  \tShift right by a certain bit count with sign extension.\n   93  */\n   94: int_shr_signed :: proc(dest, src: ^Int, bits: int, allocator := context.allocator) -> (err: Error) {\n   95: \tassert_if_nil(dest, src)\n   96  \tcontext.allocator = allocator\n   97  \n   98: \tinternal_clear_if_uninitialized(dest, src) or_return\n   99: \treturn #force_inline internal_int_shr_signed(dest, src, bits)\n  100  }\n  101  \n  ...\n  105  \tShift left by a certain bit count.\n  106  */\n  107: int_shl :: proc(dest, src: ^Int, bits: int, allocator := context.allocator) -> (err: Error) {\n  108: \tassert_if_nil(dest, src)\n  109  \tcontext.allocator = allocator\n  110  \n  111: \tinternal_clear_if_uninitialized(dest, src) or_return\n  112: \treturn #force_inline internal_int_shl(dest, src, bits)\n  113  }\n  114  shl :: proc { int_shl, }\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\math\\big\\private.odin:\n  619  /*\n  620  \tLow level squaring, b = a*a, HAC pp.596-597, Algorithm 14.16\n  621: \tAssumes `dest` and `src` to not be `nil`, and `src` to have been initialized.\n  622  */\n  623: _private_int_sqr :: proc(dest, src: ^Int, allocator := context.allocator) -> (err: Error) {\n  624  \tcontext.allocator = allocator\n  625: \tpa := src.used\n  626  \n  627  \tt := &Int{}; ix, iy: int\n  ...\n  637  \t\t\tFirst calculate the digit at 2*ix; calculate double precision result.\n  638  \t\t*/\n  639: \t\tr := _WORD(t.digit[ix+ix]) + (_WORD(src.digit[ix]) * _WORD(src.digit[ix]))\n  640  \n  641  \t\t/*\n  ...\n  652  \t\t\t\tFirst calculate the product.\n  653  \t\t\t*/\n  654: \t\t\tr = _WORD(src.digit[ix]) * _WORD(src.digit[iy])\n  655  \n  656  \t\t\t/* Now calculate the double precision result. Nóte we use\n  ...\n  692  \tYou double all those you add in the inner loop. After that loop you do the squares and add them in.\n  693  \n  694: \tAssumes `dest` and `src` not to be `nil` and `src` to have been initialized.\t\n  695  */\n  696: _private_int_sqr_comba :: proc(dest, src: ^Int, allocator := context.allocator) -> (err: Error) {\n  697  \tcontext.allocator = allocator\n  698  \n  ...\n  702  \t\tGrow the destination as required.\n  703  \t*/\n  704: \tpa := uint(src.used) + uint(src.used)\n  705  \tinternal_grow(dest, int(pa)) or_return\n  706  \n  ...\n  721  \t\t\tGet offsets into the two bignums.\n  722  \t\t*/\n  723: \t\tty := min(uint(src.used) - 1, ix)\n  724  \t\ttx := ix - ty\n  725  \n  ...\n  728  \t\t\tessentially while (tx++ < a->used && ty-- >= 0) { ... }\n  729  \t\t*/\n  730: \t\tiy := min(uint(src.used) - tx, ty + 1)\n  731  \n  732  \t\t/*\n  ...\n  741  \t\t*/\n  742  \t\t#no_bounds_check for iz := uint(0); iz < iy; iz += 1 {\n  743: \t\t\t_W += _WORD(src.digit[tx + iz]) * _WORD(src.digit[ty - iz])\n  744  \t\t}\n  745  \n  ...\n  753  \t\t*/\n  754  \t\tif ix & 1 == 0 {\n  755: \t\t\t_W += _WORD(src.digit[ix >> 1]) * _WORD(src.digit[ix >> 1])\n  756  \t\t}\n  757  \n  ...\n  771  \t*/\n  772  \told_used := dest.used\n  773: \tdest.used = src.used + src.used\n  774  \n  775  \t#no_bounds_check for ix = 0; ix < pa; ix += 1 {\n  ...\n  786  \n  787  /*\n  788: \tKaratsuba squaring, computes `dest` = `src` * `src` using three half-size squarings.\n  789   \n  790  \tSee comments of `_private_int_mul_karatsuba` for details.\n  791  \tIt is essentially the same algorithm but merely tuned to perform recursive squarings.\n  792  */\n  793: _private_int_sqr_karatsuba :: proc(dest, src: ^Int, allocator := context.allocator) -> (err: Error) {\n  794  \tcontext.allocator = allocator\n  795  \n  ...\n  800  \t\tMin # of digits, divided by two.\n  801  \t*/\n  802: \tB := src.used >> 1\n  803  \n  804  \t/*\n  ...\n  806  \t*/\n  807  \tinternal_grow(x0,   B) or_return\n  808: \tinternal_grow(x1,   src.used - B) or_return\n  809: \tinternal_grow(t1,   src.used * 2) or_return\n  810: \tinternal_grow(t2,   src.used * 2) or_return\n  811  \tinternal_grow(x0x0, B * 2       ) or_return\n  812: \tinternal_grow(x1x1, (src.used - B) * 2) or_return\n  813  \n  814  \t/*\n  ...\n  816  \t*/\n  817  \tx0.used = B\n  818: \tx1.used = src.used - B\n  819  \n  820: \t#force_inline internal_copy_digits(x0, src, x0.used)\n  821: \t#force_inline mem.copy_non_overlapping(&x1.digit[0], &src.digit[B], size_of(DIGIT) * x1.used)\n  822  \t#force_inline internal_clamp(x0)\n  823  \n  ...\n  857  \t  18th IEEE Symposium on Computer Arithmetic (ARITH'07). IEEE, 2007.\n  858  */\n  859: _private_int_sqr_toom :: proc(dest, src: ^Int, allocator := context.allocator) -> (err: Error) {\n  860  \tcontext.allocator = allocator\n  861  \n  ...\n  871  \t\tB\n  872  \t*/\n  873: \tB := src.used / 3\n  874  \n  875  \t/*\n  ...\n  878  \tinternal_grow(a0, B) or_return\n  879  \tinternal_grow(a1, B) or_return\n  880: \tinternal_grow(a2, src.used - (2 * B)) or_return\n  881  \n  882  \ta0.used = B\n  883  \ta1.used = B\n  884: \ta2.used = src.used - 2 * B\n  885  \n  886: \t#force_inline mem.copy_non_overlapping(&a0.digit[0], &src.digit[    0], size_of(DIGIT) * a0.used)\n  887: \t#force_inline mem.copy_non_overlapping(&a1.digit[0], &src.digit[    B], size_of(DIGIT) * a1.used)\n  888: \t#force_inline mem.copy_non_overlapping(&a2.digit[0], &src.digit[2 * B], size_of(DIGIT) * a2.used)\n  889  \n  890  \tinternal_clamp(a0)\n  ...\n 3131  \n 3132  /*\n 3133: \tCopies DIGITs from `src` to `dest`.\n 3134: \tAssumes `src` and `dest` to not be `nil` and have been initialized.\n 3135  */\n 3136: _private_copy_digits :: proc(dest, src: ^Int, digits: int, offset := int(0)) -> (err: Error) {\n 3137  \tdigits := digits\n 3138  \t/*\n 3139: \t\tIf dest == src, do nothing\n 3140  \t*/\n 3141: \tif dest == src {\n 3142  \t\treturn nil\n 3143  \t}\n 3144  \n 3145: \tdigits = min(digits, len(src.digit), len(dest.digit))\n 3146: \tmem.copy_non_overlapping(&dest.digit[0], &src.digit[offset], size_of(DIGIT) * digits)\n 3147  \treturn nil\n 3148  }\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\math\\big\\public.odin:\n   94  \n   95  /*\n   96: \tdest = src  / 2\n   97: \tdest = src >> 1\n   98  */\n   99: int_halve :: proc(dest, src: ^Int, allocator := context.allocator) -> (err: Error) {\n  100: \tassert_if_nil(dest, src)\n  101  \tcontext.allocator = allocator\n  102  \n  103: \tinternal_clear_if_uninitialized(dest, src) or_return\n  104  \t/*\n  105  \t\tGrow destination as required.\n  106  \t*/\n  107: \tif dest != src { grow(dest, src.used + 1) or_return }\n  108  \n  109: \treturn #force_inline internal_int_shr1(dest, src)\n  110  }\n  111  halve :: proc { int_halve, }\n  ...\n  113  \n  114  /*\n  115: \tdest = src  * 2\n  116: \tdest = src << 1\n  117  */\n  118: int_double :: proc(dest, src: ^Int, allocator := context.allocator) -> (err: Error) {\n  119: \tassert_if_nil(dest, src)\n  120  \tcontext.allocator = allocator\n  121  \n  122: \tinternal_clear_if_uninitialized(dest, src) or_return\n  123  \t/*\n  124  \t\tGrow destination as required.\n  125  \t*/\n  126: \tif dest != src { grow(dest, src.used + 1) or_return }\n  127  \n  128: \treturn #force_inline internal_int_shl1(dest, src)\n  129  }\n  130  double :: proc { int_double, }\n  ...\n  134  \tMultiply by a DIGIT.\n  135  */\n  136: int_mul_digit :: proc(dest, src: ^Int, multiplier: DIGIT, allocator := context.allocator) -> (err: Error) {\n  137: \tassert_if_nil(dest, src)\n  138  \tcontext.allocator = allocator\n  139  \n  140: \tinternal_clear_if_uninitialized(src, dest) or_return\n  141  \n  142: \treturn #force_inline internal_int_mul_digit(dest, src, multiplier)\n  143  }\n  144  \n  ...\n  146  \tHigh level multiplication (handles sign).\n  147  */\n  148: int_mul :: proc(dest, src, multiplier: ^Int, allocator := context.allocator) -> (err: Error) {\n  149: \tassert_if_nil(dest, src, multiplier)\n  150  \tcontext.allocator = allocator\n  151  \n  152: \tinternal_clear_if_uninitialized(dest, src, multiplier) or_return\n  153  \n  154: \treturn #force_inline internal_int_mul(dest, src, multiplier)\n  155  }\n  156  \n  ...\n  163  }\n  164  \n  165: int_sqr :: proc(dest, src: ^Int) -> (err: Error) { return mul(dest, src, src) }\n  166: rat_sqr :: proc(dest, src: ^Rat) -> (err: Error) { return mul(dest, src, src) }\n  167  sqr :: proc { int_sqr, rat_sqr }\n  168  \n  ...\n  438  \tThis function is less generic than `root_n`, simpler and faster.\n  439  */\n  440: int_sqrt :: proc(dest, src: ^Int, allocator := context.allocator) -> (err: Error) {\n  441: \tassert_if_nil(dest, src)\n  442  \tcontext.allocator = allocator\n  443  \n  444: \tinternal_clear_if_uninitialized(dest, src) or_return\n  445  \n  446: \treturn #force_inline internal_int_sqrt(dest, src)\n  447  }\n  448  sqrt :: proc { int_sqrt, }\n  ...\n  451  /*\n  452  \tFind the nth root of an Integer.\n  453: \tResult found such that `(dest)**n <= src` and `(dest+1)**n > src`\n  454  \n  455  \tThis algorithm uses Newton's approximation `x[i+1] = x[i] - f(x[i])/f'(x[i])`,\n  456  \twhich will find the root in `log(n)` time where each step involves a fair bit.\n  457  */\n  458: int_root_n :: proc(dest, src: ^Int, n: int, allocator := context.allocator) -> (err: Error) {\n  459  \tcontext.allocator = allocator\n  460  \n  ...\n  462  \t\tFast path for n == 2.\n  463  \t*/\n  464: \tif n == 2 { return sqrt(dest, src) }\n  465  \n  466: \tassert_if_nil(dest, src)\n  467  \t/*\n  468: \t\tInitialize dest + src if needed.\n  469  \t*/\n  470: \tinternal_clear_if_uninitialized(dest, src) or_return\n  471  \n  472: \treturn #force_inline internal_int_root_n(dest, src, n)\n  473  }\n  474  root_n :: proc { int_root_n, }\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\math\\big\\rat.odin:\n  124  }\n  125  \n  126: rat_copy :: proc(dst, src: ^Rat, minimize := false, allocator := context.allocator) -> (err: Error) {\n  127: \tif (dst == src) { return nil }\n  128  \t\n  129: \tassert_if_nil(dst, src)\n  130  \tcontext.allocator = allocator\n  131: \tint_copy(&dst.a, &src.a, minimize, allocator) or_return\n  132: \tint_copy(&dst.b, &src.b, minimize, allocator) or_return\n  133  \tinternal_rat_norm(dst) or_return\n  134  \treturn nil\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\mem\\mem.odin:\n  133  \n  134  This procedure copies `len` bytes of data, from the memory range pointed to by\n  135: the `src` pointer into the memory range pointed to by the `dst` pointer, and\n  136  returns the `dst` pointer.\n  137  */\n  138: copy :: proc \"contextless\" (dst, src: rawptr, len: int) -> rawptr {\n  139: \tintrinsics.mem_copy(dst, src, len)\n  140  \treturn dst\n  141  }\n  ...\n  145  \n  146  This procedure copies `len` bytes of data, from the memory range pointed to by\n  147: the `src` pointer into the memory range pointed to by the `dst` pointer, and\n  148  returns the `dst` pointer.\n  149  \n  150  This is a slightly more optimized version of the `copy` procedure that requires\n  151  that memory ranges specified by the parameters to this procedure are not\n  152: overlapping. If the memory ranges specified by `dst` and `src` pointers overlap,\n  153  the behavior of this function may be unpredictable.\n  154  */\n  155: copy_non_overlapping :: proc \"contextless\" (dst, src: rawptr, len: int) -> rawptr {\n  156: \tintrinsics.mem_copy_non_overlapping(dst, src, len)\n  157  \treturn dst\n  158  }\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\net\\dns.odin:\n  276  \t\t}\n  277  \n  278: \t\trecv_sz, src := recv_udp(conn, dns_response_buf[:]) or_continue\n  279  \t\tif recv_sz == 0 {\n  280  \t\t\tcontinue\n  281  \t\t}\n  282: \t\tif src != name_server {\n  283  \t\t\tcontinue\n  284  \t\t}\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\odin\\ast\\ast.odin:\n   68  \n   69  \tfullpath: string,\n   70: \tsrc:      string,\n   71  \n   72  \ttags: [dynamic]tokenizer.Token,\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\odin\\ast\\clone.odin:\n   97  \t\treturn nil\n   98  \t}\n   99: \tsrc: rawptr = node\n  100  \tif node.derived != nil {\n  101: \t\tsrc = (^rawptr)(&node.derived)^\n  102  \t}\n  103: \tmem.copy(res, src, size)\n  104  \tres_ptr_any: any\n  105  \tres_ptr_any.data = &res\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\odin\\parser\\file_tags.odin:\n   59  \t}\n   60  \n   61: \tnext_char :: proc(src: string, i: ^int) -> (ch: u8) {\n   62: \t\tif i^ < len(src) {\n   63: \t\t\tch = src[i^]\n   64  \t\t}\n   65  \t\ti^ += 1\n   66  \t\treturn\n   67  \t}\n   68: \tskip_whitespace :: proc(src: string, i: ^int) {\n   69  \t\tfor {\n   70: \t\t\tswitch next_char(src, i) {\n   71  \t\t\tcase ' ', '\\t':\n   72  \t\t\t\tcontinue\n   ..\n   77  \t\t}\n   78  \t}\n   79: \tscan_value :: proc(src: string, i: ^int) -> string {\n   80  \t\tstart := i^\n   81  \t\tfor {\n   82: \t\t\tswitch next_char(src, i) {\n   83  \t\t\tcase ' ', '\\t', '\\n', '\\r', 0, ',':\n   84  \t\t\t\ti^ -= 1\n   85: \t\t\t\treturn src[start:i^]\n   86  \t\t\tcase:\n   87  \t\t\t\tcontinue\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\odin\\parser\\parse_files.odin:\n   29  \n   30  \tfor match in matches {\n   31: \t\tsrc: []byte\n   32  \t\tfullpath, ok := filepath.abs(match)\n   33  \t\tif !ok {\n   ..\n   35  \t\t}\n   36  \n   37: \t\tsrc, ok = os.read_entire_file(fullpath)\n   38  \t\tif !ok {\n   39  \t\t\tdelete(fullpath)\n   40  \t\t\treturn\n   41  \t\t}\n   42: \t\tif strings.trim_space(string(src)) == \"\" {\n   43  \t\t\tdelete(fullpath)\n   44: \t\t\tdelete(src)\n   45  \t\t\tcontinue\n   46  \t\t}\n   ..\n   48  \t\tfile := ast.new(ast.File, NO_POS, NO_POS)\n   49  \t\tfile.pkg = pkg\n   50: \t\tfile.src = string(src)\n   51  \t\tfile.fullpath = fullpath\n   52  \t\tpkg.files[fullpath] = file\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\odin\\parser\\parser.odin:\n  151  \n  152  \tp.file = file\n  153: \ttokenizer.init(&p.tok, file.src, file.fullpath, p.err)\n  154  \tif p.tok.ch <= 0 {\n  155  \t\treturn true\n  ...\n  430  \n  431  end_of_line_pos :: proc(p: ^Parser, tok: tokenizer.Token) -> tokenizer.Pos {\n  432: \toffset := clamp(tok.pos.offset, 0, len(p.tok.src)-1)\n  433: \ts := p.tok.src[offset:]\n  434  \tpos := tok.pos\n  435  \tpos.column -= 1\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\odin\\tokenizer\\tokenizer.odin:\n   15  \t// Immutable data\n   16  \tpath: string,\n   17: \tsrc:  string,\n   18  \terr:  Error_Handler,\n   19  \n   ..\n   32  }\n   33  \n   34: init :: proc(t: ^Tokenizer, src: string, path: string, err: Error_Handler = default_error_handler) {\n   35: \tt.src = src\n   36  \tt.err = err\n   37  \tt.ch = ' '\n   ..\n   39  \tt.read_offset = 0\n   40  \tt.line_offset = 0\n   41: \tt.line_count = len(src) > 0 ? 1 : 0\n   42  \tt.insert_semicolon = false\n   43  \tt.error_count = 0\n   ..\n   78  \n   79  advance_rune :: proc(t: ^Tokenizer) {\n   80: \tif t.read_offset < len(t.src) {\n   81  \t\tt.offset = t.read_offset\n   82  \t\tif t.ch == '\\n' {\n   ..\n   84  \t\t\tt.line_count += 1\n   85  \t\t}\n   86: \t\tr, w := rune(t.src[t.read_offset]), 1\n   87  \t\tswitch {\n   88  \t\tcase r == 0:\n   89  \t\t\terror(t, t.offset, \"illegal character NUL\")\n   90  \t\tcase r >= utf8.RUNE_SELF:\n   91: \t\t\tr, w = utf8.decode_rune_in_string(t.src[t.read_offset:])\n   92  \t\t\tif r == utf8.RUNE_ERROR && w == 1 {\n   93  \t\t\t\terror(t, t.offset, \"illegal UTF-8 encoding\")\n   ..\n   99  \t\tt.ch = r\n  100  \t} else {\n  101: \t\tt.offset = len(t.src)\n  102  \t\tif t.ch == '\\n' {\n  103  \t\t\tt.line_offset = t.offset\n  ...\n  109  \n  110  peek_byte :: proc(t: ^Tokenizer, offset := 0) -> byte {\n  111: \tif t.read_offset+offset < len(t.src) {\n  112: \t\treturn t.src[t.read_offset+offset]\n  113  \t}\n  114  \treturn 0\n  ...\n  196  \t}\n  197  \n  198: \tlit := t.src[offset : t.offset]\n  199  \n  200  \t// NOTE(bill): Strip CR for line comments\n  ...\n  221  \t}\n  222  \n  223: \treturn string(t.src[offset : t.offset])\n  224  }\n  225  \n  ...\n  231  \t}\n  232  \n  233: \treturn string(t.src[offset : t.offset])\n  234  }\n  235  \n  ...\n  252  \t}\n  253  \n  254: \treturn string(t.src[offset : t.offset])\n  255  }\n  256  \n  ...\n  270  \t}\n  271  \n  272: \treturn string(t.src[offset : t.offset])\n  273  }\n  274  \n  ...\n  368  \t}\n  369  \n  370: \treturn string(t.src[offset : t.offset])\n  371  }\n  372  \n  ...\n  447  \t\t\t\t\terror(t, t.offset, \"illegal hexadecimal floating-point number\")\n  448  \t\t\t\t} else {\n  449: \t\t\t\t\tsub := t.src[prev+1 : t.offset]\n  450  \t\t\t\t\tdigit_count := 0\n  451  \t\t\t\t\tfor d in sub {\n  ...\n  468  \t\t\t\t\tseen_point = true\n  469  \t\t\t\t\tif scan_fraction(t, &kind) {\n  470: \t\t\t\t\t\treturn kind, string(t.src[offset : t.offset])\n  471  \t\t\t\t\t}\n  472  \t\t\t\t}\n  473  \t\t\t\tscan_exponent(t, &kind)\n  474: \t\t\t\treturn kind, string(t.src[offset : t.offset])\n  475  \t\t\t}\n  476  \t\t}\n  ...\n  480  \n  481  \tif scan_fraction(t, &kind) {\n  482: \t\treturn kind, string(t.src[offset : t.offset])\n  483  \t}\n  484  \n  485  \tscan_exponent(t, &kind)\n  486  \n  487: \treturn kind, string(t.src[offset : t.offset])\n  488  }\n  489  \n  ...\n  756  \n  757  \tif lit == \"\" {\n  758: \t\tlit = string(t.src[offset : t.offset])\n  759  \t}\n  760  \treturn Token{kind, lit, pos}\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\os\\errors.odin:\n  175  \t\t\t.EPERM           = \"Operation not permitted\",\n  176  \t\t\t.ENOENT          = \"No such file or directory\",\n  177: \t\t\t.ESRCH           = \"No such process\",\n  178  \t\t\t.EINTR           = \"Interrupted system call\",\n  179  \t\t\t.EIO             = \"Input/output error\",\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\os\\os_darwin.odin:\n   18  \tEPERM           = 1,      /* Operation not permitted */\n   19  \tENOENT          = 2,      /* No such file or directory */\n   20: \tESRCH           = 3,      /* No such process */\n   21  \tEINTR           = 4,      /* Interrupted system call */\n   22  \tEIO             = 5,      /* Input/output error */\n   ..\n  155  EPERM           :: _Platform_Error.EPERM\n  156  ENOENT          :: _Platform_Error.ENOENT\n  157: ESRCH           :: _Platform_Error.ESRCH\n  158  EINTR           :: _Platform_Error.EINTR\n  159  EIO             :: _Platform_Error.EIO\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\os\\os_freebsd.odin:\n   18  \tEPERM           = 1,\n   19  \tENOENT          = 2,\n   20: \tESRCH           = 3,\n   21  \tEINTR           = 4,\n   22  \tEIO             = 5,\n   ..\n  113  EPERM           :: Platform_Error.EPERM\n  114  ENOENT          :: Platform_Error.ENOENT\n  115: ESRCH           :: Platform_Error.ESRCH\n  116  EINTR           :: Platform_Error.EINTR\n  117  EIO             :: Platform_Error.EIO\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\os\\os_linux.odin:\n   32  EPERM           :: Platform_Error.EPERM\n   33  ENOENT          :: Platform_Error.ENOENT\n   34: ESRCH           :: Platform_Error.ESRCH\n   35  EINTR           :: Platform_Error.EINTR\n   36  EIO             :: Platform_Error.EIO\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\os\\os_netbsd.odin:\n   18  \tENOENT          = 2,          /* No such file or directory */\n   19  \tEINTR           = 4,          /* Interrupted system call */\n   20: \tESRCH           = 3,          /* No such process */\n   21  \tEIO             = 5,          /* Input/output error */\n   22  \tENXIO           = 6,          /* Device not configured */\n   ..\n  157  ENOENT          :: Platform_Error.ENOENT          /* No such file or directory */\n  158  EINTR           :: Platform_Error.EINTR           /* Interrupted system call */\n  159: ESRCH           :: Platform_Error.ESRCH           /* No such process */\n  160  EIO             :: Platform_Error.EIO             /* Input/output error */\n  161  ENXIO           :: Platform_Error.ENXIO           /* Device not configured */\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\os\\os_openbsd.odin:\n   17  \tEPERM           = 1,\n   18  \tENOENT          = 2,\n   19: \tESRCH           = 3,\n   20  \tEINTR           = 4,\n   21  \tEIO             = 5,\n   ..\n  115  EPERM           :: Platform_Error.EPERM\n  116  ENOENT          :: Platform_Error.ENOENT\n  117: ESRCH           :: Platform_Error.ESRCH\n  118  EINTR           :: Platform_Error.EINTR\n  119  EIO             :: Platform_Error.EIO\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\os\\os_windows.odin:\n  395  \n  396  \t\tbuf8_len := utf16.decode_to_utf8(buf8[:], buf16[:single_read_length])\n  397: \t\tsrc := buf8[:buf8_len]\n  398  \n  399  \t\tctrl_z := false\n  400: \t\tfor i := 0; i < len(src) && n < len(b); i += 1 {\n  401: \t\t\tx := src[i]\n  402  \t\t\tif x == 0x1a { // ctrl-z\n  403  \t\t\t\tctrl_z = true\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\os\\os2\\errors_linux.odin:\n   11  \t.EPERM           = \"Operation not permitted\",\n   12  \t.ENOENT          = \"No such file or directory\",\n   13: \t.ESRCH           = \"No such process\",\n   14  \t.EINTR           = \"Interrupted system call\",\n   15  \t.EIO             = \"Input/output error\",\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\os\\os2\\file.odin:\n  313  \n  314  \n  315: copy_file :: proc(dst_path, src_path: string) -> Error {\n  316: \tsrc := open(src_path) or_return\n  317: \tdefer close(src)\n  318  \n  319: \tinfo := fstat(src, file_allocator()) or_return\n  320  \tdefer file_info_delete(info, file_allocator())\n  321  \tif info.type == .Directory {\n  ...\n  326  \tdefer close(dst)\n  327  \n  328: \t_, err := io.copy(to_writer(dst), to_reader(src))\n  329  \treturn err\n  330  }\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\os\\os2\\file_wasi.odin:\n  301  \n  302  _rename :: proc(old_path, new_path: string) -> Error {\n  303: \tsrc_dir_fd, src_relative, src_ok := match_preopen(old_path)\n  304: \tif !src_ok {\n  305  \t\treturn .Invalid_Path\n  306  \t}\n  ...\n  311  \t}\n  312  \n  313: \treturn _get_platform_error(wasi.path_rename(src_dir_fd, src_relative, new_dir_fd, new_relative))\n  314  }\n  315  \n  316  _link :: proc(old_name, new_name: string) -> Error {\n  317: \tsrc_dir_fd, src_relative, src_ok := match_preopen(old_name)\n  318: \tif !src_ok {\n  319  \t\treturn .Invalid_Path\n  320  \t}\n  ...\n  325  \t}\n  326  \n  327: \treturn _get_platform_error(wasi.path_link(src_dir_fd, {.SYMLINK_FOLLOW}, src_relative, new_dir_fd, new_relative))\n  328  }\n  329  \n  330  _symlink :: proc(old_name, new_name: string) -> Error {\n  331: \tsrc_dir_fd, src_relative, src_ok := match_preopen(old_name)\n  332: \tif !src_ok {\n  333  \t\treturn .Invalid_Path\n  334  \t}\n  ...\n  339  \t}\n  340  \n  341: \tif src_dir_fd != new_dir_fd {\n  342  \t\treturn .Invalid_Path\n  343  \t}\n  344  \n  345: \treturn _get_platform_error(wasi.path_symlink(src_relative, src_dir_fd, new_relative))\n  346  }\n  347  \n\nC:\\odin-windows-amd64-dev-2025-03\\core\\os\\os2\\file_windows.odin:\n  340  \n  341  \t\t\tbuf8_len := utf16.decode_to_utf8(buf8[:], buf16[:single_read_length])\n  342: \t\t\tsrc := buf8[:buf8_len]\n  343  \n  344  \t\t\tctrl_z := false\n  345: \t\t\tfor i := 0; i < len(src) && n+i < len(b); i += 1 {\n  346: \t\t\t\tx := src[i]\n  347  \t\t\t\tif x == 0x1a { // ctrl-z\n  348  \t\t\t\t\tctrl_z = true\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\os\\os2\\process_posix_darwin.odin:\n  279  \thandle := uintptr(rusage.ri_proc_start_abstime)\n  280  \tif p.handle != handle {\n  281: \t\treturn posix.Errno.ESRCH\n  282  \t}\n  283  \n\nC:\\odin-windows-amd64-dev-2025-03\\core\\simd\\simd.odin:\n 1464  Example:\n 1465  \n 1466: \t// The following code loads two values from the `src` vector, the first and the\n 1467  \t// third value (selected by the mask). The masked-off values are given the value\n 1468  \t// of 127 (`0x7f`).\n 1469  \n 1470: \tsrc := [4] f32 {1, 2, 3, 4};\n 1471  \tmask := #simd [4]bool { true, false, true, false }\n 1472  \tvals := #simd [4]f32 { 0x7f, 0x7f, 0x7f, 0x7f }\n 1473: \tres := simd.masked_load(&src, vals, mask)\n 1474  \tfmt.println(res)\n 1475  \n\nC:\\odin-windows-amd64-dev-2025-03\\core\\strconv\\strconv.odin:\n 1777  \timport \"core:strconv\"\n 1778  \tunquote_char_example :: proc() {\n 1779: \t\tsrc:=\"\\'The\\' raven\"\n 1780: \t\tr, multiple_bytes, tail_string, success  := strconv.unquote_char(src,'\\'')\n 1781: \t\tfmt.println(\"Source:\", src)\n 1782  \t\tfmt.printf(\"r: <%v>, multiple_bytes:%v, tail_string:<%s>, success:%v\\n\",r, multiple_bytes, tail_string, success)\n 1783  \t}\n ....\n 1902  \timport \"core:strconv\"\n 1903  \tunquote_string_example :: proc() {\n 1904: \t\tsrc:=\"\\\"The raven Huginn is black.\\\"\"\n 1905: \t\ts, allocated, ok := strconv.unquote_string(src)\n 1906: \t\tfmt.println(src)\n 1907  \t\tfmt.printf(\"Unquoted: <%s>, alloc:%v, ok:%v\\n\\n\", s, allocated, ok)\n 1908  \n 1909: \t\tsrc=\"\\'The raven Huginn\\' is black.\"\n 1910: \t\ts, allocated, ok = strconv.unquote_string(src)\n 1911: \t\tfmt.println(src)\n 1912  \t\tfmt.printf(\"Unquoted: <%s>, alloc:%v, ok:%v\\n\\n\", s, allocated, ok)\n 1913  \n 1914: \t\tsrc=\"The raven \\'Huginn\\' is black.\"\n 1915: \t\ts, allocated, ok = strconv.unquote_string(src) // Will produce undesireable results\n 1916: \t\tfmt.println(src)\n 1917  \t\tfmt.printf(\"Unquoted: <%s>, alloc:%v, ok:%v\\n\", s, allocated, ok) \n 1918  \t}\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\sys\\darwin\\xnu_system_call_numbers.odin:\n  455  \tguarded_kqueue_np = 443,\n  456  \tchange_fdguard_np = 444,\n  457: \tusrctl = 445,\n  458  \tproc_rlimit_control = 446,\n  459  \tconnectx = 447,\n  ...\n  493  \tsendmsg_x = 481,\n  494  \tthread_selfusage = 482,\n  495: \tcsrctl = 483,\n  496  \tguarded_open_dprotected_np = 484,\n  497  \tguarded_write_np = 485,\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\sys\\darwin\\Foundation\\NSBlock.odin:\n   52  \treserved:       uint,\n   53  \tsize:           uint,\n   54: \tcopy_helper:    proc \"c\" (dst, src: rawptr),\n   55: \tdispose_helper: proc \"c\" (src: rawptr),\n   56  \tsignature:      cstring,\n   57  }\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\sys\\es\\api.odin:\n 1253  \tICON_TEXT_X_COPYING,\n 1254  \tICON_TEXT_X_COPYING_SYMBOLIC,\n 1255: \tICON_TEXT_X_CSRC,\n 1256  \tICON_TEXT_X_GENERIC_SYMBOLIC,\n 1257  \tICON_TEXT_X_GENERIC_TEMPLATE,\n ....\n 2792  CRTmemchr :: #force_inline proc \"c\" (_s_ :   rawptr, _c_ :   i32, n_ :   int   ) ->   rawptr{ addr := 0x1000 + 192 * size_of(int); fp := (rawptr(((^uintptr)(uintptr(addr)))^)); return ((proc \"c\" (  rawptr,   i32,   int   ) ->   rawptr) (fp))(_s_, _c_, n_); }\n 2793  CRTmemcmp :: #force_inline proc \"c\" (s1_ :   rawptr, s2_ :   rawptr, n_ :   int   ) ->   i32{ addr := 0x1000 + 193 * size_of(int); fp := (rawptr(((^uintptr)(uintptr(addr)))^)); return ((proc \"c\" (  rawptr,   rawptr,   int   ) ->   i32) (fp))(s1_, s2_, n_); }\n 2794: CRTmemcpy :: #force_inline proc \"c\" (dest_ :   rawptr, src_ :   rawptr, n_ :   int   ) ->   rawptr{ addr := 0x1000 + 194 * size_of(int); fp := (rawptr(((^uintptr)(uintptr(addr)))^)); return ((proc \"c\" (  rawptr,   rawptr,   int   ) ->   rawptr) (fp))(dest_, src_, n_); }\n 2795: CRTmemmove :: #force_inline proc \"c\" (dest_ :   rawptr, src_ :   rawptr, n_ :   int   ) ->   rawptr{ addr := 0x1000 + 195 * size_of(int); fp := (rawptr(((^uintptr)(uintptr(addr)))^)); return ((proc \"c\" (  rawptr,   rawptr,   int   ) ->   rawptr) (fp))(dest_, src_, n_); }\n 2796  CRTmemset :: #force_inline proc \"c\" (s_ :   rawptr, c_ :   i32, n_ :   int   ) ->   rawptr{ addr := 0x1000 + 196 * size_of(int); fp := (rawptr(((^uintptr)(uintptr(addr)))^)); return ((proc \"c\" (  rawptr,   i32,   int   ) ->   rawptr) (fp))(s_, c_, n_); }\n 2797  CRTpowf :: #force_inline proc \"c\" (x_ :   f32  , y_ :   f32  ) ->   f32  { addr := 0x1000 + 328 * size_of(int); fp := (rawptr(((^uintptr)(uintptr(addr)))^)); return ((proc \"c\" (  f32  ,   f32  ) ->   f32  ) (fp))(x_, y_); }\n ....\n 2803  CRTsqrt :: #force_inline proc \"c\" (x_ :   f64   ) ->   f64   { addr := 0x1000 + 202 * size_of(int); fp := (rawptr(((^uintptr)(uintptr(addr)))^)); return ((proc \"c\" (  f64   ) ->   f64   ) (fp))(x_); }\n 2804  CRTsqrtf :: #force_inline proc \"c\" (x_ :   f32  ) ->   f32  { addr := 0x1000 + 203 * size_of(int); fp := (rawptr(((^uintptr)(uintptr(addr)))^)); return ((proc \"c\" (  f32  ) ->   f32  ) (fp))(x_); }\n 2805: CRTstrcat :: #force_inline proc \"c\" (dest_ :   ^i8  , src_ :   ^i8  ) ->   ^i8  { addr := 0x1000 + 205 * size_of(int); fp := (rawptr(((^uintptr)(uintptr(addr)))^)); return ((proc \"c\" (  ^i8  ,   ^i8  ) ->   ^i8  ) (fp))(dest_, src_); }\n 2806  CRTstrchr :: #force_inline proc \"c\" (s_ :   ^i8  , c_ :   i32) ->   ^i8  { addr := 0x1000 + 206 * size_of(int); fp := (rawptr(((^uintptr)(uintptr(addr)))^)); return ((proc \"c\" (  ^i8  ,   i32) ->   ^i8  ) (fp))(s_, c_); }\n 2807  CRTstrcmp :: #force_inline proc \"c\" (s1_ :   ^i8  , s2_ :   ^i8  ) ->   i32{ addr := 0x1000 + 207 * size_of(int); fp := (rawptr(((^uintptr)(uintptr(addr)))^)); return ((proc \"c\" (  ^i8  ,   ^i8  ) ->   i32) (fp))(s1_, s2_); }\n 2808: CRTstrcpy :: #force_inline proc \"c\" (dest_ :   ^i8  , src_ :   ^i8  ) ->   ^i8  { addr := 0x1000 + 208 * size_of(int); fp := (rawptr(((^uintptr)(uintptr(addr)))^)); return ((proc \"c\" (  ^i8  ,   ^i8  ) ->   ^i8  ) (fp))(dest_, src_); }\n 2809  CRTstrdup :: #force_inline proc \"c\" (string_ :   ^i8  ) ->   ^i8  { addr := 0x1000 + 70 * size_of(int); fp := (rawptr(((^uintptr)(uintptr(addr)))^)); return ((proc \"c\" (  ^i8  ) ->   ^i8  ) (fp))(string_); }\n 2810  CRTstrerror :: #force_inline proc \"c\" (errnum_ :   i32) ->   ^i8  { addr := 0x1000 + 209 * size_of(int); fp := (rawptr(((^uintptr)(uintptr(addr)))^)); return ((proc \"c\" (  i32) ->   ^i8  ) (fp))(errnum_); }\n 2811  CRTstrlen :: #force_inline proc \"c\" (s_ :   ^i8  ) ->   int   { addr := 0x1000 + 210 * size_of(int); fp := (rawptr(((^uintptr)(uintptr(addr)))^)); return ((proc \"c\" (  ^i8  ) ->   int   ) (fp))(s_); }\n 2812  CRTstrncmp :: #force_inline proc \"c\" (s1_ :   ^i8  , s2_ :   ^i8  , n_ :   int   ) ->   i32{ addr := 0x1000 + 211 * size_of(int); fp := (rawptr(((^uintptr)(uintptr(addr)))^)); return ((proc \"c\" (  ^i8  ,   ^i8  ,   int   ) ->   i32) (fp))(s1_, s2_, n_); }\n 2813: CRTstrncpy :: #force_inline proc \"c\" (dest_ :   ^i8  , src_ :   ^i8  , n_ :   int   ) ->   ^i8  { addr := 0x1000 + 212 * size_of(int); fp := (rawptr(((^uintptr)(uintptr(addr)))^)); return ((proc \"c\" (  ^i8  ,   ^i8  ,   int   ) ->   ^i8  ) (fp))(dest_, src_, n_); }\n 2814  CRTstrnlen :: #force_inline proc \"c\" (s_ :   ^i8  , maxlen_ :   int   ) ->   int   { addr := 0x1000 + 213 * size_of(int); fp := (rawptr(((^uintptr)(uintptr(addr)))^)); return ((proc \"c\" (  ^i8  ,   int   ) ->   int   ) (fp))(s_, maxlen_); }\n 2815  CRTstrstr :: #force_inline proc \"c\" (haystack_ :   ^i8  , needle_ :   ^i8  ) ->   ^i8  { addr := 0x1000 + 214 * size_of(int); fp := (rawptr(((^uintptr)(uintptr(addr)))^)); return ((proc \"c\" (  ^i8  ,   ^i8  ) ->   ^i8  ) (fp))(haystack_, needle_); }\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\sys\\freebsd\\types.odin:\n   72  \tEPERM           = 1,\n   73  \tENOENT          = 2,\n   74: \tESRCH           = 3,\n   75  \tEINTR           = 4,\n   76  \tEIO             = 5,\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\sys\\haiku\\errno.odin:\n  150  \tENXIO                        = posix.ENXIO,\n  151  \tESPIPE                       = posix.ESPIPE,\n  152: \tESRCH                        = posix.ESRCH,\n  153  \tEDOM                         = posix.EDOM,\n  154  \tERANGE                       = posix.ERANGE,\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\sys\\linux\\bits.odin:\n   10  \tEPERM           = 1,\n   11  \tENOENT          = 2,\n   12: \tESRCH           = 3,\n   13  \tEINTR           = 4,\n   14  \tEIO             = 5,\n   ..\n  844  \tSTACK_USER      = 13,\n  845  \tWEIGHT          = 14,\n  846: \tDATA_SRC        = 15,\n  847  \tIDENTIFIER      = 16,\n  848  \tTRANSACTION     = 17,\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\sys\\llvm\\standard_c_library.odin:\n    7  \twhen size_of(int) == 4 {\n    8  \t\t@(link_name=\"llvm.memcpy.p0i8.p0i8.i32\")\n    9: \t\tmemcpy :: proc(dst, src: rawptr, len: int, is_volatile: bool = false) ---\n   10  \n   11  \t\t@(link_name=\"llvm.memcpy.inline.p0i8.p0i8.i32\")\n   12: \t\tmemcpy_inline :: proc(dst, src: rawptr, len: int, is_volatile: bool = false) ---\n   13  \n   14  \t\t@(link_name=\"llvm.memmove.p0i8.p0i8.i32\")\n   15: \t\tmemmove :: proc(dst, src: rawptr, len: int, is_volatile: bool = false) ---\n   16  \n   17  \t\t@(link_name=\"llvm.memset.p0i8.i32\")\n   ..\n   19  \t} else {\n   20  \t\t@(link_name=\"llvm.memcpy.p0i8.p0i8.i64\")\n   21: \t\tmemcpy :: proc(dst, src: rawptr, len: int, is_volatile: bool = false) ---\n   22  \n   23  \t\t@(link_name=\"llvm.memcpy.inline.p0i8.p0i8.i64\")\n   24: \t\tmemcpy_inline :: proc(dst, src: rawptr, len: int, is_volatile: bool = false) ---\n   25  \n   26  \t\t@(link_name=\"llvm.memmove.p0i8.p0i8.i64\")\n   27: \t\tmemmove :: proc(dst, src: rawptr, len: int, is_volatile: bool = false) ---\n   28  \n   29  \t\t@(link_name=\"llvm.memset.p0i8.i64\")\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\sys\\orca\\orca.odin:\n  232  \tThis function should not be called directly by user code, which should use the `OC_ASSERT` macro instead. The macro checks the assert condition and calls the function if it is false. It also takes care of filling in the source location parameters of the function.\n  233  \t*/\n  234: \tassert_fail :: proc(file: cstring, function: cstring, line: i32, src: cstring, fmt: cstring, #c_vararg args: ..any) -> ! ---\n  235  \t// Set the logging verbosity.\n  236  \tlog_set_level :: proc(level: log_level) ---\n  ...\n 1680  \timage_draw :: proc(image: image, rect: rect) ---\n 1681  \t// Draw a sub-region of an image.\n 1682: \timage_draw_region :: proc(image: image, srcRegion: rect, dstRegion: rect) ---\n 1683  }\n 1684  \n ....\n 2035  \tui_var_default_color_str8 :: proc(name: str8, _color: color) ---\n 2036  \tui_var_default_font_str8 :: proc(name: str8, font: font) ---\n 2037: \tui_var_default_str8 :: proc(name: str8, src: str8) ---\n 2038  \tui_var_default_i32 :: proc(name: cstring, i: i32) ---\n 2039  \tui_var_default_f32 :: proc(name: cstring, f: f32) ---\n ....\n 2041  \tui_var_default_color :: proc(name: cstring, _color: color) ---\n 2042  \tui_var_default_font :: proc(name: cstring, font: font) ---\n 2043: \tui_var_default :: proc(name: cstring, src: cstring) ---\n 2044  \tui_var_set_i32_str8 :: proc(name: str8, i: i32) ---\n 2045  \tui_var_set_f32_str8 :: proc(name: str8, f: f32) ---\n ....\n 2047  \tui_var_set_color_str8 :: proc(name: str8, _color: color) ---\n 2048  \tui_var_set_font_str8 :: proc(name: str8, font: font) ---\n 2049: \tui_var_set_str8 :: proc(name: str8, src: str8) ---\n 2050  \tui_var_set_i32 :: proc(name: cstring, i: i32) ---\n 2051  \tui_var_set_f32 :: proc(name: cstring, f: f32) ---\n ....\n 2053  \tui_var_set_color :: proc(name: cstring, _color: color) ---\n 2054  \tui_var_set_font :: proc(name: cstring, font: font) ---\n 2055: \tui_var_set :: proc(name: cstring, src: cstring) ---\n 2056  \tui_var_get_i32_str8 :: proc(name: str8) -> i32 ---\n 2057  \tui_var_get_f32_str8 :: proc(name: str8) -> f32 ---\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\sys\\posix\\arpa_inet.odin:\n   39  \tinet_ntop :: proc(\n   40  \t\taf:   AF,        // INET or INET6\n   41: \t\tsrc:  rawptr,    // either ^in_addr or ^in_addr6 \n   42  \t\tdst:  [^]byte,   // use `INET_ADDRSTRLEN` or `INET6_ADDRSTRLEN` for minimum lengths\n   43  \t\tsize: socklen_t,\n   ..\n   49  \tinet_pton :: proc(\n   50  \t\taf:   AF,        // INET or INET6\n   51: \t\tsrc:  cstring,\n   52  \t\tdst:  rawptr,    // either ^in_addr or ^in_addr6\n   53  \t\tsize: socklen_t, // size_of(dst^)\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\sys\\posix\\errno.odin:\n  101  \tEROFS           = EROFS,\n  102  \tESPIPE          = ESPIPE,\n  103: \tESRCH           = ESRCH,\n  104  \tESTALE          = ESTALE,\n  105  \tETIME           = ETIME,\n  ...\n  113  \tEPERM           :: 1\n  114  \tENOENT          :: 2\n  115: \tESRCH           :: 3\n  116  \tEINTR           :: 4\n  117  \tEIO             :: 5\n  ...\n  192  \tEPERM           :: 1\n  193  \tENOENT          :: 2\n  194: \tESRCH           :: 3\n  195  \tEINTR           :: 4\n  196  \tEIO             :: 5\n  ...\n  273  \tEPERM           :: 1\n  274  \tENOENT          :: 2\n  275: \tESRCH           :: 3\n  276  \tEINTR           :: 4\n  277  \tEIO             :: 5\n  ...\n  372  \tEPERM           :: 1\n  373  \tENOENT          :: 2\n  374: \tESRCH           :: 3\n  375  \tEINTR           :: 4\n  376  \tEIO             :: 5\n  ...\n  530  \tEROFS           :: 30\n  531  \tESPIPE          :: 29\n  532: \tESRCH           :: 3\n  533  \tESTALE          :: -1 // NOTE: not defined\n  534  \tETIME           :: 137\n  ...\n  583  \tENXIO           :: _POSIX_ERROR_FACTOR * (_POSIX_ERROR_BASE   + 11)\n  584  \tESPIPE          :: _POSIX_ERROR_FACTOR * (_POSIX_ERROR_BASE   + 12)\n  585: \tESRCH           :: _POSIX_ERROR_FACTOR * (_POSIX_ERROR_BASE   + 13)\n  586  \tEPROTOTYPE      :: _POSIX_ERROR_FACTOR * (_POSIX_ERROR_BASE   + 18)\n  587  \tEPROTONOSUPPORT :: _POSIX_ERROR_FACTOR * (_POSIX_ERROR_BASE   + 19)\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\sys\\posix\\unistd_libc.odin:\n   99  \n  100  \t/*\n  101: \tCopy nbyte bytes, from src, to dest, exchanging adjecent bytes.\n  102  \n  103  \t[[ More; https://pubs.opengroup.org/onlinepubs/9699919799/functions/swab.html ]]\n  104  \t*/\n  105  \t@(link_name=LSWAB)\n  106: \tswab :: proc(src: [^]byte, dest: [^]byte, nbytes: c.ssize_t) ---\n  107  \n  108  \t/*\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\sys\\valgrind\\memcheck.odin:\n  137  //     1 - success\n  138  //     2 - [previously indicated unaligned arrays;  these are now allowed]\n  139: //     3 - if any parts of zzsrc/zzvbits are not addressable.\n  140  // The metadata is not copied in cases 0, 2 or 3 so it should be\n  141  // impossible to segfault your system by using this call.\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\sys\\valgrind\\valgrind.odin:\n   32  \tStack_Change                   = 5379,\n   33  \tLoad_Pdb_Debug_Info            = 5633,\n   34: \tMap_Ip_To_Src_Loc              = 5889,\n   35  \tChange_Err_Disablement         = 6145,\n   36  \tVex_Init_For_Iri               = 6401,\n   ..\n  178  // The result will be dumped in there and is guaranteed to be zero terminated.\n  179  // If no info is found, the first byte is set to zero.\n  180: map_ip_to_src_loc :: proc \"c\" (addr: rawptr, buf64: ^[64]byte) -> uintptr {\n  181: \treturn client_request_expr(0, .Map_Ip_To_Src_Loc, uintptr(addr), uintptr(buf64), 0, 0, 0)\n  182  }\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\sys\\wasm\\README.md:\n    9  ```html\n   10  <!-- Copy `core:sys/wasm/js/odin.js` into your web server -->\n   11: <script type=\"text/javascript\" src=\"odin.js\"></script>\n   12  <script type=\"text/javascript\">\n   13  \todin.runWasm(pathToWasm, consolePreElement);\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\sys\\wasm\\js\\odin.js:\n  172  \t// Returned length might not be the same as `value.length` if non-ascii strings are given.\n  173  \tstoreString(addr, value) {\n  174: \t\tconst src = new TextEncoder().encode(value);\n  175: \t\tconst dst = new Uint8Array(this.memory.buffer, addr, src.length);\n  176: \t\tdst.set(src);\n  177: \t\treturn src.length;\n  178  \t}\n  179  };\n  ...\n  406  \t\t\t\tthis.ctx.blendFunc(sfactor, dfactor);\n  407  \t\t\t},\n  408: \t\t\tBlendFuncSeparate: (srcRGB, dstRGB, srcAlpha, dstAlpha) => {\n  409: \t\t\t\tthis.ctx.blendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha);\n  410  \t\t\t},\n  411  \n  ...\n  854  \t\t\t\tthis.ctx.copyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size);\n  855  \t\t\t},\n  856: \t\t\tGetBufferSubData: (target, srcByteOffset, dst_buffer_ptr, dst_buffer_len, dstOffset, length) => {\n  857  \t\t\t\tthis.assertWebGL2();\n  858: \t\t\t\tthis.ctx.getBufferSubData(target, srcByteOffset, this.mem.loadBytes(dst_buffer_ptr, dst_buffer_len), dstOffset, length);\n  859  \t\t\t},\n  860  \n  861  \t\t\t/* Framebuffer objects */\n  862: \t\t\tBlitFramebuffer: (srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) => {\n  863  \t\t\t\tthis.assertWebGL2();\n  864: \t\t\t\tthis.ctx.blitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);\n  865  \t\t\t},\n  866  \t\t\tFramebufferTextureLayer: (target, attachment, texture, level, layer) => {\n  ...\n  878  \t\t\t\tthis.ctx.invalidateSubFramebuffer(target, attachments, x, y, width, height);\n  879  \t\t\t},\n  880: \t\t\tReadBuffer: (src) => {\n  881  \t\t\t\tthis.assertWebGL2();\n  882: \t\t\t\tthis.ctx.readBuffer(src);\n  883  \t\t\t},\n  884  \n\nC:\\odin-windows-amd64-dev-2025-03\\core\\sys\\wasm\\wasi\\wasi_api.odin:\n  161  \tSPIPE = 70,\n  162  \t// No such process.\n  163: \tSRCH = 71,\n  164  \t// Reserved.\n  165  \tSTALE = 72,\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\sys\\windows\\comctl32.odin:\n  204  \tImageList_GetIcon :: proc(himl: HIMAGELIST, i: i32, flags: UINT) -> HICON ---\n  205  \tImageList_LoadImageW :: proc(hi: HINSTANCE, lpbmp: LPCWSTR, cx, cgrow: i32, crMask: COLORREF, uType, uFlags: UINT) -> HIMAGELIST ---\n  206: \tImageList_Copy :: proc(himlDst: HIMAGELIST, iDst: i32, himlSrc: HIMAGELIST, iSrc: i32, uFlags: UINT) -> BOOL ---\n  207  \tImageList_BeginDrag :: proc(himlTrack: HIMAGELIST, iTrack, dxHotspot, dyHotspot: i32) -> BOOL ---\n  208  \tImageList_EndDrag :: proc() ---\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\sys\\windows\\dbghelp.odin:\n  104  }\n  105  \n  106: // NOTE(jakubtomsu): From verrsrc.h\n  107  VS_FIXEDFILEINFO :: struct {\n  108  \tdwSignature:        DWORD, /* e.g. 0xfeef04bd */\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\sys\\windows\\gdi32.odin:\n   24  \tCreateDIBitmap :: proc(hdc: HDC, pbmih: ^BITMAPINFOHEADER, flInit: DWORD, pjBits: VOID, pbmi: ^BITMAPINFO, iUsage: UINT) -> HBITMAP ---\n   25  \tCreateDIBSection :: proc(hdc: HDC, pbmi: ^BITMAPINFO, usage: UINT, ppvBits: VOID, hSection: HANDLE, offset: DWORD) -> HBITMAP ---\n   26: \tStretchDIBits :: proc(hdc: HDC, xDest, yDest, DestWidth, DestHeight, xSrc, ySrc, SrcWidth, SrcHeight: INT, lpBits: VOID, lpbmi: ^BITMAPINFO, iUsage: UINT, rop: DWORD) -> INT ---\n   27: \tStretchBlt :: proc(hdcDest: HDC, xDest, yDest, wDest, hDest: INT, hdcSrc: HDC, xSrc, ySrc, wSrc, hSrc: INT, rop: DWORD) -> BOOL ---\n   28  \n   29  \tSetPixelFormat :: proc(hdc: HDC, format: INT, ppfd: ^PIXELFORMATDESCRIPTOR) -> BOOL ---\n   ..\n   55  \tGetObjectW :: proc(h: HANDLE, c: INT, pv: LPVOID) -> int ---\n   56  \tCreateCompatibleBitmap :: proc(hdc: HDC, cx, cy: INT) -> HBITMAP ---\n   57: \tBitBlt :: proc(hdc: HDC, x, y, cx, cy: INT, hdcSrc: HDC, x1, y1: INT, rop: DWORD) -> BOOL ---\n   58  \tGetDIBits :: proc(hdc: HDC, hbm: HBITMAP, start, cLines: UINT, lpvBits: LPVOID, lpbmi: ^BITMAPINFO, usage: UINT) -> INT ---\n   59  \tSetDIBits :: proc(hdc: HDC, hbm: HBITMAP, start: UINT, cLines: UINT, lpBits: VOID, lpbmi: ^BITMAPINFO, ColorUse: UINT) -> INT ---\n   ..\n   74  \tSetPixel :: proc(hdc: HDC, x: INT, y: INT, color: COLORREF) -> COLORREF ---\n   75  \n   76: \tGdiTransparentBlt :: proc(hdcDest: HDC, xoriginDest, yoriginDest, wDest, hDest: INT, hdcSrc: HDC, xoriginSrc, yoriginSrc, wSrc, hSrc: INT, crTransparent: UINT) -> BOOL ---\n   77  \tGdiGradientFill :: proc(hdc: HDC, pVertex: PTRIVERTEX, nVertex: ULONG, pMesh: PVOID, nCount: ULONG, ulMode: ULONG) -> BOOL ---\n   78: \tGdiAlphaBlend :: proc(hdcDest: HDC, xoriginDest, yoriginDest, wDest, hDest: INT, hdcSrc: HDC, xoriginSrc, yoriginSrc, wSrc, hSrc: INT, ftn: BLENDFUNCTION) -> BOOL ---\n   79  }\n   80  \n   ..\n  155  PICONINFOEXW :: ^ICONINFOEXW\n  156  \n  157: AC_SRC_OVER :: 0x00\n  158: AC_SRC_ALPHA :: 0x01\n  159  \n  160  TransparentBlt :: GdiTransparentBlt\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\sys\\windows\\kernel32.odin:\n  230  \tFormatMessageW :: proc(\n  231  \t\tflags: DWORD,\n  232: \t\tlpSrc: LPVOID,\n  233  \t\tmsgId: DWORD,\n  234  \t\tlangId: DWORD,\n  ...\n  273  \tGetEnvironmentStringsW :: proc() -> LPWCH ---\n  274  \tFreeEnvironmentStringsW :: proc(env_ptr: LPWCH) -> BOOL ---\n  275: \tExpandEnvironmentStringsW :: proc(lpSrc: LPCWSTR, lpDst: LPWSTR, nSize: DWORD) -> DWORD ---\n  276  \tGetModuleFileNameW :: proc(hModule: HMODULE, lpFilename: LPWSTR, nSize: DWORD) -> DWORD ---\n  277  \tCreateDirectoryW :: proc(\n  ...\n  484  \tGetProcAddress :: proc(h: HMODULE, c_str: LPCSTR) -> rawptr ---\n  485  \n  486: \tLoadResource :: proc(hModule: HMODULE, hResInfo: HRSRC) -> HGLOBAL ---\n  487  \tFreeResource :: proc(hResData: HGLOBAL) -> BOOL ---\n  488  \tLockResource :: proc(hResData: HGLOBAL) -> LPVOID ---\n  489: \tSizeofResource :: proc(hModule: HMODULE, hResInfo: HRSRC) -> DWORD ---\n  490: \tFindResourceW :: proc(hModule: HMODULE, lpName: LPCWSTR, lpType: LPCWSTR) -> HRSRC ---\n  491: \tFindResourceExW :: proc(hModule: HMODULE, lpType: LPCWSTR, lpName: LPCWSTR, wLanguage: LANGID) -> HRSRC ---\n  492  \tEnumResourceNamesW :: proc(hModule: HMODULE, lpType: LPCWSTR, lpEnumFunc: ENUMRESNAMEPROCW, lParam: LONG_PTR) -> BOOL ---\n  493  \tEnumResourceNamesExW :: proc(hModule: HMODULE, lpType: LPCWSTR, lpEnumFunc: ENUMRESNAMEPROCW, lParam: LONG_PTR, dwFlags: DWORD, LangId: LANGID) -> BOOL ---\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\sys\\windows\\ole32.odin:\n   65  \n   66  \tPropVariantClear :: proc(pvar: ^PROPVARIANT) -> HRESULT ---\n   67: \tPropVariantCopy :: proc(pvarDest: ^PROPVARIANT, pvarSrc: ^PROPVARIANT) -> HRESULT ---\n   68  \tFreePropVariantArray :: proc(cVariants: ULONG, rgvars: ^PROPVARIANT) -> HRESULT ---\n   69  }\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\sys\\windows\\types.odin:\n   42  HFONT :: distinct HANDLE\n   43  HRGN :: distinct HANDLE\n   44: HRSRC :: distinct HANDLE\n   45  HWINSTA :: distinct HANDLE\n   46  HACCEL :: distinct HANDLE\n   ..\n 2471  \n 2472  // Ternary raster operations\n 2473: SRCCOPY        : DWORD : 0x00CC0020 // dest = source\n 2474: SRCPAINT       : DWORD : 0x00EE0086 // dest = source OR dest\n 2475: SRCAND         : DWORD : 0x008800C6 // dest = source AND dest\n 2476: SRCINVERT      : DWORD : 0x00660046 // dest = source XOR dest\n 2477: SRCERASE       : DWORD : 0x00440328 // dest = source AND (NOT dest)\n 2478: NOTSRCCOPY     : DWORD : 0x00330008 // dest = (NOT source)\n 2479: NOTSRCERASE    : DWORD : 0x001100A6 // dest = (NOT src) AND (NOT dest)\n 2480  MERGECOPY      : DWORD : 0x00C000CA // dest = (source AND pattern\n 2481  MERGEPAINT     : DWORD : 0x00BB0226 // dest = (NOT source) OR dest\n ....\n 4184  SHCONTF_INCLUDEHIDDEN         :: 0x80\n 4185  SHCONTF_INIT_ON_FIRST_NEXT    :: 0x100\n 4186: SHCONTF_NETPRINTERSRCH        :: 0x200\n 4187  SHCONTF_SHAREABLE             :: 0x400\n 4188  SHCONTF_STORAGE               :: 0x800\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\sys\\windows\\user32.odin:\n  156  \tLoadAcceleratorsW :: proc(hInstance: HINSTANCE, lpTableName: LPCWSTR) -> HACCEL ---\n  157  \tTranslateAcceleratorW :: proc(hWnd: HWND, hAccTable: HACCEL, lpMsg: LPMSG) -> INT ---\n  158: \tCopyAcceleratorTableW :: proc(hAccelSrc: HACCEL, lpAccelDst: LPACCEL, cAccelEntries: INT) -> INT ---\n  159  \n  160  \tInsertMenuItemW :: proc(hmenu: HMENU, item: UINT, fByPosition: BOOL, lpmi: LPMENUITEMINFOW) -> BOOL ---\n  ...\n  281  \tOffsetRect :: proc(lprc1: ^RECT, dx, dy: INT) -> BOOL ---\n  282  \tInflateRect :: proc(lprc1: ^RECT, dx, dy: INT) -> BOOL ---\n  283: \tIntersectRect :: proc(lprcDst, lprcSrc1, lprcSrc2: ^RECT) -> BOOL ---\n  284: \tSubtractRect :: proc(lprcDst, lprcSrc1, lprcSrc2: ^RECT) -> BOOL ---\n  285: \tUnionRect :: proc(lprcDst, lprcSrc1, lprcSrc2: ^RECT) -> BOOL ---\n  286  \tIsRectEmpty :: proc(lprc: ^RECT) -> BOOL ---\n  287  \tSetRectEmpty :: proc(lprc: ^RECT) -> BOOL ---\n  288: \tCopyRect :: proc(lprcDst, lprcSrc: ^RECT) -> BOOL ---\n  289  \n  290  \tGetWindowInfo :: proc(hwnd: HWND, pwi: PWINDOWINFO) -> BOOL ---\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\sys\\windows\\wgl.odin:\n   73  \twglGetProcAddress         :: proc(c_str: cstring) -> rawptr ---\n   74  \twglDeleteContext          :: proc(HGLRC: HGLRC) -> BOOL ---\n   75: \twglCopyContext            :: proc(src, dst: HGLRC, mask: UINT) -> BOOL ---\n   76  \twglCreateLayerContext     :: proc(hdc: HDC, layer_plane: c.int) -> HGLRC ---\n   77  \twglDescribeLayerPlane     :: proc(hdc: HDC, pixel_format, layer_plane: c.int, bytes: UINT, pd: LPLAYERPLANEDESCRIPTOR) -> BOOL ---\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\sys\\windows\\wglext.odin:\n   11  wglDeleteBufferRegionARBType  :: #type proc \"c\" (hRegion: HANDLE)\n   12  wglSaveBufferRegionARBType    :: #type proc \"c\" (hRegion: HANDLE, x: c_int, y: c_int, width: c_int, height: c_int) -> BOOL\n   13: wglRestoreBufferRegionARBType :: #type proc \"c\" (hRegion: HANDLE, x: c_int, y: c_int, width: c_int, height: c_int, xSrc: c_int, ySrc: c_int) -> BOOL\n   14  \n   15  // wglCreateBufferRegionARB:  wglCreateBufferRegionARBType\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\sys\\windows\\winerror.odin:\n 4154  \tDS_EPOCH_MISMATCH = 0x2123,\n 4155  \t// Source and destination of a cross-domain move do not agree on the object's current name. Either source or destination does not have the latest version of the object.\n 4156: \tDS_SRC_NAME_MISMATCH = 0x2124,\n 4157  \t// Source and destination for the cross-domain move operation are identical. Caller should use local move operation instead of cross-domain move operation.\n 4158: \tDS_SRC_AND_DST_NC_IDENTICAL = 0x2125,\n 4159  \t// Source and destination for a cross-domain move are not in agreement on the naming contexts in the forest. Either source or destination does not have the latest version of the Partitions container.\n 4160  \tDS_DST_NC_MISMATCH = 0x2126,\n ....\n 4162  \tDS_NOT_AUTHORITIVE_FOR_DST_NC = 0x2127,\n 4163  \t// Source and destination of a cross-domain move do not agree on the identity of the source object. Either source or destination does not have the latest version of the source object.\n 4164: \tDS_SRC_GUID_MISMATCH = 0x2128,\n 4165  \t// Object being moved across-domains is already known to be deleted by the destination server. The source server does not have the latest version of the source object.\n 4166  \tDS_CANT_MOVE_DELETED_OBJECT = 0x2129,\n ....\n 4208  \tDS_CANT_CREATE_UNDER_SCHEMA = 0x213E,\n 4209  \t// The replica/child install failed to get the objectVersion attribute on the schema container on the source DC. Either the attribute is missing on the schema container or the credentials supplied do not have permission to read it.\n 4210: \tDS_INSTALL_NO_SRC_SCH_VERSION = 0x213F,\n 4211  \t// The replica/child install failed to read the objectVersion attribute in the SCHEMA section of the file schema.ini in the system32 directory.\n 4212  \tDS_INSTALL_NO_SCH_VERSION_IN_INIFILE = 0x2140,\n ....\n 4260  \tDS_DESTINATION_AUDITING_NOT_ENABLED = 0x2158,\n 4261  \t// The operation couldn't locate a DC for the source domain.\n 4262: \tDS_CANT_FIND_DC_FOR_SRC_DOMAIN = 0x2159,\n 4263  \t// The source object must be a group or user.\n 4264: \tDS_SRC_OBJ_NOT_GROUP_OR_USER = 0x215A,\n 4265  \t// The source object's SID already exists in destination forest.\n 4266: \tDS_SRC_SID_EXISTS_IN_FOREST = 0x215B,\n 4267  \t// The source and destination object must be of the same type.\n 4268: \tDS_SRC_AND_DST_OBJECT_CLASS_MISMATCH = 0x215C,\n 4269  \t// Security Accounts Manager initialization failed because of the following error: %1. Error Status: 0x%2. Click OK to shut down the system and reboot into Safe Mode. Check the event log for detailed information.\n 4270  \tSAM_INIT_FAILURE = 0x215D,\n ....\n 4304  \tDS_MUST_BE_RUN_ON_DST_DC = 0x216E,\n 4305  \t// For security reasons, the source DC must be NT4SP4 or greater.\n 4306: \tDS_SRC_DC_MUST_BE_SP4_OR_GREATER = 0x216F,\n 4307  \t// Critical Directory Service System objects cannot be deleted during tree delete operations. The tree delete may have been partially performed.\n 4308  \tDS_CANT_TREE_DELETE_CRITICAL_OBJ = 0x2170,\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\text\\match\\strlib.odin:\n   34  \n   35  Match_State :: struct {\n   36: \tsrc: string,\n   37  \tpattern: string,\n   38  \tlevel: int,\n   ..\n  242  \n  243  single_match :: proc(ms: ^Match_State, s, p, ep: int) -> (matched: bool, schar_size: int, err: Error) {\n  244: \tif s >= len(ms.src) {\n  245  \t\treturn\n  246  \t}\n  247  \n  248  \tpchar, psize := utf8_peek(ms.pattern[p:]) or_return\n  249: \tschar, ssize := utf8_peek(ms.src[s:]) or_return\n  250  \tschar_size = ssize\n  251  \n  ...\n  268  \n  269  \n  270: \tschar, ssize := utf8_peek(ms.src[s:]) or_return\n  271  \tpchar, psize := utf8_peek(ms.pattern[p:]) or_return\n  272  \n  273: \t// skip until the src and pattern match\n  274  \tif schar != pchar {\n  275  \t\treturn INVALID, .OK\n  ...\n  282  \tend, _ := utf8_peek(ms.pattern[p + psize:]) or_return\n  283  \n  284: \tfor s < len(ms.src) {\n  285: \t\tch := utf8_advance(ms.src, &s) or_return\n  286  \n  287  \t\tswitch ch{\n  ...\n  326  \t\t}\n  327  \n  328: \t\tm = utf8_prev(ms.src, s, m)\n  329  \t}\n  330  \n  ...\n  384  \tlength := ms.capture[index].len\n  385  \n  386: \tif len(ms.src) - s >= length {\n  387  \t\treturn s + length, .OK\n  388  \t}\n  ...\n  417  \t\t} \n  418  \n  419: \t\tif len(ms.src) != s {\n  420  \t\t\ts = INVALID\n  421  \t\t}\n  ...\n  451  \t\t\t// get previous\n  452  \t\t\tif s != 0 {\n  453: \t\t\t\ttemp := utf8_prev(ms.src, 0, s)\n  454: \t\t\t\tprevious, _ = utf8_peek(ms.src[temp:]) or_return\n  455  \t\t\t}\n  456  \n  457  \t\t\t// get current\n  458: \t\t\tif s != len(ms.src) {\n  459: \t\t\t\tcurrent, _ = utf8_peek(ms.src[s:]) or_return\n  460  \t\t\t}\n  461  \n  ...\n  648  \n  649  \tms := Match_State {\n  650: \t\tsrc = haystack,\n  651  \t\tpattern = pattern,\n  652  \t}\n  ...\n  673  \t\ts += 1\n  674  \n  675: \t\tif !(s < len(ms.src) && !anchor) {\n  676  \t\t\tbreak\n  677  \t\t}\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\text\\regex\\compiler\\debugging.odin:\n   37  \titer := virtual_machine.Opcode_Iterator{ code, 0 }\n   38  \tfor opcode, pc in virtual_machine.iterate_opcodes(&iter) {\n   39: \t\tif src, ok := jump_targets[pc]; ok {\n   40  \t\t\tio.write_string(w, \"--\")\n   41: \t\t\tcommon.write_padded_hex(w, src, 4)\n   42  \t\t\tio.write_string(w, \"--> \")\n   43  \t\t} else {\n\nC:\\odin-windows-amd64-dev-2025-03\\core\\text\\regex\\tokenizer\\tokenizer.odin:\n   54  Tokenizer :: struct {\n   55  \tflags: common.Flags,\n   56: \tsrc: string,\n   57  \n   58  \tch: rune,\n   ..\n   74  \n   75  init :: proc(t: ^Tokenizer, str: string, flags: common.Flags) {\n   76: \tt.src = str\n   77  \tt.flags = flags\n   78  \tt.error_state = advance_rune(t)\n   ..\n   80  \n   81  peek_byte :: proc(t: ^Tokenizer, offset := 0) -> byte {\n   82: \tif t.read_offset+offset < len(t.src) {\n   83: \t\treturn t.src[t.read_offset+offset]\n   84  \t}\n   85  \treturn 0\n   ..\n   91  \t}\n   92  \n   93: \tif t.read_offset < len(t.src) {\n   94  \t\tt.offset = t.read_offset\n   95: \t\tr, w := rune(t.src[t.read_offset]), 1\n   96  \t\tswitch {\n   97  \t\tcase r == 0:\n   98  \t\t\terr = .Illegal_Null_Character\n   99  \t\tcase r >= utf8.RUNE_SELF:\n  100: \t\t\tr, w = utf8.decode_rune(t.src[t.read_offset:])\n  101  \t\t\tif r == utf8.RUNE_ERROR && w == 1 {\n  102  \t\t\t\terr = .Illegal_Codepoint\n  ...\n  108  \t\tt.ch = r\n  109  \t} else {\n  110: \t\tt.offset = len(t.src)\n  111  \t\tt.ch = -1\n  112  \t}\n  ...\n  133  \n  134  \t\tif t.ch == ']' {\n  135: \t\t\treturn t.src[start:t.offset], true\n  136  \t\t}\n  137  \t}\n  ...\n  150  \t\t}\n  151  \t\tif t.ch == '}' {\n  152: \t\t\treturn t.src[start:t.offset], true\n  153  \t\t}\n  154  \t}\n  ...\n  259  \t\t\tcase:\n  260  \t\t\t\tkind = .Rune\n  261: \t\t\t\tlit = t.src[t.offset:t.read_offset]\n  262  \t\t\t}\n  263  \n  ...\n  314  \n  315  \t\t\tkind = .Rune\n  316: \t\t\tlit = t.src[t.offset:t.read_offset]\n  317  \t\t}\n  318  \n\nC:\\odin-windows-amd64-dev-2025-03\\core\\text\\scanner\\scanner.odin:\n   80  // Scanner allows for the reading of Unicode characters and tokens from a string\n   81  Scanner :: struct {\n   82: \tsrc: string,\n   83  \n   84: \tsrc_pos: int,\n   85: \tsrc_end: int,\n   86  \n   87  \ttok_pos: int,\n   ..\n  124  // init initializes a scanner with a new source and returns itself.\n  125  // error_count is set to 0, flags is set to Odin_Like_Tokens, whitespace is set to Odin_Whitespace\n  126: init :: proc(s: ^Scanner, src: string, filename := \"\") -> ^Scanner {\n  127  \ts^ = {}\n  128  \n  129  \ts.error_count = 0\n  130: \ts.src = src\n  131  \ts.pos.filename = filename\n  132  \n  ...\n  146  @(private, require_results)\n  147  advance :: proc(s: ^Scanner) -> rune {\n  148: \tif s.src_pos >= len(s.src) {\n  149  \t\ts.prev_char_len = 0\n  150  \t\treturn EOF\n  151  \t}\n  152: \tch, width := rune(s.src[s.src_pos]), 1\n  153  \n  154  \tif ch >= utf8.RUNE_SELF {\n  155: \t\tch, width = utf8.decode_rune_in_string(s.src[s.src_pos:])\n  156  \t\tif ch == utf8.RUNE_ERROR && width == 1 {\n  157: \t\t\ts.src_pos += width\n  158  \t\t\ts.prev_char_len = width\n  159  \t\t\ts.column += 1\n  ...\n  163  \t}\n  164  \n  165: \ts.src_pos += width\n  166  \ts.prev_char_len = width\n  167  \ts.column += 1\n  ...\n  418  \n  419  \tif digsep&2 != 0 {\n  420: \t\ts.tok_end = s.src_pos - s.prev_char_len\n  421  \t}\n  422  \treturn tok, ch\n  ...\n  536  \t\t}\n  537  \n  538: \t\ts.tok_pos = s.src_pos - s.prev_char_len\n  539  \t\ts.pos.offset = s.tok_pos\n  540  \n  ...\n  609  \t}\n  610  \n  611: \ts.tok_end = s.src_pos - s.prev_char_len\n  612  \n  613  \ts.ch = ch\n  ...\n  621  \tpos: Position\n  622  \tpos.filename = s.pos.filename\n  623: \tpos.offset = s.src_pos - s.prev_char_len\n  624  \tswitch {\n  625  \tcase s.column > 0:\n  ...\n  642  \t\treturn \"\"\n  643  \t}\n  644: \treturn string(s.src[s.tok_pos:s.tok_end])\n  645  }\n  646  \n\n1113 matches across 109 files\n",
			"settings":
			{
				"buffer_size": 135767,
				"line_ending": "Windows",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "build_default.bat",
			"settings":
			{
				"buffer_size": 92,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					5,
					1,
					"insert",
					{
						"characters": "source"
					},
					"BgAAACQAAAAAAAAAJQAAAAAAAAADAAAAc3JjJQAAAAAAAAAmAAAAAAAAAAAAAAAmAAAAAAAAACcAAAAAAAAAAAAAACcAAAAAAAAAKAAAAAAAAAAAAAAAKAAAAAAAAAApAAAAAAAAAAAAAAApAAAAAAAAACoAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJAAAAAAAAAAnAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "build_hot_reload.bat",
			"settings":
			{
				"buffer_size": 3362,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					37,
					1,
					"insert",
					{
						"characters": "source"
					},
					"EgAAAGgKAAAAAAAAaQoAAAAAAAADAAAAc3JjrAgAAAAAAACtCAAAAAAAAAMAAABzcmPUBwAAAAAAANUHAAAAAAAAAwAAAHNyY2UKAAAAAAAAZgoAAAAAAAAAAAAAqwgAAAAAAACsCAAAAAAAAAAAAADVBwAAAAAAANYHAAAAAAAAAAAAAGgKAAAAAAAAaQoAAAAAAAAAAAAArQgAAAAAAACuCAAAAAAAAAAAAADWBwAAAAAAANcHAAAAAAAAAAAAAGsKAAAAAAAAbAoAAAAAAAAAAAAArwgAAAAAAACwCAAAAAAAAAAAAADXBwAAAAAAANgHAAAAAAAAAAAAAG4KAAAAAAAAbwoAAAAAAAAAAAAAsQgAAAAAAACyCAAAAAAAAAAAAADYBwAAAAAAANkHAAAAAAAAAAAAAHEKAAAAAAAAcgoAAAAAAAAAAAAAswgAAAAAAAC0CAAAAAAAAAAAAADZBwAAAAAAANoHAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAADAAAA1AcAAAAAAADXBwAAAAAAAAAAAAAAAPC/rAgAAAAAAACvCAAAAAAAAAAAAAAAAPC/aAoAAAAAAABrCgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "build_web.bat",
			"settings":
			{
				"buffer_size": 1625,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					11,
					1,
					"left_delete",
					null,
					"AgAAAO4EAAAAAAAA7gQAAAAAAAADAAAAc3JjMAIAAAAAAAAwAgAAAAAAAAMAAABzcmM",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAACAAAAMAIAAAAAAAAzAgAAAAAAAAAAAAAAAPC/7gQAAAAAAADxBAAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": "source"
					},
					"DAAAAOsEAAAAAAAA7AQAAAAAAAAAAAAAMAIAAAAAAAAxAgAAAAAAAAAAAADtBAAAAAAAAO4EAAAAAAAAAAAAADECAAAAAAAAMgIAAAAAAAAAAAAA7wQAAAAAAADwBAAAAAAAAAAAAAAyAgAAAAAAADMCAAAAAAAAAAAAAPEEAAAAAAAA8gQAAAAAAAAAAAAAMwIAAAAAAAA0AgAAAAAAAAAAAADzBAAAAAAAAPQEAAAAAAAAAAAAADQCAAAAAAAANQIAAAAAAAAAAAAA9QQAAAAAAAD2BAAAAAAAAAAAAAA1AgAAAAAAADYCAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAACAAAAMAIAAAAAAAAwAgAAAAAAAAAAAAAAAPC/6wQAAAAAAADrBAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "source/percentage.odin",
			"settings":
			{
				"buffer_size": 268,
				"encoding": "UTF-8",
				"line_ending": "Unix",
				"name": "package game"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"insert",
					{
						"characters": "package"
					},
					"BwAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAAAAAACAAAAAAAAAAMAAAAAAAAAAAAAAAMAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAFAAAAAAAAAAAAAAAFAAAAAAAAAAYAAAAAAAAAAAAAAAYAAAAAAAAABwAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					2,
					1,
					"insert",
					{
						"characters": " game"
					},
					"BQAAAAcAAAAAAAAACAAAAAAAAAAAAAAACAAAAAAAAAAJAAAAAAAAAAAAAAAJAAAAAAAAAAoAAAAAAAAAAAAAAAoAAAAAAAAACwAAAAAAAAAAAAAACwAAAAAAAAAMAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABwAAAAAAAAAHAAAAAAAAAAAAAAAAAPC/"
				],
				[
					3,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAAwAAAAAAAAADQAAAAAAAAAAAAAADQAAAAAAAAAOAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADAAAAAAAAAAMAAAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"paste",
					null,
					"AQAAAA4AAAAAAAAAqwAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADgAAAAAAAAAOAAAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "\n\npercenta"
					},
					"CgAAAKsAAAAAAAAArAAAAAAAAAAAAAAArAAAAAAAAACtAAAAAAAAAAAAAACtAAAAAAAAAK4AAAAAAAAAAAAAAK4AAAAAAAAArwAAAAAAAAAAAAAArwAAAAAAAACwAAAAAAAAAAAAAACwAAAAAAAAALEAAAAAAAAAAAAAALEAAAAAAAAAsgAAAAAAAAAAAAAAsgAAAAAAAACzAAAAAAAAAAAAAACzAAAAAAAAALQAAAAAAAAAAAAAALQAAAAAAAAAtQAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAqwAAAAAAAACrAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "ge_e"
					},
					"BAAAALUAAAAAAAAAtgAAAAAAAAAAAAAAtgAAAAAAAAC3AAAAAAAAAAAAAAC3AAAAAAAAALgAAAAAAAAAAAAAALgAAAAAAAAAuQAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtQAAAAAAAAC1AAAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"left_delete",
					null,
					"AQAAALgAAAAAAAAAuAAAAAAAAAABAAAAZQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAuQAAAAAAAAC5AAAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "done"
					},
					"BAAAALgAAAAAAAAAuQAAAAAAAAAAAAAAuQAAAAAAAAC6AAAAAAAAAAAAAAC6AAAAAAAAALsAAAAAAAAAAAAAALsAAAAAAAAAvAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAuAAAAAAAAAC4AAAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": " ::"
					},
					"AwAAALwAAAAAAAAAvQAAAAAAAAAAAAAAvQAAAAAAAAC+AAAAAAAAAAAAAAC+AAAAAAAAAL8AAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvAAAAAAAAAC8AAAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": " opro"
					},
					"BQAAAL8AAAAAAAAAwAAAAAAAAAAAAAAAwAAAAAAAAADBAAAAAAAAAAAAAADBAAAAAAAAAMIAAAAAAAAAAAAAAMIAAAAAAAAAwwAAAAAAAAAAAAAAwwAAAAAAAADEAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvwAAAAAAAAC/AAAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					4,
					"left_delete",
					null,
					"BAAAAMMAAAAAAAAAwwAAAAAAAAABAAAAb8IAAAAAAAAAwgAAAAAAAAABAAAAcsEAAAAAAAAAwQAAAAAAAAABAAAAcMAAAAAAAAAAwAAAAAAAAAABAAAAbw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxAAAAAAAAADEAAAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "proc"
					},
					"BAAAAMAAAAAAAAAAwQAAAAAAAAAAAAAAwQAAAAAAAADCAAAAAAAAAAAAAADCAAAAAAAAAMMAAAAAAAAAAAAAAMMAAAAAAAAAxAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwAAAAAAAAADAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAMQAAAAAAAAAxgAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxAAAAAAAAADEAAAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": "v,"
					},
					"AgAAAMUAAAAAAAAAxgAAAAAAAAAAAAAAxgAAAAAAAADHAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxQAAAAAAAADFAAAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": " max:"
					},
					"BQAAAMcAAAAAAAAAyAAAAAAAAAAAAAAAyAAAAAAAAADJAAAAAAAAAAAAAADJAAAAAAAAAMoAAAAAAAAAAAAAAMoAAAAAAAAAywAAAAAAAAAAAAAAywAAAAAAAADMAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxwAAAAAAAADHAAAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": " f32"
					},
					"BAAAAMwAAAAAAAAAzQAAAAAAAAAAAAAAzQAAAAAAAADOAAAAAAAAAAAAAADOAAAAAAAAAM8AAAAAAAAAAAAAAM8AAAAAAAAA0AAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAzAAAAAAAAADMAAAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": " ->"
					},
					"AwAAANEAAAAAAAAA0gAAAAAAAAAAAAAA0gAAAAAAAADTAAAAAAAAAAAAAADTAAAAAAAAANQAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA0QAAAAAAAADRAAAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": " f32"
					},
					"BAAAANQAAAAAAAAA1QAAAAAAAAAAAAAA1QAAAAAAAADWAAAAAAAAAAAAAADWAAAAAAAAANcAAAAAAAAAAAAAANcAAAAAAAAA2AAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1AAAAAAAAADUAAAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAANgAAAAAAAAA2QAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2AAAAAAAAADYAAAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAANkAAAAAAAAA2wAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2QAAAAAAAADZAAAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"AwAAANoAAAAAAAAA2wAAAAAAAAAAAAAA2wAAAAAAAADcAAAAAAAAAAAAAADbAAAAAAAAANwAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2gAAAAAAAADaAAAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": "return"
					},
					"BgAAANwAAAAAAAAA3QAAAAAAAAAAAAAA3QAAAAAAAADeAAAAAAAAAAAAAADeAAAAAAAAAN8AAAAAAAAAAAAAAN8AAAAAAAAA4AAAAAAAAAAAAAAA4AAAAAAAAADhAAAAAAAAAAAAAADhAAAAAAAAAOIAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3AAAAAAAAADcAAAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": " percentage_"
					},
					"DAAAAOIAAAAAAAAA4wAAAAAAAAAAAAAA4wAAAAAAAADkAAAAAAAAAAAAAADkAAAAAAAAAOUAAAAAAAAAAAAAAOUAAAAAAAAA5gAAAAAAAAAAAAAA5gAAAAAAAADnAAAAAAAAAAAAAADnAAAAAAAAAOgAAAAAAAAAAAAAAOgAAAAAAAAA6QAAAAAAAAAAAAAA6QAAAAAAAADqAAAAAAAAAAAAAADqAAAAAAAAAOsAAAAAAAAAAAAAAOsAAAAAAAAA7AAAAAAAAAAAAAAA7AAAAAAAAADtAAAAAAAAAAAAAADtAAAAAAAAAO4AAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4gAAAAAAAADiAAAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": "full"
					},
					"BAAAAO4AAAAAAAAA7wAAAAAAAAAAAAAA7wAAAAAAAADwAAAAAAAAAAAAAADwAAAAAAAAAPEAAAAAAAAAAAAAAPEAAAAAAAAA8gAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA7gAAAAAAAADuAAAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAPIAAAAAAAAA9AAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA8gAAAAAAAADyAAAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": "v,"
					},
					"AgAAAPMAAAAAAAAA9AAAAAAAAAAAAAAA9AAAAAAAAAD1AAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA8wAAAAAAAADzAAAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": " max"
					},
					"BAAAAPUAAAAAAAAA9gAAAAAAAAAAAAAA9gAAAAAAAAD3AAAAAAAAAAAAAAD3AAAAAAAAAPgAAAAAAAAAAAAAAPgAAAAAAAAA+QAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA9QAAAAAAAAD1AAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "source/countdown.odin",
			"settings":
			{
				"buffer_size": 386,
				"encoding": "UTF-8",
				"line_ending": "Unix",
				"name": "package game"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"insert",
					{
						"characters": "package"
					},
					"BwAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAAAAAACAAAAAAAAAAMAAAAAAAAAAAAAAAMAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAFAAAAAAAAAAAAAAAFAAAAAAAAAAYAAAAAAAAAAAAAAAYAAAAAAAAABwAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					2,
					1,
					"insert",
					{
						"characters": " game"
					},
					"BQAAAAcAAAAAAAAACAAAAAAAAAAAAAAACAAAAAAAAAAJAAAAAAAAAAAAAAAJAAAAAAAAAAoAAAAAAAAAAAAAAAoAAAAAAAAACwAAAAAAAAAAAAAACwAAAAAAAAAMAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABwAAAAAAAAAHAAAAAAAAAAAAAAAAAPC/"
				],
				[
					3,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAAwAAAAAAAAADQAAAAAAAAAAAAAADQAAAAAAAAAOAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADAAAAAAAAAAMAAAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"paste",
					null,
					"AQAAAA4AAAAAAAAAZQEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADgAAAAAAAAAOAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "source/sprite.odin",
			"settings":
			{
				"buffer_size": 3144,
				"encoding": "UTF-8",
				"line_ending": "Unix",
				"name": "package game"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"insert",
					{
						"characters": "packager"
					},
					"CAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAAAAAACAAAAAAAAAAMAAAAAAAAAAAAAAAMAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAFAAAAAAAAAAAAAAAFAAAAAAAAAAYAAAAAAAAAAAAAAAYAAAAAAAAABwAAAAAAAAAAAAAABwAAAAAAAAAIAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					2,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAgAAAAAAAAACQAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAACAAAAAAAAAAIAAAAAAAAAAAAAAAAAPC/"
				],
				[
					3,
					2,
					"left_delete",
					null,
					"AgAAAAgAAAAAAAAACAAAAAAAAAABAAAAIAcAAAAAAAAABwAAAAAAAAABAAAAcg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAACQAAAAAAAAAJAAAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"insert",
					{
						"characters": " game"
					},
					"BQAAAAcAAAAAAAAACAAAAAAAAAAAAAAACAAAAAAAAAAJAAAAAAAAAAAAAAAJAAAAAAAAAAoAAAAAAAAAAAAAAAoAAAAAAAAACwAAAAAAAAAAAAAACwAAAAAAAAAMAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABwAAAAAAAAAHAAAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAAwAAAAAAAAADQAAAAAAAAAAAAAADQAAAAAAAAAOAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADAAAAAAAAAAMAAAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"paste",
					null,
					"AQAAAA4AAAAAAAAAcwAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADgAAAAAAAAAOAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "\n\nanimation"
					},
					"CwAAAAwAAAAAAAAADQAAAAAAAAAAAAAADQAAAAAAAAAOAAAAAAAAAAAAAAAOAAAAAAAAAA8AAAAAAAAAAAAAAA8AAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAARAAAAAAAAAAAAAAARAAAAAAAAABIAAAAAAAAAAAAAABIAAAAAAAAAEwAAAAAAAAAAAAAAEwAAAAAAAAAUAAAAAAAAAAAAAAAUAAAAAAAAABUAAAAAAAAAAAAAABUAAAAAAAAAFgAAAAAAAAAAAAAAFgAAAAAAAAAXAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADAAAAAAAAAAMAAAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAA4AAAAAAAAADgAAAAAAAAAJAAAAYW5pbWF0aW9u",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFwAAAAAAAAAXAAAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "Animation_Name"
					},
					"DgAAAA4AAAAAAAAADwAAAAAAAAAAAAAADwAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAABEAAAAAAAAAAAAAABEAAAAAAAAAEgAAAAAAAAAAAAAAEgAAAAAAAAATAAAAAAAAAAAAAAATAAAAAAAAABQAAAAAAAAAAAAAABQAAAAAAAAAFQAAAAAAAAAAAAAAFQAAAAAAAAAWAAAAAAAAAAAAAAAWAAAAAAAAABcAAAAAAAAAAAAAABcAAAAAAAAAGAAAAAAAAAAAAAAAGAAAAAAAAAAZAAAAAAAAAAAAAAAZAAAAAAAAABoAAAAAAAAAAAAAABoAAAAAAAAAGwAAAAAAAAAAAAAAGwAAAAAAAAAcAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADgAAAAAAAAAOAAAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": " ::"
					},
					"AwAAABwAAAAAAAAAHQAAAAAAAAAAAAAAHQAAAAAAAAAeAAAAAAAAAAAAAAAeAAAAAAAAAB8AAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHAAAAAAAAAAcAAAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": " enum"
					},
					"BQAAAB8AAAAAAAAAIAAAAAAAAAAAAAAAIAAAAAAAAAAhAAAAAAAAAAAAAAAhAAAAAAAAACIAAAAAAAAAAAAAACIAAAAAAAAAIwAAAAAAAAAAAAAAIwAAAAAAAAAkAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHwAAAAAAAAAfAAAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACQAAAAAAAAAJQAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJAAAAAAAAAAkAAAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAACUAAAAAAAAAJwAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJQAAAAAAAAAlAAAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAACgAAAAAAAAAKQAAAAAAAAAAAAAAKQAAAAAAAAAqAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKAAAAAAAAAAoAAAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": "Animation_Timer"
					},
					"DwAAACkAAAAAAAAAKgAAAAAAAAAAAAAAKgAAAAAAAAArAAAAAAAAAAAAAAArAAAAAAAAACwAAAAAAAAAAAAAACwAAAAAAAAALQAAAAAAAAAAAAAALQAAAAAAAAAuAAAAAAAAAAAAAAAuAAAAAAAAAC8AAAAAAAAAAAAAAC8AAAAAAAAAMAAAAAAAAAAAAAAAMAAAAAAAAAAxAAAAAAAAAAAAAAAxAAAAAAAAADIAAAAAAAAAAAAAADIAAAAAAAAAMwAAAAAAAAAAAAAAMwAAAAAAAAA0AAAAAAAAAAAAAAA0AAAAAAAAADUAAAAAAAAAAAAAADUAAAAAAAAANgAAAAAAAAAAAAAANgAAAAAAAAA3AAAAAAAAAAAAAAA3AAAAAAAAADgAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKQAAAAAAAAApAAAAAAAAAAAAAAAAAAAA"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": " ::"
					},
					"AwAAADgAAAAAAAAAOQAAAAAAAAAAAAAAOQAAAAAAAAA6AAAAAAAAAAAAAAA6AAAAAAAAADsAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOAAAAAAAAAA4AAAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADsAAAAAAAAAPAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOwAAAAAAAAA7AAAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": "struct"
					},
					"BgAAADwAAAAAAAAAPQAAAAAAAAAAAAAAPQAAAAAAAAA+AAAAAAAAAAAAAAA+AAAAAAAAAD8AAAAAAAAAAAAAAD8AAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAABBAAAAAAAAAAAAAABBAAAAAAAAAEIAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPAAAAAAAAAA8AAAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAEIAAAAAAAAAQwAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQgAAAAAAAABCAAAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAEMAAAAAAAAARQAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQwAAAAAAAABDAAAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"AwAAAEQAAAAAAAAARQAAAAAAAAAAAAAARQAAAAAAAABGAAAAAAAAAAAAAABFAAAAAAAAAEYAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARAAAAAAAAABEAAAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAEYAAAAAAAAARwAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARgAAAAAAAABGAAAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"left_delete",
					null,
					"AQAAAEYAAAAAAAAARgAAAAAAAAABAAAAdA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARwAAAAAAAABHAAAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": "now:"
					},
					"BAAAAEYAAAAAAAAARwAAAAAAAAAAAAAARwAAAAAAAABIAAAAAAAAAAAAAABIAAAAAAAAAEkAAAAAAAAAAAAAAEkAAAAAAAAASgAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARgAAAAAAAABGAAAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": " f32,"
					},
					"BQAAAEoAAAAAAAAASwAAAAAAAAAAAAAASwAAAAAAAABMAAAAAAAAAAAAAABMAAAAAAAAAE0AAAAAAAAAAAAAAE0AAAAAAAAATgAAAAAAAAAAAAAATgAAAAAAAABPAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAASgAAAAAAAABKAAAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": "\nduration:"
					},
					"CgAAAE8AAAAAAAAAUQAAAAAAAAAAAAAAUQAAAAAAAABSAAAAAAAAAAAAAABSAAAAAAAAAFMAAAAAAAAAAAAAAFMAAAAAAAAAVAAAAAAAAAAAAAAAVAAAAAAAAABVAAAAAAAAAAAAAABVAAAAAAAAAFYAAAAAAAAAAAAAAFYAAAAAAAAAVwAAAAAAAAAAAAAAVwAAAAAAAABYAAAAAAAAAAAAAABYAAAAAAAAAFkAAAAAAAAAAAAAAFkAAAAAAAAAWgAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAATwAAAAAAAABPAAAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": " f"
					},
					"AgAAAFoAAAAAAAAAWwAAAAAAAAAAAAAAWwAAAAAAAABcAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAWgAAAAAAAABaAAAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					5,
					"delete_word",
					{
						"forward": false
					},
					"BQAAAFsAAAAAAAAAWwAAAAAAAAABAAAAZlkAAAAAAAAAWQAAAAAAAAACAAAAOiBRAAAAAAAAAFEAAAAAAAAACAAAAGR1cmF0aW9uUAAAAAAAAABQAAAAAAAAAAEAAAAJTwAAAAAAAABPAAAAAAAAAAEAAAAK",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAXAAAAAAAAABcAAAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": "\nplaying:"
					},
					"CQAAAE8AAAAAAAAAUQAAAAAAAAAAAAAAUQAAAAAAAABSAAAAAAAAAAAAAABSAAAAAAAAAFMAAAAAAAAAAAAAAFMAAAAAAAAAVAAAAAAAAAAAAAAAVAAAAAAAAABVAAAAAAAAAAAAAABVAAAAAAAAAFYAAAAAAAAAAAAAAFYAAAAAAAAAVwAAAAAAAAAAAAAAVwAAAAAAAABYAAAAAAAAAAAAAABYAAAAAAAAAFkAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAATwAAAAAAAABPAAAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": " bool"
					},
					"BQAAAFkAAAAAAAAAWgAAAAAAAAAAAAAAWgAAAAAAAABbAAAAAAAAAAAAAABbAAAAAAAAAFwAAAAAAAAAAAAAAFwAAAAAAAAAXQAAAAAAAAAAAAAAXQAAAAAAAABeAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAWQAAAAAAAABZAAAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": "is_"
					},
					"AwAAAFEAAAAAAAAAUgAAAAAAAAAAAAAAUgAAAAAAAABTAAAAAAAAAAAAAABTAAAAAAAAAFQAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAUQAAAAAAAABRAAAAAAAAAAAAAAAAAPC/"
				],
				[
					41,
					1,
					"cut",
					null,
					"AQAAAFAAAAAAAAAAUAAAAAAAAAASAAAACWlzX3BsYXlpbmc6IGJvb2wK",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAVAAAAAAAAABUAAAAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": "\nis_playing"
					},
					"CwAAAIgAAAAAAAAAigAAAAAAAAAAAAAAigAAAAAAAACLAAAAAAAAAAAAAACLAAAAAAAAAIwAAAAAAAAAAAAAAIwAAAAAAAAAjQAAAAAAAAAAAAAAjQAAAAAAAACOAAAAAAAAAAAAAACOAAAAAAAAAI8AAAAAAAAAAAAAAI8AAAAAAAAAkAAAAAAAAAAAAAAAkAAAAAAAAACRAAAAAAAAAAAAAACRAAAAAAAAAJIAAAAAAAAAAAAAAJIAAAAAAAAAkwAAAAAAAAAAAAAAkwAAAAAAAACUAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAiAAAAAAAAACIAAAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAJQAAAAAAAAAlQAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAlAAAAAAAAACUAAAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": " f32,"
					},
					"BQAAAJUAAAAAAAAAlgAAAAAAAAAAAAAAlgAAAAAAAACXAAAAAAAAAAAAAACXAAAAAAAAAJgAAAAAAAAAAAAAAJgAAAAAAAAAmQAAAAAAAAAAAAAAmQAAAAAAAACaAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAlQAAAAAAAACVAAAAAAAAAAAAAAAAAPC/"
				],
				[
					52,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAHEAAAAAAAAAcQAAAAAAAAAFAAAAdGltZXI",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAdgAAAAAAAAB2AAAAAAAAAAAAAAAAAPC/"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAHEAAAAAAAAAcgAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAcQAAAAAAAABxAAAAAAAAAAAAAAAAAPC/"
				],
				[
					55,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAHQAAAAAAAAAdAAAAAAAAAAPAAAAQW5pbWF0aW9uX1RpbWVy",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAgwAAAAAAAACDAAAAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": "f32"
					},
					"AwAAAHQAAAAAAAAAdQAAAAAAAAAAAAAAdQAAAAAAAAB2AAAAAAAAAAAAAAB2AAAAAAAAAHcAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAdAAAAAAAAAB0AAAAAAAAAAAAAAAAAPC/"
				],
				[
					60,
					1,
					"insert",
					{
						"characters": "\nis_looping"
					},
					"CwAAAIoAAAAAAAAAjAAAAAAAAAAAAAAAjAAAAAAAAACNAAAAAAAAAAAAAACNAAAAAAAAAI4AAAAAAAAAAAAAAI4AAAAAAAAAjwAAAAAAAAAAAAAAjwAAAAAAAACQAAAAAAAAAAAAAACQAAAAAAAAAJEAAAAAAAAAAAAAAJEAAAAAAAAAkgAAAAAAAAAAAAAAkgAAAAAAAACTAAAAAAAAAAAAAACTAAAAAAAAAJQAAAAAAAAAAAAAAJQAAAAAAAAAlQAAAAAAAAAAAAAAlQAAAAAAAACWAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAigAAAAAAAACKAAAAAAAAAAAAAAAAAPC/"
				],
				[
					61,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAJYAAAAAAAAAlwAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAlgAAAAAAAACWAAAAAAAAAAAAAAAAAPC/"
				],
				[
					62,
					1,
					"insert",
					{
						"characters": " bool,"
					},
					"BgAAAJcAAAAAAAAAmAAAAAAAAAAAAAAAmAAAAAAAAACZAAAAAAAAAAAAAACZAAAAAAAAAJoAAAAAAAAAAAAAAJoAAAAAAAAAmwAAAAAAAAAAAAAAmwAAAAAAAACcAAAAAAAAAAAAAACcAAAAAAAAAJ0AAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAlwAAAAAAAACXAAAAAAAAAAAAAAAAAPC/"
				],
				[
					67,
					2,
					"left_delete",
					null,
					"AgAAACkAAAAAAAAAKQAAAAAAAAAoAAAAQW5pbWF0aW9uX1RpbWVyIDo6IHN0cnVjdAp7Cglub3c6IGYzMiwKfSgAAAAAAAAAKAAAAAAAAAABAAAACg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAUQAAAAAAAAApAAAAAAAAAAAAAAAAAPC/"
				],
				[
					69,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAACgAAAAAAAAAKQAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKAAAAAAAAAAoAAAAAAAAAAAAAAAAAPC/"
				],
				[
					70,
					2,
					"left_delete",
					null,
					"AgAAACgAAAAAAAAAKAAAAAAAAAABAAAACicAAAAAAAAAJwAAAAAAAAABAAAACg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKQAAAAAAAAApAAAAAAAAAAAAAAAAAPC/"
				],
				[
					73,
					1,
					"insert",
					{
						"characters": "\n\nglobal_animat"
					},
					"DwAAAKMAAAAAAAAApAAAAAAAAAAAAAAApAAAAAAAAAClAAAAAAAAAAAAAAClAAAAAAAAAKYAAAAAAAAAAAAAAKYAAAAAAAAApwAAAAAAAAAAAAAApwAAAAAAAACoAAAAAAAAAAAAAACoAAAAAAAAAKkAAAAAAAAAAAAAAKkAAAAAAAAAqgAAAAAAAAAAAAAAqgAAAAAAAACrAAAAAAAAAAAAAACrAAAAAAAAAKwAAAAAAAAAAAAAAKwAAAAAAAAArQAAAAAAAAAAAAAArQAAAAAAAACuAAAAAAAAAAAAAACuAAAAAAAAAK8AAAAAAAAAAAAAAK8AAAAAAAAAsAAAAAAAAAAAAAAAsAAAAAAAAACxAAAAAAAAAAAAAACxAAAAAAAAALIAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAowAAAAAAAACjAAAAAAAAAAAAAAAAwGlA"
				],
				[
					74,
					1,
					"insert",
					{
						"characters": "ion"
					},
					"AwAAALIAAAAAAAAAswAAAAAAAAAAAAAAswAAAAAAAAC0AAAAAAAAAAAAAAC0AAAAAAAAALUAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAsgAAAAAAAACyAAAAAAAAAAAAAAAAAPC/"
				],
				[
					75,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAALUAAAAAAAAAtgAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtQAAAAAAAAC1AAAAAAAAAAAAAAAAAPC/"
				],
				[
					76,
					1,
					"left_delete",
					null,
					"AQAAALUAAAAAAAAAtQAAAAAAAAABAAAAcw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtgAAAAAAAAC2AAAAAAAAAAAAAAAAAPC/"
				],
				[
					77,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAALUAAAAAAAAAtgAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtQAAAAAAAAC1AAAAAAAAAAAAAAAAAPC/"
				],
				[
					78,
					1,
					"insert",
					{
						"characters": " :="
					},
					"AwAAALYAAAAAAAAAtwAAAAAAAAAAAAAAtwAAAAAAAAC4AAAAAAAAAAAAAAC4AAAAAAAAALkAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtgAAAAAAAAC2AAAAAAAAAAAAAAAAAPC/"
				],
				[
					79,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALkAAAAAAAAAugAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAuQAAAAAAAAC5AAAAAAAAAAAAAAAAAPC/"
				],
				[
					80,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAALoAAAAAAAAAvAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAugAAAAAAAAC6AAAAAAAAAAAAAAAAAPC/"
				],
				[
					81,
					1,
					"insert",
					{
						"characters": "Animation_Name"
					},
					"DgAAALsAAAAAAAAAvAAAAAAAAAAAAAAAvAAAAAAAAAC9AAAAAAAAAAAAAAC9AAAAAAAAAL4AAAAAAAAAAAAAAL4AAAAAAAAAvwAAAAAAAAAAAAAAvwAAAAAAAADAAAAAAAAAAAAAAADAAAAAAAAAAMEAAAAAAAAAAAAAAMEAAAAAAAAAwgAAAAAAAAAAAAAAwgAAAAAAAADDAAAAAAAAAAAAAADDAAAAAAAAAMQAAAAAAAAAAAAAAMQAAAAAAAAAxQAAAAAAAAAAAAAAxQAAAAAAAADGAAAAAAAAAAAAAADGAAAAAAAAAMcAAAAAAAAAAAAAAMcAAAAAAAAAyAAAAAAAAAAAAAAAyAAAAAAAAADJAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAuwAAAAAAAAC7AAAAAAAAAAAAAAAAAPC/"
				],
				[
					83,
					1,
					"insert",
					{
						"characters": "\n\nAnimation"
					},
					"CwAAAKIAAAAAAAAAowAAAAAAAAAAAAAAowAAAAAAAACkAAAAAAAAAAAAAACkAAAAAAAAAKUAAAAAAAAAAAAAAKUAAAAAAAAApgAAAAAAAAAAAAAApgAAAAAAAACnAAAAAAAAAAAAAACnAAAAAAAAAKgAAAAAAAAAAAAAAKgAAAAAAAAAqQAAAAAAAAAAAAAAqQAAAAAAAACqAAAAAAAAAAAAAACqAAAAAAAAAKsAAAAAAAAAAAAAAKsAAAAAAAAArAAAAAAAAAAAAAAArAAAAAAAAACtAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAogAAAAAAAACiAAAAAAAAAAAAAAAAkHJA"
				],
				[
					88,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAA0AAAAAAAAADgAAAAAAAAAAAAAADgAAAAAAAAAPAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADQAAAAAAAAANAAAAAAAAAAAAAAAAAPC/"
				],
				[
					90,
					1,
					"insert",
					{
						"characters": "Sprite_c"
					},
					"CAAAAA4AAAAAAAAADwAAAAAAAAAAAAAADwAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAABEAAAAAAAAAAAAAABEAAAAAAAAAEgAAAAAAAAAAAAAAEgAAAAAAAAATAAAAAAAAAAAAAAATAAAAAAAAABQAAAAAAAAAAAAAABQAAAAAAAAAFQAAAAAAAAAAAAAAFQAAAAAAAAAWAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADgAAAAAAAAAOAAAAAAAAAAAAAAAAAAAA"
				],
				[
					91,
					1,
					"left_delete",
					null,
					"AQAAABUAAAAAAAAAFQAAAAAAAAABAAAAYw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFgAAAAAAAAAWAAAAAAAAAAAAAAAAAPC/"
				],
				[
					92,
					1,
					"insert",
					{
						"characters": "Clip_Name"
					},
					"CQAAABUAAAAAAAAAFgAAAAAAAAAAAAAAFgAAAAAAAAAXAAAAAAAAAAAAAAAXAAAAAAAAABgAAAAAAAAAAAAAABgAAAAAAAAAGQAAAAAAAAAAAAAAGQAAAAAAAAAaAAAAAAAAAAAAAAAaAAAAAAAAABsAAAAAAAAAAAAAABsAAAAAAAAAHAAAAAAAAAAAAAAAHAAAAAAAAAAdAAAAAAAAAAAAAAAdAAAAAAAAAB4AAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFQAAAAAAAAAVAAAAAAAAAAAAAAAAAPC/"
				],
				[
					93,
					1,
					"insert",
					{
						"characters": " ::"
					},
					"AwAAAB4AAAAAAAAAHwAAAAAAAAAAAAAAHwAAAAAAAAAgAAAAAAAAAAAAAAAgAAAAAAAAACEAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHgAAAAAAAAAeAAAAAAAAAAAAAAAAAPC/"
				],
				[
					94,
					1,
					"insert",
					{
						"characters": " enunm"
					},
					"BgAAACEAAAAAAAAAIgAAAAAAAAAAAAAAIgAAAAAAAAAjAAAAAAAAAAAAAAAjAAAAAAAAACQAAAAAAAAAAAAAACQAAAAAAAAAJQAAAAAAAAAAAAAAJQAAAAAAAAAmAAAAAAAAAAAAAAAmAAAAAAAAACcAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIQAAAAAAAAAhAAAAAAAAAAAAAAAAAPC/"
				],
				[
					95,
					2,
					"left_delete",
					null,
					"AgAAACYAAAAAAAAAJgAAAAAAAAABAAAAbSUAAAAAAAAAJQAAAAAAAAABAAAAbg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJwAAAAAAAAAnAAAAAAAAAAAAAAAAAPC/"
				],
				[
					96,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAACUAAAAAAAAAJgAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJQAAAAAAAAAlAAAAAAAAAAAAAAAAAPC/"
				],
				[
					97,
					1,
					"left_delete",
					null,
					"AQAAACUAAAAAAAAAJQAAAAAAAAABAAAALA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJgAAAAAAAAAmAAAAAAAAAAAAAAAAAPC/"
				],
				[
					98,
					1,
					"insert",
					{
						"characters": "m"
					},
					"AQAAACUAAAAAAAAAJgAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJQAAAAAAAAAlAAAAAAAAAAAAAAAAAPC/"
				],
				[
					99,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACYAAAAAAAAAJwAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJgAAAAAAAAAmAAAAAAAAAAAAAAAAAPC/"
				],
				[
					100,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAACcAAAAAAAAAKQAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJwAAAAAAAAAnAAAAAAAAAAAAAAAAAPC/"
				],
				[
					101,
					1,
					"insert",
					{
						"characters": "P"
					},
					"AQAAACgAAAAAAAAAKQAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKAAAAAAAAAAoAAAAAAAAAAAAAAAAAPC/"
				],
				[
					103,
					2,
					"left_delete",
					null,
					"AgAAACkAAAAAAAAAKQAAAAAAAAABAAAAfSgAAAAAAAAAKAAAAAAAAAABAAAAUA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKgAAAAAAAAAqAAAAAAAAAAAAAAAAAPC/"
				],
				[
					104,
					1,
					"insert",
					{
						"characters": "}"
					},
					"AQAAACgAAAAAAAAAKQAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKAAAAAAAAAAoAAAAAAAAAAAAAAAAAPC/"
				],
				[
					107,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAMEAAAAAAAAAwQAAAAAAAAAJAAAAQW5pbWF0aW9u",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAygAAAAAAAADKAAAAAAAAAAAAAAAA4GtA"
				],
				[
					108,
					2,
					"left_delete",
					null,
					"AgAAAMAAAAAAAAAAwAAAAAAAAAABAAAACr8AAAAAAAAAvwAAAAAAAAABAAAACg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwQAAAAAAAADBAAAAAAAAAAAAAAAAAPC/"
				],
				[
					111,
					1,
					"insert",
					{
						"characters": "rl.Rect"
					},
					"BwAAAOcAAAAAAAAA6AAAAAAAAAAAAAAA6AAAAAAAAADpAAAAAAAAAAAAAADpAAAAAAAAAOoAAAAAAAAAAAAAAOoAAAAAAAAA6wAAAAAAAAAAAAAA6wAAAAAAAADsAAAAAAAAAAAAAADsAAAAAAAAAO0AAAAAAAAAAAAAAO0AAAAAAAAA7gAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA5wAAAAAAAADnAAAAAAAAAAAAAAAAAPC/"
				],
				[
					112,
					2,
					"delete_word",
					{
						"forward": false
					},
					"AgAAAOoAAAAAAAAA6gAAAAAAAAAEAAAAUmVjdOkAAAAAAAAA6QAAAAAAAAABAAAALg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA7gAAAAAAAADuAAAAAAAAAAAAAAAAAPC/"
				],
				[
					113,
					2,
					"left_delete",
					null,
					"AgAAAOgAAAAAAAAA6AAAAAAAAAABAAAAbOcAAAAAAAAA5wAAAAAAAAABAAAAcg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6QAAAAAAAADpAAAAAAAAAAAAAAAAAPC/"
				],
				[
					114,
					1,
					"insert",
					{
						"characters": "Sprite_Clip"
					},
					"CwAAAOcAAAAAAAAA6AAAAAAAAAAAAAAA6AAAAAAAAADpAAAAAAAAAAAAAADpAAAAAAAAAOoAAAAAAAAAAAAAAOoAAAAAAAAA6wAAAAAAAAAAAAAA6wAAAAAAAADsAAAAAAAAAAAAAADsAAAAAAAAAO0AAAAAAAAAAAAAAO0AAAAAAAAA7gAAAAAAAAAAAAAA7gAAAAAAAADvAAAAAAAAAAAAAADvAAAAAAAAAPAAAAAAAAAAAAAAAPAAAAAAAAAA8QAAAAAAAAAAAAAA8QAAAAAAAADyAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA5wAAAAAAAADnAAAAAAAAAAAAAAAAAPC/"
				],
				[
					115,
					1,
					"insert",
					{
						"characters": "Name"
					},
					"BAAAAPIAAAAAAAAA8wAAAAAAAAAAAAAA8wAAAAAAAAD0AAAAAAAAAAAAAAD0AAAAAAAAAPUAAAAAAAAAAAAAAPUAAAAAAAAA9gAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA8gAAAAAAAADyAAAAAAAAAAAAAAAAAPC/"
				],
				[
					116,
					4,
					"left_delete",
					null,
					"BAAAAPUAAAAAAAAA9QAAAAAAAAABAAAAZfQAAAAAAAAA9AAAAAAAAAABAAAAbfMAAAAAAAAA8wAAAAAAAAABAAAAYfIAAAAAAAAA8gAAAAAAAAABAAAATg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA9gAAAAAAAAD2AAAAAAAAAAAAAAAAAPC/"
				],
				[
					117,
					1,
					"insert",
					{
						"characters": "_Name"
					},
					"BQAAAPIAAAAAAAAA8wAAAAAAAAAAAAAA8wAAAAAAAAD0AAAAAAAAAAAAAAD0AAAAAAAAAPUAAAAAAAAAAAAAAPUAAAAAAAAA9gAAAAAAAAAAAAAA9gAAAAAAAAD3AAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA8gAAAAAAAADyAAAAAAAAAAAAAAAAAPC/"
				],
				[
					118,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAPcAAAAAAAAA+QAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA9wAAAAAAAAD3AAAAAAAAAAAAAAAAAPC/"
				],
				[
					122,
					1,
					"left_delete",
					null,
					"AQAAAMAAAAAAAAAAwAAAAAAAAAABAAAACg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwQAAAAAAAADBAAAAAAAAAAAAAAAAYHxA"
				],
				[
					126,
					1,
					"insert",
					{
						"characters": "[]"
					},
					"AgAAAOYAAAAAAAAA5wAAAAAAAAAAAAAA5wAAAAAAAADoAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA5gAAAAAAAADmAAAAAAAAAAAAAAAAAPC/"
				],
				[
					131,
					1,
					"insert",
					{
						"characters": "\nglobal_+"
					},
					"CQAAAPoAAAAAAAAA+wAAAAAAAAAAAAAA+wAAAAAAAAD8AAAAAAAAAAAAAAD8AAAAAAAAAP0AAAAAAAAAAAAAAP0AAAAAAAAA/gAAAAAAAAAAAAAA/gAAAAAAAAD/AAAAAAAAAAAAAAD/AAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAQEAAAAAAAAAAAAAAQEAAAAAAAACAQAAAAAAAAAAAAACAQAAAAAAAAMBAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+gAAAAAAAAD6AAAAAAAAAP///////+9/"
				],
				[
					132,
					1,
					"left_delete",
					null,
					"AQAAAAIBAAAAAAAAAgEAAAAAAAABAAAAKw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAwEAAAAAAAADAQAAAAAAAAAAAAAAAPC/"
				],
				[
					133,
					1,
					"insert",
					{
						"characters": "animation_pla"
					},
					"DQAAAAIBAAAAAAAAAwEAAAAAAAAAAAAAAwEAAAAAAAAEAQAAAAAAAAAAAAAEAQAAAAAAAAUBAAAAAAAAAAAAAAUBAAAAAAAABgEAAAAAAAAAAAAABgEAAAAAAAAHAQAAAAAAAAAAAAAHAQAAAAAAAAgBAAAAAAAAAAAAAAgBAAAAAAAACQEAAAAAAAAAAAAACQEAAAAAAAAKAQAAAAAAAAAAAAAKAQAAAAAAAAsBAAAAAAAAAAAAAAsBAAAAAAAADAEAAAAAAAAAAAAADAEAAAAAAAANAQAAAAAAAAAAAAANAQAAAAAAAA4BAAAAAAAAAAAAAA4BAAAAAAAADwEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAgEAAAAAAAACAQAAAAAAAAAAAAAAAPC/"
				],
				[
					134,
					1,
					"insert",
					{
						"characters": "ter"
					},
					"AwAAAA8BAAAAAAAAEAEAAAAAAAAAAAAAEAEAAAAAAAARAQAAAAAAAAAAAAARAQAAAAAAABIBAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADwEAAAAAAAAPAQAAAAAAAAAAAAAAAPC/"
				],
				[
					135,
					3,
					"left_delete",
					null,
					"AwAAABEBAAAAAAAAEQEAAAAAAAABAAAAchABAAAAAAAAEAEAAAAAAAABAAAAZQ8BAAAAAAAADwEAAAAAAAABAAAAdA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEgEAAAAAAAASAQAAAAAAAAAAAAAAAPC/"
				],
				[
					136,
					1,
					"insert",
					{
						"characters": "yers"
					},
					"BAAAAA8BAAAAAAAAEAEAAAAAAAAAAAAAEAEAAAAAAAARAQAAAAAAAAAAAAARAQAAAAAAABIBAAAAAAAAAAAAABIBAAAAAAAAEwEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADwEAAAAAAAAPAQAAAAAAAAAAAAAAAPC/"
				],
				[
					138,
					1,
					"insert",
					{
						"characters": "\n\nAnimation_"
					},
					"DAAAAL8AAAAAAAAAwAAAAAAAAAAAAAAAwAAAAAAAAADBAAAAAAAAAAAAAADBAAAAAAAAAMIAAAAAAAAAAAAAAMIAAAAAAAAAwwAAAAAAAAAAAAAAwwAAAAAAAADEAAAAAAAAAAAAAADEAAAAAAAAAMUAAAAAAAAAAAAAAMUAAAAAAAAAxgAAAAAAAAAAAAAAxgAAAAAAAADHAAAAAAAAAAAAAADHAAAAAAAAAMgAAAAAAAAAAAAAAMgAAAAAAAAAyQAAAAAAAAAAAAAAyQAAAAAAAADKAAAAAAAAAAAAAADKAAAAAAAAAMsAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvwAAAAAAAAC/AAAAAAAAAAAAAAAAwGhA"
				],
				[
					139,
					1,
					"insert",
					{
						"characters": "Player_N"
					},
					"CAAAAMsAAAAAAAAAzAAAAAAAAAAAAAAAzAAAAAAAAADNAAAAAAAAAAAAAADNAAAAAAAAAM4AAAAAAAAAAAAAAM4AAAAAAAAAzwAAAAAAAAAAAAAAzwAAAAAAAADQAAAAAAAAAAAAAADQAAAAAAAAANEAAAAAAAAAAAAAANEAAAAAAAAA0gAAAAAAAAAAAAAA0gAAAAAAAADTAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAywAAAAAAAADLAAAAAAAAAAAAAAAAAPC/"
				],
				[
					140,
					1,
					"insert",
					{
						"characters": "ame"
					},
					"AwAAANMAAAAAAAAA1AAAAAAAAAAAAAAA1AAAAAAAAADVAAAAAAAAAAAAAADVAAAAAAAAANYAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA0wAAAAAAAADTAAAAAAAAAAAAAAAAAPC/"
				],
				[
					141,
					1,
					"insert",
					{
						"characters": " ::"
					},
					"AwAAANYAAAAAAAAA1wAAAAAAAAAAAAAA1wAAAAAAAADYAAAAAAAAAAAAAADYAAAAAAAAANkAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1gAAAAAAAADWAAAAAAAAAAAAAAAAAPC/"
				],
				[
					142,
					1,
					"insert",
					{
						"characters": " enum"
					},
					"BQAAANkAAAAAAAAA2gAAAAAAAAAAAAAA2gAAAAAAAADbAAAAAAAAAAAAAADbAAAAAAAAANwAAAAAAAAAAAAAANwAAAAAAAAA3QAAAAAAAAAAAAAA3QAAAAAAAADeAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2QAAAAAAAADZAAAAAAAAAAAAAAAAAPC/"
				],
				[
					143,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAN4AAAAAAAAA3wAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3gAAAAAAAADeAAAAAAAAAAAAAAAAAPC/"
				],
				[
					144,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAN8AAAAAAAAA4QAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3wAAAAAAAADfAAAAAAAAAAAAAAAAAPC/"
				],
				[
					145,
					1,
					"insert",
					{
						"characters": "P"
					},
					"AQAAAOAAAAAAAAAA4QAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4AAAAAAAAADgAAAAAAAAAAAAAAAAAPC/"
				],
				[
					147,
					2,
					"left_delete",
					null,
					"AgAAAOEAAAAAAAAA4QAAAAAAAAABAAAAfeAAAAAAAAAA4AAAAAAAAAABAAAAUA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4gAAAAAAAADiAAAAAAAAAAAAAAAAAPC/"
				],
				[
					148,
					1,
					"insert",
					{
						"characters": "}"
					},
					"AQAAAOAAAAAAAAAA4QAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4AAAAAAAAADgAAAAAAAAAAAAAAAAAPC/"
				],
				[
					150,
					1,
					"cut",
					null,
					"AQAAAMEAAAAAAAAAwQAAAAAAAAAhAAAAQW5pbWF0aW9uX1BsYXllcl9OYW1lIDo6IGVudW0ge30K",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4QAAAAAAAADhAAAAAAAAAAAAAAAAAPC/"
				],
				[
					152,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAPwAAAAAAAAA/QAAAAAAAAAAAAAA/QAAAAAAAAD+AAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/AAAAAAAAAD8AAAAAAAAAAAAAAAAAAAA"
				],
				[
					154,
					1,
					"paste",
					null,
					"AQAAAP0AAAAAAAAAHgEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/QAAAAAAAAD9AAAAAAAAAAAAAAAAAAAA"
				],
				[
					155,
					1,
					"left_delete",
					null,
					"AQAAAB0BAAAAAAAAHQEAAAAAAAABAAAACg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHgEAAAAAAAAeAQAAAAAAAAAAAAAAAPC/"
				],
				[
					157,
					1,
					"cut",
					null,
					"AQAAACsAAAAAAAAAKwAAAAAAAAAaAAAAQW5pbWF0aW9uX05hbWUgOjogZW51bSB7fQo",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARAAAAAAAAABEAAAAAAAAAAAAAAAAgHBA"
				],
				[
					159,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAKcAAAAAAAAAqAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApwAAAAAAAACnAAAAAAAAAAAAAAAAAAAA"
				],
				[
					160,
					1,
					"paste",
					null,
					"AQAAAKgAAAAAAAAAwgAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAqAAAAAAAAACoAAAAAAAAAAAAAAAAAPC/"
				],
				[
					161,
					1,
					"left_delete",
					null,
					"AQAAAMEAAAAAAAAAwQAAAAAAAAABAAAACg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwgAAAAAAAADCAAAAAAAAAAAAAAAAAPC/"
				],
				[
					164,
					1,
					"cut",
					null,
					"AQAAAA4AAAAAAAAADgAAAAAAAAAcAAAAU3ByaXRlX0NsaXBfTmFtZSA6OiBlbnVtIHt9Cg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJwAAAAAAAAAnAAAAAAAAAAAAAAAAwGlA"
				],
				[
					166,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAIoAAAAAAAAAiwAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAigAAAAAAAACKAAAAAAAAAAAAAAAAAAAA"
				],
				[
					167,
					1,
					"paste",
					null,
					"AQAAAIsAAAAAAAAApwAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAiwAAAAAAAACLAAAAAAAAAAAAAAAAAPC/"
				],
				[
					168,
					1,
					"insert",
					{
						"characters": "global_sprite_"
					},
					"DgAAAKcAAAAAAAAAqAAAAAAAAAAAAAAAqAAAAAAAAACpAAAAAAAAAAAAAACpAAAAAAAAAKoAAAAAAAAAAAAAAKoAAAAAAAAAqwAAAAAAAAAAAAAAqwAAAAAAAACsAAAAAAAAAAAAAACsAAAAAAAAAK0AAAAAAAAAAAAAAK0AAAAAAAAArgAAAAAAAAAAAAAArgAAAAAAAACvAAAAAAAAAAAAAACvAAAAAAAAALAAAAAAAAAAAAAAALAAAAAAAAAAsQAAAAAAAAAAAAAAsQAAAAAAAACyAAAAAAAAAAAAAACyAAAAAAAAALMAAAAAAAAAAAAAALMAAAAAAAAAtAAAAAAAAAAAAAAAtAAAAAAAAAC1AAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApwAAAAAAAACnAAAAAAAAAAAAAAAAAPC/"
				],
				[
					169,
					1,
					"insert",
					{
						"characters": "clips"
					},
					"BQAAALUAAAAAAAAAtgAAAAAAAAAAAAAAtgAAAAAAAAC3AAAAAAAAAAAAAAC3AAAAAAAAALgAAAAAAAAAAAAAALgAAAAAAAAAuQAAAAAAAAAAAAAAuQAAAAAAAAC6AAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtQAAAAAAAAC1AAAAAAAAAAAAAAAAAPC/"
				],
				[
					170,
					1,
					"insert",
					{
						"characters": " ::"
					},
					"AwAAALoAAAAAAAAAuwAAAAAAAAAAAAAAuwAAAAAAAAC8AAAAAAAAAAAAAAC8AAAAAAAAAL0AAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAugAAAAAAAAC6AAAAAAAAAAAAAAAAAPC/"
				],
				[
					171,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAL0AAAAAAAAAvgAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvQAAAAAAAAC9AAAAAAAAAAAAAAAAAPC/"
				],
				[
					172,
					2,
					"left_delete",
					null,
					"AgAAAL0AAAAAAAAAvQAAAAAAAAABAAAAILwAAAAAAAAAvAAAAAAAAAABAAAAOg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvgAAAAAAAAC+AAAAAAAAAAAAAAAAAPC/"
				],
				[
					173,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAALwAAAAAAAAAvQAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvAAAAAAAAAC8AAAAAAAAAAAAAAAAAPC/"
				],
				[
					174,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAL0AAAAAAAAAvgAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvQAAAAAAAAC9AAAAAAAAAAAAAAAAAPC/"
				],
				[
					175,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAL4AAAAAAAAAwAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvgAAAAAAAAC+AAAAAAAAAAAAAAAAAPC/"
				],
				[
					176,
					1,
					"insert",
					{
						"characters": "Sprite_Clip"
					},
					"CwAAAL8AAAAAAAAAwAAAAAAAAAAAAAAAwAAAAAAAAADBAAAAAAAAAAAAAADBAAAAAAAAAMIAAAAAAAAAAAAAAMIAAAAAAAAAwwAAAAAAAAAAAAAAwwAAAAAAAADEAAAAAAAAAAAAAADEAAAAAAAAAMUAAAAAAAAAAAAAAMUAAAAAAAAAxgAAAAAAAAAAAAAAxgAAAAAAAADHAAAAAAAAAAAAAADHAAAAAAAAAMgAAAAAAAAAAAAAAMgAAAAAAAAAyQAAAAAAAAAAAAAAyQAAAAAAAADKAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvwAAAAAAAAC/AAAAAAAAAAAAAAAAAPC/"
				],
				[
					177,
					1,
					"insert",
					{
						"characters": "_Name"
					},
					"BQAAAMoAAAAAAAAAywAAAAAAAAAAAAAAywAAAAAAAADMAAAAAAAAAAAAAADMAAAAAAAAAM0AAAAAAAAAAAAAAM0AAAAAAAAAzgAAAAAAAAAAAAAAzgAAAAAAAADPAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAygAAAAAAAADKAAAAAAAAAAAAAAAAAPC/"
				],
				[
					179,
					1,
					"insert",
					{
						"characters": "rl.Recta"
					},
					"CAAAANAAAAAAAAAA0QAAAAAAAAAAAAAA0QAAAAAAAADSAAAAAAAAAAAAAADSAAAAAAAAANMAAAAAAAAAAAAAANMAAAAAAAAA1AAAAAAAAAAAAAAA1AAAAAAAAADVAAAAAAAAAAAAAADVAAAAAAAAANYAAAAAAAAAAAAAANYAAAAAAAAA1wAAAAAAAAAAAAAA1wAAAAAAAADYAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA0AAAAAAAAADQAAAAAAAAAAAAAAAAAPC/"
				],
				[
					180,
					1,
					"insert",
					{
						"characters": "ngle"
					},
					"BAAAANgAAAAAAAAA2QAAAAAAAAAAAAAA2QAAAAAAAADaAAAAAAAAAAAAAADaAAAAAAAAANsAAAAAAAAAAAAAANsAAAAAAAAA3AAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2AAAAAAAAADYAAAAAAAAAAAAAAAAAPC/"
				],
				[
					183,
					1,
					"insert",
					{
						"characters": "import"
					},
					"BgAAAA4AAAAAAAAADwAAAAAAAAAAAAAADwAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAABEAAAAAAAAAAAAAABEAAAAAAAAAEgAAAAAAAAAAAAAAEgAAAAAAAAATAAAAAAAAAAAAAAATAAAAAAAAABQAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADgAAAAAAAAAOAAAAAAAAAAAAAAAAUHtA"
				],
				[
					184,
					1,
					"insert",
					{
						"characters": " rl."
					},
					"BAAAABQAAAAAAAAAFQAAAAAAAAAAAAAAFQAAAAAAAAAWAAAAAAAAAAAAAAAWAAAAAAAAABcAAAAAAAAAAAAAABcAAAAAAAAAGAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFAAAAAAAAAAUAAAAAAAAAAAAAAAAAPC/"
				],
				[
					185,
					1,
					"left_delete",
					null,
					"AQAAABcAAAAAAAAAFwAAAAAAAAABAAAALg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGAAAAAAAAAAYAAAAAAAAAAAAAAAAAPC/"
				],
				[
					186,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABcAAAAAAAAAGAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFwAAAAAAAAAXAAAAAAAAAAAAAAAAAPC/"
				],
				[
					187,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAABgAAAAAAAAAGgAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGAAAAAAAAAAYAAAAAAAAAAAAAAAAAPC/"
				],
				[
					188,
					1,
					"insert",
					{
						"characters": "vendor:ra"
					},
					"CQAAABkAAAAAAAAAGgAAAAAAAAAAAAAAGgAAAAAAAAAbAAAAAAAAAAAAAAAbAAAAAAAAABwAAAAAAAAAAAAAABwAAAAAAAAAHQAAAAAAAAAAAAAAHQAAAAAAAAAeAAAAAAAAAAAAAAAeAAAAAAAAAB8AAAAAAAAAAAAAAB8AAAAAAAAAIAAAAAAAAAAAAAAAIAAAAAAAAAAhAAAAAAAAAAAAAAAhAAAAAAAAACIAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGQAAAAAAAAAZAAAAAAAAAAAAAAAAAPC/"
				],
				[
					189,
					1,
					"insert",
					{
						"characters": "ylib"
					},
					"BAAAACIAAAAAAAAAIwAAAAAAAAAAAAAAIwAAAAAAAAAkAAAAAAAAAAAAAAAkAAAAAAAAACUAAAAAAAAAAAAAACUAAAAAAAAAJgAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIgAAAAAAAAAiAAAAAAAAAAAAAAAAAPC/"
				],
				[
					192,
					1,
					"insert",
					{
						"characters": " :="
					},
					"AwAAAIUBAAAAAAAAhgEAAAAAAAAAAAAAhgEAAAAAAACHAQAAAAAAAAAAAACHAQAAAAAAAIgBAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAhQEAAAAAAACFAQAAAAAAAAAAAAAAwGhA"
				],
				[
					193,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIgBAAAAAAAAiQEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAiAEAAAAAAACIAQAAAAAAAAAAAAAAAPC/"
				],
				[
					194,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAIkBAAAAAAAAiwEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAiQEAAAAAAACJAQAAAAAAAAAAAAAAAPC/"
				],
				[
					195,
					1,
					"insert",
					{
						"characters": "Animation_Pla"
					},
					"DQAAAIoBAAAAAAAAiwEAAAAAAAAAAAAAiwEAAAAAAACMAQAAAAAAAAAAAACMAQAAAAAAAI0BAAAAAAAAAAAAAI0BAAAAAAAAjgEAAAAAAAAAAAAAjgEAAAAAAACPAQAAAAAAAAAAAACPAQAAAAAAAJABAAAAAAAAAAAAAJABAAAAAAAAkQEAAAAAAAAAAAAAkQEAAAAAAACSAQAAAAAAAAAAAACSAQAAAAAAAJMBAAAAAAAAAAAAAJMBAAAAAAAAlAEAAAAAAAAAAAAAlAEAAAAAAACVAQAAAAAAAAAAAACVAQAAAAAAAJYBAAAAAAAAAAAAAJYBAAAAAAAAlwEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAigEAAAAAAACKAQAAAAAAAAAAAAAAAPC/"
				],
				[
					196,
					1,
					"insert",
					{
						"characters": "yer_Name"
					},
					"CAAAAJcBAAAAAAAAmAEAAAAAAAAAAAAAmAEAAAAAAACZAQAAAAAAAAAAAACZAQAAAAAAAJoBAAAAAAAAAAAAAJoBAAAAAAAAmwEAAAAAAAAAAAAAmwEAAAAAAACcAQAAAAAAAAAAAACcAQAAAAAAAJ0BAAAAAAAAAAAAAJ0BAAAAAAAAngEAAAAAAAAAAAAAngEAAAAAAACfAQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAlwEAAAAAAACXAQAAAAAAAAAAAAAAAPC/"
				],
				[
					198,
					1,
					"insert",
					{
						"characters": "Animation_Pl"
					},
					"DAAAAKABAAAAAAAAoQEAAAAAAAAAAAAAoQEAAAAAAACiAQAAAAAAAAAAAACiAQAAAAAAAKMBAAAAAAAAAAAAAKMBAAAAAAAApAEAAAAAAAAAAAAApAEAAAAAAAClAQAAAAAAAAAAAAClAQAAAAAAAKYBAAAAAAAAAAAAAKYBAAAAAAAApwEAAAAAAAAAAAAApwEAAAAAAACoAQAAAAAAAAAAAACoAQAAAAAAAKkBAAAAAAAAAAAAAKkBAAAAAAAAqgEAAAAAAAAAAAAAqgEAAAAAAACrAQAAAAAAAAAAAACrAQAAAAAAAKwBAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAoAEAAAAAAACgAQAAAAAAAAAAAAAAAPC/"
				],
				[
					199,
					1,
					"insert",
					{
						"characters": "ayer"
					},
					"BAAAAKwBAAAAAAAArQEAAAAAAAAAAAAArQEAAAAAAACuAQAAAAAAAAAAAACuAQAAAAAAAK8BAAAAAAAAAAAAAK8BAAAAAAAAsAEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAArAEAAAAAAACsAQAAAAAAAAAAAAAAAPC/"
				],
				[
					201,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAALABAAAAAAAAsgEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAsAEAAAAAAACwAQAAAAAAAAAAAAAAAPC/"
				],
				[
					205,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAPUAAAAAAAAA9wAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA9QAAAAAAAAD1AAAAAAAAAAAAAAAAyIFA"
				],
				[
					209,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"AwAAAPYAAAAAAAAA9wAAAAAAAAAAAAAA9wAAAAAAAAD4AAAAAAAAAAAAAAD3AAAAAAAAAPgAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA9gAAAAAAAAD2AAAAAAAAAAAAAAAAAPC/"
				],
				[
					214,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BAAAAE4BAAAAAAAATwEAAAAAAAAAAAAATwEAAAAAAABQAQAAAAAAAAAAAAD3AAAAAAAAAPcAAAAAAAAAAQAAAAlOAQAAAAAAAE8BAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAATgEAAAAAAABOAQAAAAAAAAAAAAAAAPC/"
				],
				[
					218,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BAAAALgBAAAAAAAAuQEAAAAAAAAAAAAAuQEAAAAAAAC6AQAAAAAAAAAAAABOAQAAAAAAAE4BAAAAAAAAAQAAAAm4AQAAAAAAALkBAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAuAEAAAAAAAC4AQAAAAAAAAAAAAAAAPC/"
				],
				[
					222,
					1,
					"insert",
					{
						"characters": "\n\nSprite_"
					},
					"CgAAAKIAAAAAAAAAowAAAAAAAAAAAAAAuQEAAAAAAAC5AQAAAAAAAAEAAAAJowAAAAAAAACkAAAAAAAAAAAAAACkAAAAAAAAAKUAAAAAAAAAAAAAAKUAAAAAAAAApgAAAAAAAAAAAAAApgAAAAAAAACnAAAAAAAAAAAAAACnAAAAAAAAAKgAAAAAAAAAAAAAAKgAAAAAAAAAqQAAAAAAAAAAAAAAqQAAAAAAAACqAAAAAAAAAAAAAACqAAAAAAAAAKsAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAogAAAAAAAACiAAAAAAAAAAAAAAAAgEBA"
				],
				[
					223,
					1,
					"insert",
					{
						"characters": "Sheet_Name"
					},
					"CgAAAKsAAAAAAAAArAAAAAAAAAAAAAAArAAAAAAAAACtAAAAAAAAAAAAAACtAAAAAAAAAK4AAAAAAAAAAAAAAK4AAAAAAAAArwAAAAAAAAAAAAAArwAAAAAAAACwAAAAAAAAAAAAAACwAAAAAAAAALEAAAAAAAAAAAAAALEAAAAAAAAAsgAAAAAAAAAAAAAAsgAAAAAAAACzAAAAAAAAAAAAAACzAAAAAAAAALQAAAAAAAAAAAAAALQAAAAAAAAAtQAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAqwAAAAAAAACrAAAAAAAAAAAAAAAAAPC/"
				],
				[
					224,
					1,
					"insert",
					{
						"characters": " ::"
					},
					"AwAAALUAAAAAAAAAtgAAAAAAAAAAAAAAtgAAAAAAAAC3AAAAAAAAAAAAAAC3AAAAAAAAALgAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtQAAAAAAAAC1AAAAAAAAAAAAAAAAAPC/"
				],
				[
					225,
					1,
					"insert",
					{
						"characters": " enum"
					},
					"BQAAALgAAAAAAAAAuQAAAAAAAAAAAAAAuQAAAAAAAAC6AAAAAAAAAAAAAAC6AAAAAAAAALsAAAAAAAAAAAAAALsAAAAAAAAAvAAAAAAAAAAAAAAAvAAAAAAAAAC9AAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAuAAAAAAAAAC4AAAAAAAAAAAAAAAAAPC/"
				],
				[
					226,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAL0AAAAAAAAAvgAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvQAAAAAAAAC9AAAAAAAAAAAAAAAAAPC/"
				],
				[
					227,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAL4AAAAAAAAAwAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvgAAAAAAAAC+AAAAAAAAAAAAAAAAAPC/"
				],
				[
					229,
					1,
					"insert",
					{
						"characters": "\nglobal_s"
					},
					"CQAAAMAAAAAAAAAAwQAAAAAAAAAAAAAAwQAAAAAAAADCAAAAAAAAAAAAAADCAAAAAAAAAMMAAAAAAAAAAAAAAMMAAAAAAAAAxAAAAAAAAAAAAAAAxAAAAAAAAADFAAAAAAAAAAAAAADFAAAAAAAAAMYAAAAAAAAAAAAAAMYAAAAAAAAAxwAAAAAAAAAAAAAAxwAAAAAAAADIAAAAAAAAAAAAAADIAAAAAAAAAMkAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwAAAAAAAAADAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					230,
					1,
					"insert",
					{
						"characters": "prite_sheets"
					},
					"DAAAAMkAAAAAAAAAygAAAAAAAAAAAAAAygAAAAAAAADLAAAAAAAAAAAAAADLAAAAAAAAAMwAAAAAAAAAAAAAAMwAAAAAAAAAzQAAAAAAAAAAAAAAzQAAAAAAAADOAAAAAAAAAAAAAADOAAAAAAAAAM8AAAAAAAAAAAAAAM8AAAAAAAAA0AAAAAAAAAAAAAAA0AAAAAAAAADRAAAAAAAAAAAAAADRAAAAAAAAANIAAAAAAAAAAAAAANIAAAAAAAAA0wAAAAAAAAAAAAAA0wAAAAAAAADUAAAAAAAAAAAAAADUAAAAAAAAANUAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAyQAAAAAAAADJAAAAAAAAAAAAAAAAAPC/"
				],
				[
					231,
					1,
					"insert",
					{
						"characters": " :="
					},
					"AwAAANUAAAAAAAAA1gAAAAAAAAAAAAAA1gAAAAAAAADXAAAAAAAAAAAAAADXAAAAAAAAANgAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1QAAAAAAAADVAAAAAAAAAAAAAAAAAPC/"
				],
				[
					232,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANgAAAAAAAAA2QAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2AAAAAAAAADYAAAAAAAAAAAAAAAAAPC/"
				],
				[
					233,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAANkAAAAAAAAA2wAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2QAAAAAAAADZAAAAAAAAAAAAAAAAAPC/"
				],
				[
					234,
					1,
					"insert",
					{
						"characters": "Sprite_Shet"
					},
					"CwAAANoAAAAAAAAA2wAAAAAAAAAAAAAA2wAAAAAAAADcAAAAAAAAAAAAAADcAAAAAAAAAN0AAAAAAAAAAAAAAN0AAAAAAAAA3gAAAAAAAAAAAAAA3gAAAAAAAADfAAAAAAAAAAAAAADfAAAAAAAAAOAAAAAAAAAAAAAAAOAAAAAAAAAA4QAAAAAAAAAAAAAA4QAAAAAAAADiAAAAAAAAAAAAAADiAAAAAAAAAOMAAAAAAAAAAAAAAOMAAAAAAAAA5AAAAAAAAAAAAAAA5AAAAAAAAADlAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2gAAAAAAAADaAAAAAAAAAAAAAAAAAPC/"
				],
				[
					235,
					1,
					"insert",
					{
						"characters": "et"
					},
					"AgAAAOUAAAAAAAAA5gAAAAAAAAAAAAAA5gAAAAAAAADnAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA5QAAAAAAAADlAAAAAAAAAAAAAAAAAPC/"
				],
				[
					236,
					3,
					"left_delete",
					null,
					"AwAAAOYAAAAAAAAA5gAAAAAAAAABAAAAdOUAAAAAAAAA5QAAAAAAAAABAAAAZeQAAAAAAAAA5AAAAAAAAAABAAAAdA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA5wAAAAAAAADnAAAAAAAAAAAAAAAAAPC/"
				],
				[
					237,
					1,
					"insert",
					{
						"characters": "et_Name"
					},
					"BwAAAOQAAAAAAAAA5QAAAAAAAAAAAAAA5QAAAAAAAADmAAAAAAAAAAAAAADmAAAAAAAAAOcAAAAAAAAAAAAAAOcAAAAAAAAA6AAAAAAAAAAAAAAA6AAAAAAAAADpAAAAAAAAAAAAAADpAAAAAAAAAOoAAAAAAAAAAAAAAOoAAAAAAAAA6wAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA5AAAAAAAAADkAAAAAAAAAAAAAAAAAPC/"
				],
				[
					240,
					1,
					"insert",
					{
						"characters": "rl.Texture"
					},
					"CgAAAOwAAAAAAAAA7QAAAAAAAAAAAAAA7QAAAAAAAADuAAAAAAAAAAAAAADuAAAAAAAAAO8AAAAAAAAAAAAAAO8AAAAAAAAA8AAAAAAAAAAAAAAA8AAAAAAAAADxAAAAAAAAAAAAAADxAAAAAAAAAPIAAAAAAAAAAAAAAPIAAAAAAAAA8wAAAAAAAAAAAAAA8wAAAAAAAAD0AAAAAAAAAAAAAAD0AAAAAAAAAPUAAAAAAAAAAAAAAPUAAAAAAAAA9gAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA7AAAAAAAAADsAAAAAAAAAAAAAAAAAPC/"
				],
				[
					242,
					1,
					"insert",
					{
						"characters": "2D"
					},
					"AgAAAPYAAAAAAAAA9wAAAAAAAAAAAAAA9wAAAAAAAAD4AAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA9gAAAAAAAAD2AAAAAAAAAAAAAAAAAPC/"
				],
				[
					244,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAPgAAAAAAAAA+gAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+AAAAAAAAAD4AAAAAAAAAAAAAAAAAPC/"
				],
				[
					248,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"AwAAAPkAAAAAAAAA+gAAAAAAAAAAAAAA+gAAAAAAAAD7AAAAAAAAAAAAAAD6AAAAAAAAAPsAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+QAAAAAAAAD5AAAAAAAAAAAAAAAAAPC/"
				],
				[
					253,
					2,
					"left_delete",
					null,
					"AgAAAKQAAAAAAAAApAAAAAAAAABZAAAAU3ByaXRlX1NoZWV0X05hbWUgOjogZW51bSB7fQpnbG9iYWxfc3ByaXRlX3NoZWV0cyA6PSBbU3ByaXRlX1NoZWV0X05hbWVdcmwuVGV4dHVyZTJEewoJCn2jAAAAAAAAAKMAAAAAAAAAAQAAAAo",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/QAAAAAAAACkAAAAAAAAAAAAAAAAAPC/"
				],
				[
					257,
					1,
					"insert",
					{
						"characters": "\n\n\nanimation"
					},
					"DAAAALsBAAAAAAAAvAEAAAAAAAAAAAAAvAEAAAAAAAC9AQAAAAAAAAAAAAC9AQAAAAAAAL4BAAAAAAAAAAAAAL4BAAAAAAAAvwEAAAAAAAAAAAAAvwEAAAAAAADAAQAAAAAAAAAAAADAAQAAAAAAAMEBAAAAAAAAAAAAAMEBAAAAAAAAwgEAAAAAAAAAAAAAwgEAAAAAAADDAQAAAAAAAAAAAADDAQAAAAAAAMQBAAAAAAAAAAAAAMQBAAAAAAAAxQEAAAAAAAAAAAAAxQEAAAAAAADGAQAAAAAAAAAAAADGAQAAAAAAAMcBAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAuwEAAAAAAAC7AQAAAAAAAAAAAAAAAPC/"
				],
				[
					258,
					1,
					"insert",
					{
						"characters": "_player"
					},
					"BwAAAMcBAAAAAAAAyAEAAAAAAAAAAAAAyAEAAAAAAADJAQAAAAAAAAAAAADJAQAAAAAAAMoBAAAAAAAAAAAAAMoBAAAAAAAAywEAAAAAAAAAAAAAywEAAAAAAADMAQAAAAAAAAAAAADMAQAAAAAAAM0BAAAAAAAAAAAAAM0BAAAAAAAAzgEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxwEAAAAAAADHAQAAAAAAAAAAAAAAAPC/"
				],
				[
					265,
					1,
					"insert",
					{
						"characters": "_advance"
					},
					"CAAAAM4BAAAAAAAAzwEAAAAAAAAAAAAAzwEAAAAAAADQAQAAAAAAAAAAAADQAQAAAAAAANEBAAAAAAAAAAAAANEBAAAAAAAA0gEAAAAAAAAAAAAA0gEAAAAAAADTAQAAAAAAAAAAAADTAQAAAAAAANQBAAAAAAAAAAAAANQBAAAAAAAA1QEAAAAAAAAAAAAA1QEAAAAAAADWAQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAzgEAAAAAAADOAQAAAAAAAAAAAAAAAPC/"
				],
				[
					266,
					1,
					"insert",
					{
						"characters": " ::"
					},
					"AwAAANYBAAAAAAAA1wEAAAAAAAAAAAAA1wEAAAAAAADYAQAAAAAAAAAAAADYAQAAAAAAANkBAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1gEAAAAAAADWAQAAAAAAAAAAAAAAAPC/"
				],
				[
					267,
					1,
					"insert",
					{
						"characters": " proc"
					},
					"BQAAANkBAAAAAAAA2gEAAAAAAAAAAAAA2gEAAAAAAADbAQAAAAAAAAAAAADbAQAAAAAAANwBAAAAAAAAAAAAANwBAAAAAAAA3QEAAAAAAAAAAAAA3QEAAAAAAADeAQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2QEAAAAAAADZAQAAAAAAAAAAAAAAAPC/"
				],
				[
					268,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAN4BAAAAAAAA4AEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3gEAAAAAAADeAQAAAAAAAAAAAAAAAPC/"
				],
				[
					269,
					1,
					"insert",
					{
						"characters": "&"
					},
					"AQAAAN8BAAAAAAAA4AEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3wEAAAAAAADfAQAAAAAAAAAAAAAAAPC/"
				],
				[
					270,
					1,
					"left_delete",
					null,
					"AQAAAN8BAAAAAAAA3wEAAAAAAAABAAAAJg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4AEAAAAAAADgAQAAAAAAAAAAAAAAAPC/"
				],
				[
					273,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAM4BAAAAAAAAzwEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAzgEAAAAAAADOAQAAAAAAAAAAAAAAAPC/"
				],
				[
					275,
					4,
					"delete_word",
					{
						"forward": false
					},
					"BAAAAN8BAAAAAAAA3wEAAAAAAAACAAAAKCnbAQAAAAAAANsBAAAAAAAABAAAAHByb2PYAQAAAAAAANgBAAAAAAAAAwAAADo6IL4BAAAAAAAAvgEAAAAAAAAaAAAAYW5pbWF0aW9uX3BsYXllcnNfYWR2YW5jZSA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4QEAAAAAAADhAQAAAAAAAAAAAAAAAPC/"
				],
				[
					276,
					1,
					"left_delete",
					null,
					"AQAAAL0BAAAAAAAAvQEAAAAAAAABAAAACg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvgEAAAAAAAC+AQAAAAAAAAAAAAAAAPC/"
				],
				[
					280,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAL0BAAAAAAAAvgEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvQEAAAAAAAC9AQAAAAAAAAAAAAAAAPC/"
				],
				[
					281,
					1,
					"paste",
					null,
					"AQAAAL4BAAAAAAAAnAcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvgEAAAAAAAC+AQAAAAAAAAAAAAAAAPC/"
				],
				[
					286,
					1,
					"insert",
					{
						"characters": "\n\n//"
					},
					"BAAAALwBAAAAAAAAvQEAAAAAAAAAAAAAvQEAAAAAAAC+AQAAAAAAAAAAAAC+AQAAAAAAAL8BAAAAAAAAAAAAAL8BAAAAAAAAwAEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvAEAAAAAAAC8AQAAAAAAAAAAAAAAAPC/"
				],
				[
					287,
					1,
					"insert",
					{
						"characters": " These"
					},
					"BgAAAMABAAAAAAAAwQEAAAAAAAAAAAAAwQEAAAAAAADCAQAAAAAAAAAAAADCAQAAAAAAAMMBAAAAAAAAAAAAAMMBAAAAAAAAxAEAAAAAAAAAAAAAxAEAAAAAAADFAQAAAAAAAAAAAADFAQAAAAAAAMYBAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwAEAAAAAAADAAQAAAAAAAAAAAAAAAPC/"
				],
				[
					288,
					1,
					"insert",
					{
						"characters": " are"
					},
					"BAAAAMYBAAAAAAAAxwEAAAAAAAAAAAAAxwEAAAAAAADIAQAAAAAAAAAAAADIAQAAAAAAAMkBAAAAAAAAAAAAAMkBAAAAAAAAygEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxgEAAAAAAADGAQAAAAAAAAAAAAAAAPC/"
				],
				[
					289,
					1,
					"insert",
					{
						"characters": " here"
					},
					"BQAAAMoBAAAAAAAAywEAAAAAAAAAAAAAywEAAAAAAADMAQAAAAAAAAAAAADMAQAAAAAAAM0BAAAAAAAAAAAAAM0BAAAAAAAAzgEAAAAAAAAAAAAAzgEAAAAAAADPAQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAygEAAAAAAADKAQAAAAAAAAAAAAAAAPC/"
				],
				[
					290,
					1,
					"insert",
					{
						"characters": " because"
					},
					"CAAAAM8BAAAAAAAA0AEAAAAAAAAAAAAA0AEAAAAAAADRAQAAAAAAAAAAAADRAQAAAAAAANIBAAAAAAAAAAAAANIBAAAAAAAA0wEAAAAAAAAAAAAA0wEAAAAAAADUAQAAAAAAAAAAAADUAQAAAAAAANUBAAAAAAAAAAAAANUBAAAAAAAA1gEAAAAAAAAAAAAA1gEAAAAAAADXAQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAzwEAAAAAAADPAQAAAAAAAAAAAAAAAPC/"
				],
				[
					291,
					1,
					"insert",
					{
						"characters": " not"
					},
					"BAAAANcBAAAAAAAA2AEAAAAAAAAAAAAA2AEAAAAAAADZAQAAAAAAAAAAAADZAQAAAAAAANoBAAAAAAAAAAAAANoBAAAAAAAA2wEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1wEAAAAAAADXAQAAAAAAAAAAAAAAAPC/"
				],
				[
					292,
					1,
					"insert",
					{
						"characters": " common"
					},
					"BwAAANsBAAAAAAAA3AEAAAAAAAAAAAAA3AEAAAAAAADdAQAAAAAAAAAAAADdAQAAAAAAAN4BAAAAAAAAAAAAAN4BAAAAAAAA3wEAAAAAAAAAAAAA3wEAAAAAAADgAQAAAAAAAAAAAADgAQAAAAAAAOEBAAAAAAAAAAAAAOEBAAAAAAAA4gEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2wEAAAAAAADbAQAAAAAAAAAAAAAAAPC/"
				],
				[
					293,
					1,
					"insert",
					{
						"characters": " to"
					},
					"AwAAAOIBAAAAAAAA4wEAAAAAAAAAAAAA4wEAAAAAAADkAQAAAAAAAAAAAADkAQAAAAAAAOUBAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4gEAAAAAAADiAQAAAAAAAAAAAAAAAPC/"
				],
				[
					294,
					1,
					"insert",
					{
						"characters": " rlgrid"
					},
					"BwAAAOUBAAAAAAAA5gEAAAAAAAAAAAAA5gEAAAAAAADnAQAAAAAAAAAAAADnAQAAAAAAAOgBAAAAAAAAAAAAAOgBAAAAAAAA6QEAAAAAAAAAAAAA6QEAAAAAAADqAQAAAAAAAAAAAADqAQAAAAAAAOsBAAAAAAAAAAAAAOsBAAAAAAAA7AEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA5QEAAAAAAADlAQAAAAAAAAAAAAAAAPC/"
				],
				[
					295,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAOwBAAAAAAAA7QEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA7AEAAAAAAADsAQAAAAAAAAAAAAAAAPC/"
				],
				[
					296,
					1,
					"insert",
					{
						"characters": " they"
					},
					"BQAAAO0BAAAAAAAA7gEAAAAAAAAAAAAA7gEAAAAAAADvAQAAAAAAAAAAAADvAQAAAAAAAPABAAAAAAAAAAAAAPABAAAAAAAA8QEAAAAAAAAAAAAA8QEAAAAAAADyAQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA7QEAAAAAAADtAQAAAAAAAAAAAAAAAPC/"
				],
				[
					297,
					1,
					"insert",
					{
						"characters": " are"
					},
					"BAAAAPIBAAAAAAAA8wEAAAAAAAAAAAAA8wEAAAAAAAD0AQAAAAAAAAAAAAD0AQAAAAAAAPUBAAAAAAAAAAAAAPUBAAAAAAAA9gEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA8gEAAAAAAADyAQAAAAAAAAAAAAAAAPC/"
				],
				[
					298,
					1,
					"insert",
					{
						"characters": " application"
					},
					"DAAAAPYBAAAAAAAA9wEAAAAAAAAAAAAA9wEAAAAAAAD4AQAAAAAAAAAAAAD4AQAAAAAAAPkBAAAAAAAAAAAAAPkBAAAAAAAA+gEAAAAAAAAAAAAA+gEAAAAAAAD7AQAAAAAAAAAAAAD7AQAAAAAAAPwBAAAAAAAAAAAAAPwBAAAAAAAA/QEAAAAAAAAAAAAA/QEAAAAAAAD+AQAAAAAAAAAAAAD+AQAAAAAAAP8BAAAAAAAAAAAAAP8BAAAAAAAAAAIAAAAAAAAAAAAAAAIAAAAAAAABAgAAAAAAAAAAAAABAgAAAAAAAAICAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA9gEAAAAAAAD2AQAAAAAAAAAAAAAAAPC/"
				],
				[
					299,
					1,
					"insert",
					{
						"characters": " code"
					},
					"BQAAAAICAAAAAAAAAwIAAAAAAAAAAAAAAwIAAAAAAAAEAgAAAAAAAAAAAAAEAgAAAAAAAAUCAAAAAAAAAAAAAAUCAAAAAAAABgIAAAAAAAAAAAAABgIAAAAAAAAHAgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAgIAAAAAAAACAgAAAAAAAAAAAAAAAPC/"
				],
				[
					300,
					1,
					"insert",
					{
						"characters": " as"
					},
					"AwAAAAcCAAAAAAAACAIAAAAAAAAAAAAACAIAAAAAAAAJAgAAAAAAAAAAAAAJAgAAAAAAAAoCAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABwIAAAAAAAAHAgAAAAAAAAAAAAAAAPC/"
				],
				[
					301,
					1,
					"insert",
					{
						"characters": " opposed"
					},
					"CAAAAAoCAAAAAAAACwIAAAAAAAAAAAAACwIAAAAAAAAMAgAAAAAAAAAAAAAMAgAAAAAAAA0CAAAAAAAAAAAAAA0CAAAAAAAADgIAAAAAAAAAAAAADgIAAAAAAAAPAgAAAAAAAAAAAAAPAgAAAAAAABACAAAAAAAAAAAAABACAAAAAAAAEQIAAAAAAAAAAAAAEQIAAAAAAAASAgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAACgIAAAAAAAAKAgAAAAAAAAAAAAAAAPC/"
				],
				[
					302,
					1,
					"insert",
					{
						"characters": " to"
					},
					"AwAAABICAAAAAAAAEwIAAAAAAAAAAAAAEwIAAAAAAAAUAgAAAAAAAAAAAAAUAgAAAAAAABUCAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEgIAAAAAAAASAgAAAAAAAAAAAAAAAPC/"
				],
				[
					303,
					1,
					"insert",
					{
						"characters": " library"
					},
					"CAAAABUCAAAAAAAAFgIAAAAAAAAAAAAAFgIAAAAAAAAXAgAAAAAAAAAAAAAXAgAAAAAAABgCAAAAAAAAAAAAABgCAAAAAAAAGQIAAAAAAAAAAAAAGQIAAAAAAAAaAgAAAAAAAAAAAAAaAgAAAAAAABsCAAAAAAAAAAAAABsCAAAAAAAAHAIAAAAAAAAAAAAAHAIAAAAAAAAdAgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFQIAAAAAAAAVAgAAAAAAAAAAAAAAAPC/"
				],
				[
					304,
					1,
					"insert",
					{
						"characters": " because"
					},
					"CAAAAB0CAAAAAAAAHgIAAAAAAAAAAAAAHgIAAAAAAAAfAgAAAAAAAAAAAAAfAgAAAAAAACACAAAAAAAAAAAAACACAAAAAAAAIQIAAAAAAAAAAAAAIQIAAAAAAAAiAgAAAAAAAAAAAAAiAgAAAAAAACMCAAAAAAAAAAAAACMCAAAAAAAAJAIAAAAAAAAAAAAAJAIAAAAAAAAlAgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHQIAAAAAAAAdAgAAAAAAAAAAAAAAAPC/"
				],
				[
					305,
					1,
					"insert",
					{
						"characters": " i"
					},
					"AgAAACUCAAAAAAAAJgIAAAAAAAAAAAAAJgIAAAAAAAAnAgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJQIAAAAAAAAlAgAAAAAAAAAAAAAAAPC/"
				],
				[
					306,
					1,
					"insert",
					{
						"characters": " may"
					},
					"BAAAACcCAAAAAAAAKAIAAAAAAAAAAAAAKAIAAAAAAAApAgAAAAAAAAAAAAApAgAAAAAAACoCAAAAAAAAAAAAACoCAAAAAAAAKwIAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJwIAAAAAAAAnAgAAAAAAAAAAAAAAAPC/"
				],
				[
					307,
					1,
					"insert",
					{
						"characters": " not"
					},
					"BAAAACsCAAAAAAAALAIAAAAAAAAAAAAALAIAAAAAAAAtAgAAAAAAAAAAAAAtAgAAAAAAAC4CAAAAAAAAAAAAAC4CAAAAAAAALwIAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKwIAAAAAAAArAgAAAAAAAAAAAAAAAPC/"
				],
				[
					308,
					1,
					"insert",
					{
						"characters": " re-use"
					},
					"BwAAAC8CAAAAAAAAMAIAAAAAAAAAAAAAMAIAAAAAAAAxAgAAAAAAAAAAAAAxAgAAAAAAADICAAAAAAAAAAAAADICAAAAAAAAMwIAAAAAAAAAAAAAMwIAAAAAAAA0AgAAAAAAAAAAAAA0AgAAAAAAADUCAAAAAAAAAAAAADUCAAAAAAAANgIAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALwIAAAAAAAAvAgAAAAAAAAAAAAAAAPC/"
				],
				[
					309,
					1,
					"insert",
					{
						"characters": " the"
					},
					"BAAAADYCAAAAAAAANwIAAAAAAAAAAAAANwIAAAAAAAA4AgAAAAAAAAAAAAA4AgAAAAAAADkCAAAAAAAAAAAAADkCAAAAAAAAOgIAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANgIAAAAAAAA2AgAAAAAAAAAAAAAAAPC/"
				],
				[
					310,
					1,
					"insert",
					{
						"characters": " above"
					},
					"BgAAADoCAAAAAAAAOwIAAAAAAAAAAAAAOwIAAAAAAAA8AgAAAAAAAAAAAAA8AgAAAAAAAD0CAAAAAAAAAAAAAD0CAAAAAAAAPgIAAAAAAAAAAAAAPgIAAAAAAAA/AgAAAAAAAAAAAAA/AgAAAAAAAEACAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOgIAAAAAAAA6AgAAAAAAAAAAAAAAAPC/"
				],
				[
					311,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEACAAAAAAAAQQIAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQAIAAAAAAABAAgAAAAAAAAAAAAAAAPC/"
				],
				[
					312,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAEECAAAAAAAAQwIAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQQIAAAAAAABBAgAAAAAAAAAAAAAAAPC/"
				],
				[
					313,
					1,
					"insert",
					{
						"characters": "A"
					},
					"AQAAAEICAAAAAAAAQwIAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQgIAAAAAAABCAgAAAAAAAAAAAAAAAPC/"
				],
				[
					314,
					1,
					"left_delete",
					null,
					"AQAAAEICAAAAAAAAQgIAAAAAAAABAAAAQQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQwIAAAAAAABDAgAAAAAAAAAAAAAAAPC/"
				],
				[
					315,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAEECAAAAAAAAQQIAAAAAAAABAAAAIkECAAAAAAAAQQIAAAAAAAABAAAAIg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQgIAAAAAAABCAgAAAAAAAAAAAAAAAPC/"
				],
				[
					319,
					1,
					"insert",
					{
						"characters": "\nglobal_spri"
					},
					"DAAAALwBAAAAAAAAvQEAAAAAAAAAAAAAvQEAAAAAAAC+AQAAAAAAAAAAAAC+AQAAAAAAAL8BAAAAAAAAAAAAAL8BAAAAAAAAwAEAAAAAAAAAAAAAwAEAAAAAAADBAQAAAAAAAAAAAADBAQAAAAAAAMIBAAAAAAAAAAAAAMIBAAAAAAAAwwEAAAAAAAAAAAAAwwEAAAAAAADEAQAAAAAAAAAAAADEAQAAAAAAAMUBAAAAAAAAAAAAAMUBAAAAAAAAxgEAAAAAAAAAAAAAxgEAAAAAAADHAQAAAAAAAAAAAADHAQAAAAAAAMgBAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvAEAAAAAAAC8AQAAAAAAAAAAAAAAAPC/"
				],
				[
					320,
					1,
					"insert",
					{
						"characters": "te_sheet_cell"
					},
					"DQAAAMgBAAAAAAAAyQEAAAAAAAAAAAAAyQEAAAAAAADKAQAAAAAAAAAAAADKAQAAAAAAAMsBAAAAAAAAAAAAAMsBAAAAAAAAzAEAAAAAAAAAAAAAzAEAAAAAAADNAQAAAAAAAAAAAADNAQAAAAAAAM4BAAAAAAAAAAAAAM4BAAAAAAAAzwEAAAAAAAAAAAAAzwEAAAAAAADQAQAAAAAAAAAAAADQAQAAAAAAANEBAAAAAAAAAAAAANEBAAAAAAAA0gEAAAAAAAAAAAAA0gEAAAAAAADTAQAAAAAAAAAAAADTAQAAAAAAANQBAAAAAAAAAAAAANQBAAAAAAAA1QEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAyAEAAAAAAADIAQAAAAAAAAAAAAAAAPC/"
				],
				[
					321,
					1,
					"insert",
					{
						"characters": "_size"
					},
					"BQAAANUBAAAAAAAA1gEAAAAAAAAAAAAA1gEAAAAAAADXAQAAAAAAAAAAAADXAQAAAAAAANgBAAAAAAAAAAAAANgBAAAAAAAA2QEAAAAAAAAAAAAA2QEAAAAAAADaAQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1QEAAAAAAADVAQAAAAAAAAAAAAAAAPC/"
				],
				[
					322,
					1,
					"insert",
					{
						"characters": " :="
					},
					"AwAAANoBAAAAAAAA2wEAAAAAAAAAAAAA2wEAAAAAAADcAQAAAAAAAAAAAADcAQAAAAAAAN0BAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2gEAAAAAAADaAQAAAAAAAAAAAAAAAPC/"
				],
				[
					323,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAN0BAAAAAAAA3gEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3QEAAAAAAADdAQAAAAAAAAAAAAAAAPC/"
				],
				[
					325,
					1,
					"insert",
					{
						"characters": "f32"
					},
					"AwAAANwBAAAAAAAA3QEAAAAAAAAAAAAA3QEAAAAAAADeAQAAAAAAAAAAAADeAQAAAAAAAN8BAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3AEAAAAAAADcAQAAAAAAAAAAAAAAAPC/"
				],
				[
					327,
					1,
					"insert",
					{
						"characters": "32"
					},
					"AgAAAOABAAAAAAAA4QEAAAAAAAAAAAAA4QEAAAAAAADiAQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4AEAAAAAAADgAQAAAAAAAAAAAAAAAPC/"
				],
				[
					332,
					6,
					"left_delete",
					null,
					"BgAAAEYDAAAAAAAARgMAAAAAAAABAAAAdEUDAAAAAAAARQMAAAAAAAABAAAAZUQDAAAAAAAARAMAAAAAAAABAAAAZUMDAAAAAAAAQwMAAAAAAAABAAAAaEIDAAAAAAAAQgMAAAAAAAABAAAAc0EDAAAAAAAAQQMAAAAAAAABAAAAXw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARwMAAAAAAABHAwAAAAAAAAAAAAAAAPC/"
				],
				[
					341,
					1,
					"insert",
					{
						"characters": "\nimport"
					},
					"BwAAACcAAAAAAAAAKAAAAAAAAAAAAAAAKAAAAAAAAAApAAAAAAAAAAAAAAApAAAAAAAAACoAAAAAAAAAAAAAACoAAAAAAAAAKwAAAAAAAAAAAAAAKwAAAAAAAAAsAAAAAAAAAAAAAAAsAAAAAAAAAC0AAAAAAAAAAAAAAC0AAAAAAAAALgAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJwAAAAAAAAAnAAAAAAAAAAAAAAAAAPC/"
				],
				[
					342,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAC4AAAAAAAAALwAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALgAAAAAAAAAuAAAAAAAAAAAAAAAAAPC/"
				],
				[
					343,
					1,
					"insert",
					{
						"characters": "rlgrid"
					},
					"BgAAAC8AAAAAAAAAMAAAAAAAAAAAAAAAMAAAAAAAAAAxAAAAAAAAAAAAAAAxAAAAAAAAADIAAAAAAAAAAAAAADIAAAAAAAAAMwAAAAAAAAAAAAAAMwAAAAAAAAA0AAAAAAAAAAAAAAA0AAAAAAAAADUAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALwAAAAAAAAAvAAAAAAAAAAAAAAAAAPC/"
				],
				[
					344,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADUAAAAAAAAANgAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANQAAAAAAAAA1AAAAAAAAAAAAAAAAAPC/"
				],
				[
					345,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAADYAAAAAAAAAOAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANgAAAAAAAAA2AAAAAAAAAAAAAAAAAPC/"
				],
				[
					346,
					1,
					"insert",
					{
						"characters": "..\\"
					},
					"AwAAADcAAAAAAAAAOAAAAAAAAAAAAAAAOAAAAAAAAAA5AAAAAAAAAAAAAAA5AAAAAAAAADoAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANwAAAAAAAAA3AAAAAAAAAAAAAAAAAPC/"
				],
				[
					347,
					1,
					"left_delete",
					null,
					"AQAAADkAAAAAAAAAOQAAAAAAAAABAAAAXA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOgAAAAAAAAA6AAAAAAAAAAAAAAAAAPC/"
				],
				[
					348,
					1,
					"insert",
					{
						"characters": "/rlgrid"
					},
					"BwAAADkAAAAAAAAAOgAAAAAAAAAAAAAAOgAAAAAAAAA7AAAAAAAAAAAAAAA7AAAAAAAAADwAAAAAAAAAAAAAADwAAAAAAAAAPQAAAAAAAAAAAAAAPQAAAAAAAAA+AAAAAAAAAAAAAAA+AAAAAAAAAD8AAAAAAAAAAAAAAD8AAAAAAAAAQAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOQAAAAAAAAA5AAAAAAAAAAAAAAAAAPC/"
				],
				[
					356,
					1,
					"left_delete",
					null,
					"AQAAADgAAAAAAAAAOAAAAAAAAAABAAAALg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOQAAAAAAAAA5AAAAAAAAAAAAAAAAAPC/"
				],
				[
					368,
					6,
					"left_delete",
					null,
					"BgAAAB8FAAAAAAAAHwUAAAAAAAABAAAAXx4FAAAAAAAAHgUAAAAAAAABAAAAdB0FAAAAAAAAHQUAAAAAAAABAAAAZRwFAAAAAAAAHAUAAAAAAAABAAAAZRsFAAAAAAAAGwUAAAAAAAABAAAAaBoFAAAAAAAAGgUAAAAAAAABAAAAcw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIAUAAAAAAAAgBQAAAAAAAAAAAAAAAPC/"
				],
				[
					373,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAPwBAAAAAAAA/QEAAAAAAAAAAAAA/QEAAAAAAAD+AQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/AEAAAAAAAD8AQAAAAAAAAAAAAAAAPC/"
				],
				[
					374,
					1,
					"paste",
					null,
					"AQAAAP4BAAAAAAAAAAUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/gEAAAAAAAD+AQAAAAAAAAAAAAAAAPC/"
				],
				[
					377,
					1,
					"cut",
					null,
					"AQAAANYBAAAAAAAA1gEAAAAAAAAmAAAAZ2xvYmFsX3Nwcml0ZV9zaGVldF9jZWxsX3NpemUgOmYzMj0zMiA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/AEAAAAAAADWAQAAAAAAAAAAAAAAAPC/"
				],
				[
					380,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAEEAAAAAAAAAQgAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQQAAAAAAAABBAAAAAAAAAAAAAAAAAPC/"
				],
				[
					381,
					1,
					"paste",
					null,
					"AQAAAEIAAAAAAAAAaAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQgAAAAAAAABCAAAAAAAAAAAAAAAAAPC/"
				],
				[
					382,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line.sublime-macro"
					},
					"AQAAAGgAAAAAAAAAaQAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAaAAAAAAAAABoAAAAAAAAAAAAAAAAAPC/"
				],
				[
					386,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGEAAAAAAAAAYgAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAYQAAAAAAAABhAAAAAAAAAAAAAAAAAPC/"
				],
				[
					388,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGUAAAAAAAAAZgAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAZQAAAAAAAABlAAAAAAAAAAAAAAAAAPC/"
				],
				[
					390,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGcAAAAAAAAAaAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAZwAAAAAAAABnAAAAAAAAAAAAAAAAAPC/"
				],
				[
					394,
					1,
					"insert",
					{
						"characters": "\nimport"
					},
					"BwAAAEAAAAAAAAAAQQAAAAAAAAAAAAAAQQAAAAAAAABCAAAAAAAAAAAAAABCAAAAAAAAAEMAAAAAAAAAAAAAAEMAAAAAAAAARAAAAAAAAAAAAAAARAAAAAAAAABFAAAAAAAAAAAAAABFAAAAAAAAAEYAAAAAAAAAAAAAAEYAAAAAAAAARwAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQAAAAAAAAABAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					395,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEcAAAAAAAAASAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARwAAAAAAAABHAAAAAAAAAAAAAAAAAPC/"
				],
				[
					396,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAEgAAAAAAAAASgAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAASAAAAAAAAABIAAAAAAAAAAAAAAAAAPC/"
				],
				[
					397,
					1,
					"insert",
					{
						"characters": "core:math"
					},
					"CQAAAEkAAAAAAAAASgAAAAAAAAAAAAAASgAAAAAAAABLAAAAAAAAAAAAAABLAAAAAAAAAEwAAAAAAAAAAAAAAEwAAAAAAAAATQAAAAAAAAAAAAAATQAAAAAAAABOAAAAAAAAAAAAAABOAAAAAAAAAE8AAAAAAAAAAAAAAE8AAAAAAAAAUAAAAAAAAAAAAAAAUAAAAAAAAABRAAAAAAAAAAAAAABRAAAAAAAAAFIAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAASQAAAAAAAABJAAAAAAAAAAAAAAAAAPC/"
				],
				[
					401,
					1,
					"cut",
					null,
					"AQAAAFUAAAAAAAAAVQAAAAAAAAAqAAAAZ2xvYmFsX3Nwcml0ZV9zaGVldF9jZWxsX3NpemUgOiBmMzIgPSAzMiAK",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAfgAAAAAAAAB+AAAAAAAAAAAAAAAAAPC/"
				],
				[
					410,
					2,
					"left_delete",
					null,
					"AgAAAIIKAAAAAAAAggoAAAAAAAAFAAAAdGltZXKBCgAAAAAAAIEKAAAAAAAAAQAAAC4",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAggoAAAAAAACHCgAAAAAAAAAAAAAAAPC/"
				],
				[
					419,
					1,
					"insert",
					{
						"characters": "sprite_"
					},
					"BwAAAEoBAAAAAAAASwEAAAAAAAAAAAAASwEAAAAAAABMAQAAAAAAAAAAAABMAQAAAAAAAE0BAAAAAAAAAAAAAE0BAAAAAAAATgEAAAAAAAAAAAAATgEAAAAAAABPAQAAAAAAAAAAAABPAQAAAAAAAFABAAAAAAAAAAAAAFABAAAAAAAAUQEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAASgEAAAAAAABKAQAAAAAAAAAAAAAAAPC/"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"packa",
				"Package Control: Install Package"
			],
			[
				"lsp",
				"LSP: Enable Language Server in Project"
			],
			[
				"install ",
				"Package Control: Install Package"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"pac",
				"Package Control: List Packages"
			],
			[
				"key",
				"Preferences: Key Bindings"
			],
			[
				"color sc",
				"UI: Select Color Scheme"
			],
			[
				"term",
				"Terminus: Toggle Panel"
			],
			[
				"install pa",
				"Package Control: Install Package"
			],
			[
				"install package",
				"Package Control: Install Package"
			],
			[
				"keyb",
				"Preferences: Key Bindings"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/johnb/source/repos/BiscuitGame",
		"/C/Users/johnb/source/repos/BiscuitGame/source",
		"/C/Users/johnb/source/repos/BiscuitGame/source/examples",
		"/C/Users/johnb/source/repos/BiscuitGame/source/rlgrid"
	],
	"file_history":
	[
		"/C/Users/johnb/source/repos/BiscuitGame/source/lerp.odin",
		"/C/Users/johnb/source/repos/sublime_odin/sublime_odin.sublime-project",
		"/C/Users/johnb/source/repos/sublime_odin/helo_world.odin"
	],
	"find":
	{
		"height": 46.0
	},
	"find_in_files":
	{
		"height": 101.0,
		"where_history":
		[
			"./build_default.bat",
			".",
			"odin-base",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"draw_line",
			"(entities)",
			"game_state.",
			"entities,",
			"orbiting_dir",
			"orbiting_angle",
			"parent_entity_id",
			"entity",
			"e_id",
			"&entities[biscuit.parent_entity_id]",
			"pass_chain_order",
			"parent_entity_id = Entity_Id",
			"parent_entity_id = Entity_Id(8)",
			"target_entity_id_to_pass_to = Entity_Id",
			"target_entity_handle",
			"e_h",
			"wait_timer_duration",
			"Balloon",
			" \n",
			"biscuit_collides_with_hazard",
			"is_biscuit_colliding_with_hazard",
			"is_biscuit_collides_with_hazard",
			"can_manually_pass_biscuit",
			",\n",
			"camera",
			"entities",
			"target_to_pass_to_entity_id",
			"f32(tex.width)",
			"root_state_main",
			"gameScreenHeight",
			"gameScreenWidth",
			"global_game_view_pixels_width",
			"global_sprite",
			"global_sprite_sheet_cell_size",
			"dbg_camera_offset_to_left",
			"global_sprite_sheet_clips",
			"t.duration",
			"t.now",
			"src",
			"global_game_view_pixels_height",
			"global_game_view_pixels_width",
			"global_game_texture_grid_cell_size",
			"{\n",
			"number_of_cells_in_view_axis_y",
			"global_number_grid_cells_axis_y",
			"number_of_cells_in_view_axis_y",
			"t"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"source"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "source/rlgrid/grid.odin",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10482,
						"regions":
						{
						},
						"selection":
						[
							[
								9008,
								10482
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".>#\"/:",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "odin"
								}
							],
							"lsp_active": true,
							"lsp_uri": "file:///C:/Users/johnb/source/repos/BiscuitGame/source/rlgrid/grid.odin",
							"show_definitions": false,
							"syntax": "Packages/Odin/Odin.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6784.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "source/game.odin",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 36920,
						"regions":
						{
						},
						"selection":
						[
							[
								4608,
								4608
							]
						],
						"settings":
						{
							"allow_quiet_save": true,
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".>#\"/:",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "odin"
								}
							],
							"lsp_active": true,
							"lsp_uri": "file:///C:/Users/johnb/source/repos/BiscuitGame/source/game.odin",
							"show_definitions": false,
							"syntax": "Packages/Odin/Odin.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 26.0,
						"translation.y": 3506.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "source/examples/biscuit_toss_example.odin",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 21125,
						"regions":
						{
						},
						"selection":
						[
							[
								143,
								143
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".>#\"/:",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "odin"
								}
							],
							"auto_name": "package game",
							"lsp_active": true,
							"lsp_uri": "file:///C:/Users/johnb/source/repos/BiscuitGame/source/examples/biscuit_toss_example.odin",
							"show_definitions": false,
							"syntax": "Packages/Odin/Odin.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 10337.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "source/handle_array.odin",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2690,
						"regions":
						{
						},
						"selection":
						[
							[
								1764,
								1776
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".>#\"/:",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "odin"
								}
							],
							"auto_name": "package game",
							"lsp_active": true,
							"lsp_uri": "file:///C:/Users/johnb/source/repos/BiscuitGame/source/handle_array.odin",
							"show_definitions": false,
							"syntax": "Packages/Odin/Odin.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1512.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/C/odin-windows-amd64-dev-2025-03/vendor/raylib/raylib.odin",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 139997,
						"regions":
						{
						},
						"selection":
						[
							[
								12509,
								12509
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".>#\"/:",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "odin"
								}
							],
							"lsp_active": true,
							"lsp_uri": "file:///C:/odin-windows-amd64-dev-2025-03/vendor/raylib/raylib.odin",
							"show_definitions": false,
							"syntax": "Packages/Odin/Odin.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 5294.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 135767,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions": "",
								"scope": ""
							}
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"default_dir": "C:\\Users\\johnb\\source\\repos\\odin-base\\source",
							"detect_indentation": false,
							"line_numbers": false,
							"lsp_uri": "buffer:342",
							"output_tag": 1,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "build_default.bat",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 92,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"lsp_uri": "file:///C:/Users/johnb/source/repos/odin-base/build_default.bat",
							"syntax": "Packages/Batch File/Batch File.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "build_hot_reload.bat",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3362,
						"regions":
						{
						},
						"selection":
						[
							[
								3201,
								3201
							]
						],
						"settings":
						{
							"lsp_uri": "file:///C:/Users/johnb/source/repos/odin-base/build_hot_reload.bat",
							"syntax": "Packages/Batch File/Batch File.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "build_web.bat",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1625,
						"regions":
						{
						},
						"selection":
						[
							[
								472,
								472
							]
						],
						"settings":
						{
							"lsp_uri": "file:///C:/Users/johnb/source/repos/odin-base/build_web.bat",
							"syntax": "Packages/Batch File/Batch File.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "source/percentage.odin",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 268,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".>#\"/:",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "odin"
								}
							],
							"auto_name": "package game",
							"lsp_active": true,
							"lsp_uri": "file:///C:/Users/johnb/source/repos/odin-base/source/percentage.odin",
							"show_definitions": false,
							"syntax": "Packages/Odin/Odin.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "source/countdown.odin",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 386,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".>#\"/:",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "odin"
								}
							],
							"auto_name": "package game",
							"lsp_active": true,
							"lsp_uri": "file:///C:/Users/johnb/source/repos/odin-base/source/countdown.odin",
							"show_definitions": false,
							"syntax": "Packages/Odin/Odin.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "source/sprite.odin",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3144,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".>#\"/:",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "odin"
								}
							],
							"auto_name": "package game",
							"lsp_active": true,
							"lsp_uri": "file:///C:/Users/johnb/source/repos/odin-base/source/sprite.odin",
							"show_definitions": false,
							"syntax": "Packages/Odin/Odin.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 34.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.LSP Log Panel":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"output.Terminus":
	{
		"height": 130.0,
		"history":
		[
		]
	},
	"output.diagnostics":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"output.exec":
	{
		"height": 634.0,
		"history":
		[
		]
	},
	"output.find_results":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"output.mdpopups":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"pinned_build_system": "odin build debug hot reload",
	"project": "sublime_odin.sublime-project",
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
		"lsp_show_inlay_hints": false
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 251.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
